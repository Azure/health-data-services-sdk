### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1
  commentId: T:Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1
  id: JsonTransformConverter`1
  parent: Microsoft.Health.Fhir.Proxy.Json.Transforms
  children:
  - Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1.CanConvert(System.Type)
  - Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1.Create(System.Type,Newtonsoft.Json.Linq.JObject)
  - Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1.FieldExists(Newtonsoft.Json.Linq.JObject,System.String,Newtonsoft.Json.Linq.JTokenType)
  - Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
  - Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
  langs:
  - csharp
  - vb
  name: JsonTransformConverter<T>
  nameWithType: JsonTransformConverter<T>
  fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter<T>
  type: Class
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Json/Transforms/JsonTransformConverter.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: JsonTransformConverter
    path: src/Microsoft.Health.Fhir.Proxy/Json/Transforms/JsonTransformConverter.cs
    startLine: 10
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Json.Transforms
  summary: "\nJSON.NET transform converter\n"
  example: []
  syntax:
    content: 'public abstract class JsonTransformConverter<T> : JsonConverter'
    typeParameters:
    - id: T
      description: ''
    content.vb: >-
      Public MustInherit Class JsonTransformConverter(Of T)
          Inherits JsonConverter
  inheritance:
  - System.Object
  - Newtonsoft.Json.JsonConverter
  derivedClasses:
  - Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformConverter
  inheritedMembers:
  - Newtonsoft.Json.JsonConverter.CanRead
  - Newtonsoft.Json.JsonConverter.CanWrite
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: JsonTransformConverter(Of T)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter(Of T)
  name.vb: JsonTransformConverter(Of T)
- uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1.Create(System.Type,Newtonsoft.Json.Linq.JObject)
  commentId: M:Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1.Create(System.Type,Newtonsoft.Json.Linq.JObject)
  id: Create(System.Type,Newtonsoft.Json.Linq.JObject)
  parent: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1
  langs:
  - csharp
  - vb
  name: Create(Type, JObject)
  nameWithType: JsonTransformConverter<T>.Create(Type, JObject)
  fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter<T>.Create(System.Type, Newtonsoft.Json.Linq.JObject)
  type: Method
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Json/Transforms/JsonTransformConverter.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: Create
    path: src/Microsoft.Health.Fhir.Proxy/Json/Transforms/JsonTransformConverter.cs
    startLine: 12
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Json.Transforms
  syntax:
    content: protected abstract T Create(Type objectType, JObject jObject)
    parameters:
    - id: objectType
      type: System.Type
    - id: jObject
      type: Newtonsoft.Json.Linq.JObject
    return:
      type: '{T}'
    content.vb: Protected MustOverride Function Create(objectType As Type, jObject As JObject) As T
  overload: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1.Create*
  nameWithType.vb: JsonTransformConverter(Of T).Create(Type, JObject)
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter(Of T).Create(System.Type, Newtonsoft.Json.Linq.JObject)
- uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1.CanConvert(System.Type)
  commentId: M:Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1.CanConvert(System.Type)
  id: CanConvert(System.Type)
  parent: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1
  langs:
  - csharp
  - vb
  name: CanConvert(Type)
  nameWithType: JsonTransformConverter<T>.CanConvert(Type)
  fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter<T>.CanConvert(System.Type)
  type: Method
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Json/Transforms/JsonTransformConverter.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: CanConvert
    path: src/Microsoft.Health.Fhir.Proxy/Json/Transforms/JsonTransformConverter.cs
    startLine: 19
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Json.Transforms
  summary: "\nIndicates whether the object can be converter.\n"
  example: []
  syntax:
    content: public override bool CanConvert(Type objectType)
    parameters:
    - id: objectType
      type: System.Type
      description: Type of object to convert.
    return:
      type: System.Boolean
      description: True if can be converted; otherwise false.
    content.vb: Public Overrides Function CanConvert(objectType As Type) As Boolean
  overridden: Newtonsoft.Json.JsonConverter.CanConvert(System.Type)
  overload: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1.CanConvert*
  nameWithType.vb: JsonTransformConverter(Of T).CanConvert(Type)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter(Of T).CanConvert(System.Type)
- uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
  commentId: M:Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
  id: ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
  parent: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1
  langs:
  - csharp
  - vb
  name: ReadJson(JsonReader, Type, Object, JsonSerializer)
  nameWithType: JsonTransformConverter<T>.ReadJson(JsonReader, Type, Object, JsonSerializer)
  fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter<T>.ReadJson(Newtonsoft.Json.JsonReader, System.Type, System.Object, Newtonsoft.Json.JsonSerializer)
  type: Method
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Json/Transforms/JsonTransformConverter.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: ReadJson
    path: src/Microsoft.Health.Fhir.Proxy/Json/Transforms/JsonTransformConverter.cs
    startLine: 32
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Json.Transforms
  summary: "\nRead the json object.\n"
  example: []
  syntax:
    content: public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
    parameters:
    - id: reader
      type: Newtonsoft.Json.JsonReader
      description: JsonReader
    - id: objectType
      type: System.Type
      description: Type of object to read.
    - id: existingValue
      type: System.Object
      description: Object to read.
    - id: serializer
      type: Newtonsoft.Json.JsonSerializer
      description: JsonSerializer.
    return:
      type: System.Object
      description: ''
    content.vb: Public Overrides Function ReadJson(reader As JsonReader, objectType As Type, existingValue As Object, serializer As JsonSerializer) As Object
  overridden: Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
  overload: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1.ReadJson*
  nameWithType.vb: JsonTransformConverter(Of T).ReadJson(JsonReader, Type, Object, JsonSerializer)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter(Of T).ReadJson(Newtonsoft.Json.JsonReader, System.Type, System.Object, Newtonsoft.Json.JsonSerializer)
- uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
  commentId: M:Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
  id: WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
  parent: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1
  langs:
  - csharp
  - vb
  name: WriteJson(JsonWriter, Object, JsonSerializer)
  nameWithType: JsonTransformConverter<T>.WriteJson(JsonWriter, Object, JsonSerializer)
  fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter<T>.WriteJson(Newtonsoft.Json.JsonWriter, System.Object, Newtonsoft.Json.JsonSerializer)
  type: Method
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Json/Transforms/JsonTransformConverter.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: WriteJson
    path: src/Microsoft.Health.Fhir.Proxy/Json/Transforms/JsonTransformConverter.cs
    startLine: 52
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Json.Transforms
  summary: "\nWrite json transform.\n"
  example: []
  syntax:
    content: public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
    parameters:
    - id: writer
      type: Newtonsoft.Json.JsonWriter
      description: JsonWriter
    - id: value
      type: System.Object
      description: Object to write.
    - id: serializer
      type: Newtonsoft.Json.JsonSerializer
      description: JsonSerializer
    content.vb: Public Overrides Sub WriteJson(writer As JsonWriter, value As Object, serializer As JsonSerializer)
  overridden: Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
  overload: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1.WriteJson*
  nameWithType.vb: JsonTransformConverter(Of T).WriteJson(JsonWriter, Object, JsonSerializer)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter(Of T).WriteJson(Newtonsoft.Json.JsonWriter, System.Object, Newtonsoft.Json.JsonSerializer)
- uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1.FieldExists(Newtonsoft.Json.Linq.JObject,System.String,Newtonsoft.Json.Linq.JTokenType)
  commentId: M:Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1.FieldExists(Newtonsoft.Json.Linq.JObject,System.String,Newtonsoft.Json.Linq.JTokenType)
  id: FieldExists(Newtonsoft.Json.Linq.JObject,System.String,Newtonsoft.Json.Linq.JTokenType)
  parent: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1
  langs:
  - csharp
  - vb
  name: FieldExists(JObject, String, JTokenType)
  nameWithType: JsonTransformConverter<T>.FieldExists(JObject, String, JTokenType)
  fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter<T>.FieldExists(Newtonsoft.Json.Linq.JObject, System.String, Newtonsoft.Json.Linq.JTokenType)
  type: Method
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Json/Transforms/JsonTransformConverter.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: FieldExists
    path: src/Microsoft.Health.Fhir.Proxy/Json/Transforms/JsonTransformConverter.cs
    startLine: 82
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Json.Transforms
  summary: "\nIndicates whether a field exists.\n"
  example: []
  syntax:
    content: protected static bool FieldExists(JObject jObject, string name, JTokenType type)
    parameters:
    - id: jObject
      type: Newtonsoft.Json.Linq.JObject
      description: JObject to evaluate.
    - id: name
      type: System.String
      description: Name of field.
    - id: type
      type: Newtonsoft.Json.Linq.JTokenType
      description: Type of JToken.
    return:
      type: System.Boolean
      description: ''
    content.vb: Protected Shared Function FieldExists(jObject As JObject, name As String, type As JTokenType) As Boolean
  overload: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1.FieldExists*
  nameWithType.vb: JsonTransformConverter(Of T).FieldExists(JObject, String, JTokenType)
  modifiers.csharp:
  - protected
  - static
  modifiers.vb:
  - Protected
  - Shared
  fullName.vb: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter(Of T).FieldExists(Newtonsoft.Json.Linq.JObject, System.String, Newtonsoft.Json.Linq.JTokenType)
references:
- uid: Microsoft.Health.Fhir.Proxy.Json.Transforms
  commentId: N:Microsoft.Health.Fhir.Proxy.Json.Transforms
  name: Microsoft.Health.Fhir.Proxy.Json.Transforms
  nameWithType: Microsoft.Health.Fhir.Proxy.Json.Transforms
  fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Newtonsoft.Json.JsonConverter
  commentId: T:Newtonsoft.Json.JsonConverter
  parent: Newtonsoft.Json
  isExternal: true
  name: JsonConverter
  nameWithType: JsonConverter
  fullName: Newtonsoft.Json.JsonConverter
- uid: Newtonsoft.Json.JsonConverter.CanRead
  commentId: P:Newtonsoft.Json.JsonConverter.CanRead
  parent: Newtonsoft.Json.JsonConverter
  isExternal: true
  name: CanRead
  nameWithType: JsonConverter.CanRead
  fullName: Newtonsoft.Json.JsonConverter.CanRead
- uid: Newtonsoft.Json.JsonConverter.CanWrite
  commentId: P:Newtonsoft.Json.JsonConverter.CanWrite
  parent: Newtonsoft.Json.JsonConverter
  isExternal: true
  name: CanWrite
  nameWithType: JsonConverter.CanWrite
  fullName: Newtonsoft.Json.JsonConverter.CanWrite
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Newtonsoft.Json
  commentId: N:Newtonsoft.Json
  isExternal: true
  name: Newtonsoft.Json
  nameWithType: Newtonsoft.Json
  fullName: Newtonsoft.Json
- uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1.Create*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1.Create
  name: Create
  nameWithType: JsonTransformConverter<T>.Create
  fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter<T>.Create
  nameWithType.vb: JsonTransformConverter(Of T).Create
  fullName.vb: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter(Of T).Create
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Newtonsoft.Json.Linq.JObject
  commentId: T:Newtonsoft.Json.Linq.JObject
  parent: Newtonsoft.Json.Linq
  isExternal: true
  name: JObject
  nameWithType: JObject
  fullName: Newtonsoft.Json.Linq.JObject
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: Newtonsoft.Json.Linq
  commentId: N:Newtonsoft.Json.Linq
  isExternal: true
  name: Newtonsoft.Json.Linq
  nameWithType: Newtonsoft.Json.Linq
  fullName: Newtonsoft.Json.Linq
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Newtonsoft.Json.JsonConverter.CanConvert(System.Type)
  commentId: M:Newtonsoft.Json.JsonConverter.CanConvert(System.Type)
  parent: Newtonsoft.Json.JsonConverter
  isExternal: true
  name: CanConvert(Type)
  nameWithType: JsonConverter.CanConvert(Type)
  fullName: Newtonsoft.Json.JsonConverter.CanConvert(System.Type)
  spec.csharp:
  - uid: Newtonsoft.Json.JsonConverter.CanConvert(System.Type)
    name: CanConvert
    nameWithType: JsonConverter.CanConvert
    fullName: Newtonsoft.Json.JsonConverter.CanConvert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Newtonsoft.Json.JsonConverter.CanConvert(System.Type)
    name: CanConvert
    nameWithType: JsonConverter.CanConvert
    fullName: Newtonsoft.Json.JsonConverter.CanConvert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1.CanConvert*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1.CanConvert
  name: CanConvert
  nameWithType: JsonTransformConverter<T>.CanConvert
  fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter<T>.CanConvert
  nameWithType.vb: JsonTransformConverter(Of T).CanConvert
  fullName.vb: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter(Of T).CanConvert
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
  commentId: M:Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
  parent: Newtonsoft.Json.JsonConverter
  isExternal: true
  name: ReadJson(JsonReader, Type, Object, JsonSerializer)
  nameWithType: JsonConverter.ReadJson(JsonReader, Type, Object, JsonSerializer)
  fullName: Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, System.Object, Newtonsoft.Json.JsonSerializer)
  spec.csharp:
  - uid: Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
    name: ReadJson
    nameWithType: JsonConverter.ReadJson
    fullName: Newtonsoft.Json.JsonConverter.ReadJson
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Newtonsoft.Json.JsonReader
    name: JsonReader
    nameWithType: JsonReader
    fullName: Newtonsoft.Json.JsonReader
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.JsonSerializer
    name: JsonSerializer
    nameWithType: JsonSerializer
    fullName: Newtonsoft.Json.JsonSerializer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
    name: ReadJson
    nameWithType: JsonConverter.ReadJson
    fullName: Newtonsoft.Json.JsonConverter.ReadJson
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Newtonsoft.Json.JsonReader
    name: JsonReader
    nameWithType: JsonReader
    fullName: Newtonsoft.Json.JsonReader
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.JsonSerializer
    name: JsonSerializer
    nameWithType: JsonSerializer
    fullName: Newtonsoft.Json.JsonSerializer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1.ReadJson*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1.ReadJson
  name: ReadJson
  nameWithType: JsonTransformConverter<T>.ReadJson
  fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter<T>.ReadJson
  nameWithType.vb: JsonTransformConverter(Of T).ReadJson
  fullName.vb: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter(Of T).ReadJson
- uid: Newtonsoft.Json.JsonReader
  commentId: T:Newtonsoft.Json.JsonReader
  parent: Newtonsoft.Json
  isExternal: true
  name: JsonReader
  nameWithType: JsonReader
  fullName: Newtonsoft.Json.JsonReader
- uid: Newtonsoft.Json.JsonSerializer
  commentId: T:Newtonsoft.Json.JsonSerializer
  parent: Newtonsoft.Json
  isExternal: true
  name: JsonSerializer
  nameWithType: JsonSerializer
  fullName: Newtonsoft.Json.JsonSerializer
- uid: Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
  commentId: M:Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
  parent: Newtonsoft.Json.JsonConverter
  isExternal: true
  name: WriteJson(JsonWriter, Object, JsonSerializer)
  nameWithType: JsonConverter.WriteJson(JsonWriter, Object, JsonSerializer)
  fullName: Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, System.Object, Newtonsoft.Json.JsonSerializer)
  spec.csharp:
  - uid: Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
    name: WriteJson
    nameWithType: JsonConverter.WriteJson
    fullName: Newtonsoft.Json.JsonConverter.WriteJson
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Newtonsoft.Json.JsonWriter
    name: JsonWriter
    nameWithType: JsonWriter
    fullName: Newtonsoft.Json.JsonWriter
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.JsonSerializer
    name: JsonSerializer
    nameWithType: JsonSerializer
    fullName: Newtonsoft.Json.JsonSerializer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
    name: WriteJson
    nameWithType: JsonConverter.WriteJson
    fullName: Newtonsoft.Json.JsonConverter.WriteJson
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Newtonsoft.Json.JsonWriter
    name: JsonWriter
    nameWithType: JsonWriter
    fullName: Newtonsoft.Json.JsonWriter
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.JsonSerializer
    name: JsonSerializer
    nameWithType: JsonSerializer
    fullName: Newtonsoft.Json.JsonSerializer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1.WriteJson*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1.WriteJson
  name: WriteJson
  nameWithType: JsonTransformConverter<T>.WriteJson
  fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter<T>.WriteJson
  nameWithType.vb: JsonTransformConverter(Of T).WriteJson
  fullName.vb: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter(Of T).WriteJson
- uid: Newtonsoft.Json.JsonWriter
  commentId: T:Newtonsoft.Json.JsonWriter
  parent: Newtonsoft.Json
  isExternal: true
  name: JsonWriter
  nameWithType: JsonWriter
  fullName: Newtonsoft.Json.JsonWriter
- uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1.FieldExists*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1.FieldExists
  name: FieldExists
  nameWithType: JsonTransformConverter<T>.FieldExists
  fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter<T>.FieldExists
  nameWithType.vb: JsonTransformConverter(Of T).FieldExists
  fullName.vb: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter(Of T).FieldExists
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Newtonsoft.Json.Linq.JTokenType
  commentId: T:Newtonsoft.Json.Linq.JTokenType
  parent: Newtonsoft.Json.Linq
  isExternal: true
  name: JTokenType
  nameWithType: JTokenType
  fullName: Newtonsoft.Json.Linq.JTokenType
