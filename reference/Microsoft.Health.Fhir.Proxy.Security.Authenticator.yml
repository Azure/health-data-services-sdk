### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.Fhir.Proxy.Security.Authenticator
  commentId: T:Microsoft.Health.Fhir.Proxy.Security.Authenticator
  id: Authenticator
  parent: Microsoft.Health.Fhir.Proxy.Security
  children:
  - Microsoft.Health.Fhir.Proxy.Security.Authenticator.#ctor(System.String,Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig)
  - Microsoft.Health.Fhir.Proxy.Security.Authenticator.AcquireTokenForClientAsync(System.String[])
  - Microsoft.Health.Fhir.Proxy.Security.Authenticator.AcquireTokenOnBehalfOfAsync(System.String,System.String[])
  - Microsoft.Health.Fhir.Proxy.Security.Authenticator.Certificate
  - Microsoft.Health.Fhir.Proxy.Security.Authenticator.ClientId
  - Microsoft.Health.Fhir.Proxy.Security.Authenticator.ClientSecret
  - Microsoft.Health.Fhir.Proxy.Security.Authenticator.Resource
  - Microsoft.Health.Fhir.Proxy.Security.Authenticator.TenantId
  langs:
  - csharp
  - vb
  name: Authenticator
  nameWithType: Authenticator
  fullName: Microsoft.Health.Fhir.Proxy.Security.Authenticator
  type: Class
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Security/Authenticator.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: Authenticator
    path: Security/Authenticator.cs
    startLine: 10
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Security
  syntax:
    content: public class Authenticator
    content.vb: Public Class Authenticator
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Health.Fhir.Proxy.Security.Authenticator.#ctor(System.String,Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig)
  commentId: M:Microsoft.Health.Fhir.Proxy.Security.Authenticator.#ctor(System.String,Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig)
  id: '#ctor(System.String,Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig)'
  parent: Microsoft.Health.Fhir.Proxy.Security.Authenticator
  langs:
  - csharp
  - vb
  name: Authenticator(String, ServiceConfig)
  nameWithType: Authenticator.Authenticator(String, ServiceConfig)
  fullName: Microsoft.Health.Fhir.Proxy.Security.Authenticator.Authenticator(System.String, Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Security/Authenticator.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: .ctor
    path: Security/Authenticator.cs
    startLine: 12
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Security
  syntax:
    content: public Authenticator(string resource, ServiceConfig config)
    parameters:
    - id: resource
      type: System.String
    - id: config
      type: Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig
    content.vb: Public Sub New(resource As String, config As ServiceConfig)
  overload: Microsoft.Health.Fhir.Proxy.Security.Authenticator.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Fhir.Proxy.Security.Authenticator.ClientId
  commentId: P:Microsoft.Health.Fhir.Proxy.Security.Authenticator.ClientId
  id: ClientId
  parent: Microsoft.Health.Fhir.Proxy.Security.Authenticator
  langs:
  - csharp
  - vb
  name: ClientId
  nameWithType: Authenticator.ClientId
  fullName: Microsoft.Health.Fhir.Proxy.Security.Authenticator.ClientId
  type: Property
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Security/Authenticator.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: ClientId
    path: Security/Authenticator.cs
    startLine: 21
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Security
  syntax:
    content: public string ClientId { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property ClientId As String
  overload: Microsoft.Health.Fhir.Proxy.Security.Authenticator.ClientId*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.Fhir.Proxy.Security.Authenticator.ClientSecret
  commentId: P:Microsoft.Health.Fhir.Proxy.Security.Authenticator.ClientSecret
  id: ClientSecret
  parent: Microsoft.Health.Fhir.Proxy.Security.Authenticator
  langs:
  - csharp
  - vb
  name: ClientSecret
  nameWithType: Authenticator.ClientSecret
  fullName: Microsoft.Health.Fhir.Proxy.Security.Authenticator.ClientSecret
  type: Property
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Security/Authenticator.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: ClientSecret
    path: Security/Authenticator.cs
    startLine: 23
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Security
  syntax:
    content: public string ClientSecret { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property ClientSecret As String
  overload: Microsoft.Health.Fhir.Proxy.Security.Authenticator.ClientSecret*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.Fhir.Proxy.Security.Authenticator.TenantId
  commentId: P:Microsoft.Health.Fhir.Proxy.Security.Authenticator.TenantId
  id: TenantId
  parent: Microsoft.Health.Fhir.Proxy.Security.Authenticator
  langs:
  - csharp
  - vb
  name: TenantId
  nameWithType: Authenticator.TenantId
  fullName: Microsoft.Health.Fhir.Proxy.Security.Authenticator.TenantId
  type: Property
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Security/Authenticator.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: TenantId
    path: Security/Authenticator.cs
    startLine: 25
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Security
  syntax:
    content: public string TenantId { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property TenantId As String
  overload: Microsoft.Health.Fhir.Proxy.Security.Authenticator.TenantId*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.Fhir.Proxy.Security.Authenticator.Resource
  commentId: P:Microsoft.Health.Fhir.Proxy.Security.Authenticator.Resource
  id: Resource
  parent: Microsoft.Health.Fhir.Proxy.Security.Authenticator
  langs:
  - csharp
  - vb
  name: Resource
  nameWithType: Authenticator.Resource
  fullName: Microsoft.Health.Fhir.Proxy.Security.Authenticator.Resource
  type: Property
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Security/Authenticator.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: Resource
    path: Security/Authenticator.cs
    startLine: 27
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Security
  syntax:
    content: public string Resource { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Resource As String
  overload: Microsoft.Health.Fhir.Proxy.Security.Authenticator.Resource*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.Fhir.Proxy.Security.Authenticator.Certificate
  commentId: P:Microsoft.Health.Fhir.Proxy.Security.Authenticator.Certificate
  id: Certificate
  parent: Microsoft.Health.Fhir.Proxy.Security.Authenticator
  langs:
  - csharp
  - vb
  name: Certificate
  nameWithType: Authenticator.Certificate
  fullName: Microsoft.Health.Fhir.Proxy.Security.Authenticator.Certificate
  type: Property
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Security/Authenticator.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: Certificate
    path: Security/Authenticator.cs
    startLine: 29
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Security
  syntax:
    content: public X509Certificate2 Certificate { get; }
    parameters: []
    return:
      type: System.Security.Cryptography.X509Certificates.X509Certificate2
    content.vb: Public ReadOnly Property Certificate As X509Certificate2
  overload: Microsoft.Health.Fhir.Proxy.Security.Authenticator.Certificate*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.Fhir.Proxy.Security.Authenticator.AcquireTokenForClientAsync(System.String[])
  commentId: M:Microsoft.Health.Fhir.Proxy.Security.Authenticator.AcquireTokenForClientAsync(System.String[])
  id: AcquireTokenForClientAsync(System.String[])
  parent: Microsoft.Health.Fhir.Proxy.Security.Authenticator
  langs:
  - csharp
  - vb
  name: AcquireTokenForClientAsync(String[])
  nameWithType: Authenticator.AcquireTokenForClientAsync(String[])
  fullName: Microsoft.Health.Fhir.Proxy.Security.Authenticator.AcquireTokenForClientAsync(System.String[])
  type: Method
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Security/Authenticator.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: AcquireTokenForClientAsync
    path: Security/Authenticator.cs
    startLine: 31
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Security
  syntax:
    content: public async Task<string> AcquireTokenForClientAsync(string[] scopes = null)
    parameters:
    - id: scopes
      type: System.String[]
    return:
      type: System.Threading.Tasks.Task{System.String}
    content.vb: Public Function AcquireTokenForClientAsync(scopes As String() = Nothing) As Task(Of String)
  overload: Microsoft.Health.Fhir.Proxy.Security.Authenticator.AcquireTokenForClientAsync*
  nameWithType.vb: Authenticator.AcquireTokenForClientAsync(String())
  modifiers.csharp:
  - public
  - async
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.Fhir.Proxy.Security.Authenticator.AcquireTokenForClientAsync(System.String())
  name.vb: AcquireTokenForClientAsync(String())
- uid: Microsoft.Health.Fhir.Proxy.Security.Authenticator.AcquireTokenOnBehalfOfAsync(System.String,System.String[])
  commentId: M:Microsoft.Health.Fhir.Proxy.Security.Authenticator.AcquireTokenOnBehalfOfAsync(System.String,System.String[])
  id: AcquireTokenOnBehalfOfAsync(System.String,System.String[])
  parent: Microsoft.Health.Fhir.Proxy.Security.Authenticator
  langs:
  - csharp
  - vb
  name: AcquireTokenOnBehalfOfAsync(String, String[])
  nameWithType: Authenticator.AcquireTokenOnBehalfOfAsync(String, String[])
  fullName: Microsoft.Health.Fhir.Proxy.Security.Authenticator.AcquireTokenOnBehalfOfAsync(System.String, System.String[])
  type: Method
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Security/Authenticator.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: AcquireTokenOnBehalfOfAsync
    path: Security/Authenticator.cs
    startLine: 52
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Security
  syntax:
    content: public async Task<string> AcquireTokenOnBehalfOfAsync(string bearerToken, string[] scopes = null)
    parameters:
    - id: bearerToken
      type: System.String
    - id: scopes
      type: System.String[]
    return:
      type: System.Threading.Tasks.Task{System.String}
    content.vb: Public Function AcquireTokenOnBehalfOfAsync(bearerToken As String, scopes As String() = Nothing) As Task(Of String)
  overload: Microsoft.Health.Fhir.Proxy.Security.Authenticator.AcquireTokenOnBehalfOfAsync*
  nameWithType.vb: Authenticator.AcquireTokenOnBehalfOfAsync(String, String())
  modifiers.csharp:
  - public
  - async
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.Fhir.Proxy.Security.Authenticator.AcquireTokenOnBehalfOfAsync(System.String, System.String())
  name.vb: AcquireTokenOnBehalfOfAsync(String, String())
references:
- uid: Microsoft.Health.Fhir.Proxy.Security
  commentId: N:Microsoft.Health.Fhir.Proxy.Security
  name: Microsoft.Health.Fhir.Proxy.Security
  nameWithType: Microsoft.Health.Fhir.Proxy.Security
  fullName: Microsoft.Health.Fhir.Proxy.Security
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.Fhir.Proxy.Security.Authenticator.#ctor*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Security.Authenticator.#ctor
  name: Authenticator
  nameWithType: Authenticator.Authenticator
  fullName: Microsoft.Health.Fhir.Proxy.Security.Authenticator.Authenticator
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig
  commentId: T:Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig
  parent: Microsoft.Health.Fhir.Proxy.Configuration
  name: ServiceConfig
  nameWithType: ServiceConfig
  fullName: Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig
- uid: Microsoft.Health.Fhir.Proxy.Configuration
  commentId: N:Microsoft.Health.Fhir.Proxy.Configuration
  name: Microsoft.Health.Fhir.Proxy.Configuration
  nameWithType: Microsoft.Health.Fhir.Proxy.Configuration
  fullName: Microsoft.Health.Fhir.Proxy.Configuration
- uid: Microsoft.Health.Fhir.Proxy.Security.Authenticator.ClientId*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Security.Authenticator.ClientId
  name: ClientId
  nameWithType: Authenticator.ClientId
  fullName: Microsoft.Health.Fhir.Proxy.Security.Authenticator.ClientId
- uid: Microsoft.Health.Fhir.Proxy.Security.Authenticator.ClientSecret*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Security.Authenticator.ClientSecret
  name: ClientSecret
  nameWithType: Authenticator.ClientSecret
  fullName: Microsoft.Health.Fhir.Proxy.Security.Authenticator.ClientSecret
- uid: Microsoft.Health.Fhir.Proxy.Security.Authenticator.TenantId*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Security.Authenticator.TenantId
  name: TenantId
  nameWithType: Authenticator.TenantId
  fullName: Microsoft.Health.Fhir.Proxy.Security.Authenticator.TenantId
- uid: Microsoft.Health.Fhir.Proxy.Security.Authenticator.Resource*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Security.Authenticator.Resource
  name: Resource
  nameWithType: Authenticator.Resource
  fullName: Microsoft.Health.Fhir.Proxy.Security.Authenticator.Resource
- uid: Microsoft.Health.Fhir.Proxy.Security.Authenticator.Certificate*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Security.Authenticator.Certificate
  name: Certificate
  nameWithType: Authenticator.Certificate
  fullName: Microsoft.Health.Fhir.Proxy.Security.Authenticator.Certificate
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2
  commentId: T:System.Security.Cryptography.X509Certificates.X509Certificate2
  parent: System.Security.Cryptography.X509Certificates
  isExternal: true
  name: X509Certificate2
  nameWithType: X509Certificate2
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2
- uid: System.Security.Cryptography.X509Certificates
  commentId: N:System.Security.Cryptography.X509Certificates
  isExternal: true
  name: System.Security.Cryptography.X509Certificates
  nameWithType: System.Security.Cryptography.X509Certificates
  fullName: System.Security.Cryptography.X509Certificates
- uid: Microsoft.Health.Fhir.Proxy.Security.Authenticator.AcquireTokenForClientAsync*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Security.Authenticator.AcquireTokenForClientAsync
  name: AcquireTokenForClientAsync
  nameWithType: Authenticator.AcquireTokenForClientAsync
  fullName: Microsoft.Health.Fhir.Proxy.Security.Authenticator.AcquireTokenForClientAsync
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  nameWithType.vb: Task(Of String)
  fullName.vb: System.Threading.Tasks.Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Microsoft.Health.Fhir.Proxy.Security.Authenticator.AcquireTokenOnBehalfOfAsync*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Security.Authenticator.AcquireTokenOnBehalfOfAsync
  name: AcquireTokenOnBehalfOfAsync
  nameWithType: Authenticator.AcquireTokenOnBehalfOfAsync
  fullName: Microsoft.Health.Fhir.Proxy.Security.Authenticator.AcquireTokenOnBehalfOfAsync
