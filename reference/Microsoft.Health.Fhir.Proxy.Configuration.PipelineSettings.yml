### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings
  commentId: T:Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings
  id: PipelineSettings
  parent: Microsoft.Health.Fhir.Proxy.Configuration
  children:
  - Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings.#ctor
  - Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})
  - Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings.ChannelNames
  - Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings.Default
  - Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings.FilterNames
  - Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings.Name
  langs:
  - csharp
  - vb
  name: PipelineSettings
  nameWithType: PipelineSettings
  fullName: Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings
  type: Class
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Configuration/PipelineSettings.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: PipelineSettings
    path: Configuration/PipelineSettings.cs
    startLine: 8
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Configuration
  summary: "\nSettings for pipelines.\n"
  example: []
  syntax:
    content: public class PipelineSettings
    content.vb: Public Class PipelineSettings
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings.Default
  commentId: P:Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings.Default
  id: Default
  parent: Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings
  langs:
  - csharp
  - vb
  name: Default
  nameWithType: PipelineSettings.Default
  fullName: Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings.Default
  type: Property
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Configuration/PipelineSettings.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: Default
    path: Configuration/PipelineSettings.cs
    startLine: 13
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Configuration
  summary: "\nDefault PipelineSettings instance.\n"
  example: []
  syntax:
    content: public static PipelineSettings Default { get; }
    parameters: []
    return:
      type: Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings
    content.vb: Public Shared ReadOnly Property Default As PipelineSettings
  overload: Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings.Default*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings.#ctor
  commentId: M:Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings.#ctor
  id: '#ctor'
  parent: Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings
  langs:
  - csharp
  - vb
  name: PipelineSettings()
  nameWithType: PipelineSettings.PipelineSettings()
  fullName: Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings.PipelineSettings()
  type: Constructor
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Configuration/PipelineSettings.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: .ctor
    path: Configuration/PipelineSettings.cs
    startLine: 18
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Configuration
  summary: "\nCreates a new instance of PipelineSettings.\n"
  example: []
  syntax:
    content: public PipelineSettings()
    content.vb: Public Sub New
  overload: Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})
  commentId: M:Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})
  id: '#ctor(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})'
  parent: Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings
  langs:
  - csharp
  - vb
  name: PipelineSettings(String, IEnumerable<String>, IEnumerable<String>)
  nameWithType: PipelineSettings.PipelineSettings(String, IEnumerable<String>, IEnumerable<String>)
  fullName: Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings.PipelineSettings(System.String, System.Collections.Generic.IEnumerable<System.String>, System.Collections.Generic.IEnumerable<System.String>)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Configuration/PipelineSettings.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: .ctor
    path: Configuration/PipelineSettings.cs
    startLine: 30
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Configuration
  summary: "\nCreates a new instance of PipelineSettings.\n"
  example: []
  syntax:
    content: public PipelineSettings(string pipelineName, IEnumerable<string> filterNames, IEnumerable<string> channelNames)
    parameters:
    - id: pipelineName
      type: System.String
      description: Name of pipeline to execute.
    - id: filterNames
      type: System.Collections.Generic.IEnumerable{System.String}
      description: Names of filters implemented by pipeline.
    - id: channelNames
      type: System.Collections.Generic.IEnumerable{System.String}
      description: Names of channels implemented by pipeline.
    content.vb: Public Sub New(pipelineName As String, filterNames As IEnumerable(Of String), channelNames As IEnumerable(Of String))
  overload: Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings.#ctor*
  nameWithType.vb: PipelineSettings.PipelineSettings(String, IEnumerable(Of String), IEnumerable(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings.PipelineSettings(System.String, System.Collections.Generic.IEnumerable(Of System.String), System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: PipelineSettings(String, IEnumerable(Of String), IEnumerable(Of String))
- uid: Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings.Name
  commentId: P:Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings.Name
  id: Name
  parent: Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: PipelineSettings.Name
  fullName: Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings.Name
  type: Property
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Configuration/PipelineSettings.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: Name
    path: Configuration/PipelineSettings.cs
    startLine: 41
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Configuration
  summary: "\nGets or stes the name of the pipeline implemented.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty("name")]

      public virtual string Name { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty("name")>

      Public Overridable Property Name As String
  overload: Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings.Name*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: name
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings.FilterNames
  commentId: P:Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings.FilterNames
  id: FilterNames
  parent: Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings
  langs:
  - csharp
  - vb
  name: FilterNames
  nameWithType: PipelineSettings.FilterNames
  fullName: Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings.FilterNames
  type: Property
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Configuration/PipelineSettings.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: FilterNames
    path: Configuration/PipelineSettings.cs
    startLine: 47
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Configuration
  summary: "\nGets or sets a list of filters implemented by the pipeline.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty("filters")]

      public virtual List<string> FilterNames { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{System.String}
    content.vb: >-
      <JsonProperty("filters")>

      Public Overridable Property FilterNames As List(Of String)
  overload: Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings.FilterNames*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: filters
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings.ChannelNames
  commentId: P:Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings.ChannelNames
  id: ChannelNames
  parent: Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings
  langs:
  - csharp
  - vb
  name: ChannelNames
  nameWithType: PipelineSettings.ChannelNames
  fullName: Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings.ChannelNames
  type: Property
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Configuration/PipelineSettings.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: ChannelNames
    path: Configuration/PipelineSettings.cs
    startLine: 53
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Configuration
  summary: "\nGets or sets a list of channels implemented by the pipeline.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty("channels")]

      public virtual List<string> ChannelNames { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{System.String}
    content.vb: >-
      <JsonProperty("channels")>

      Public Overridable Property ChannelNames As List(Of String)
  overload: Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings.ChannelNames*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: channels
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: Microsoft.Health.Fhir.Proxy.Configuration
  commentId: N:Microsoft.Health.Fhir.Proxy.Configuration
  name: Microsoft.Health.Fhir.Proxy.Configuration
  nameWithType: Microsoft.Health.Fhir.Proxy.Configuration
  fullName: Microsoft.Health.Fhir.Proxy.Configuration
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings.Default*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings.Default
  name: Default
  nameWithType: PipelineSettings.Default
  fullName: Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings.Default
- uid: Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings
  commentId: T:Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings
  parent: Microsoft.Health.Fhir.Proxy.Configuration
  name: PipelineSettings
  nameWithType: PipelineSettings
  fullName: Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings
- uid: Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings.#ctor*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings.#ctor
  name: PipelineSettings
  nameWithType: PipelineSettings.PipelineSettings
  fullName: Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings.PipelineSettings
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings.Name*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings.Name
  name: Name
  nameWithType: PipelineSettings.Name
  fullName: Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings.Name
- uid: Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings.FilterNames*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings.FilterNames
  name: FilterNames
  nameWithType: PipelineSettings.FilterNames
  fullName: Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings.FilterNames
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<String>
  nameWithType: List<String>
  fullName: System.Collections.Generic.List<System.String>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings.ChannelNames*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings.ChannelNames
  name: ChannelNames
  nameWithType: PipelineSettings.ChannelNames
  fullName: Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings.ChannelNames
