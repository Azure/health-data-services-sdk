### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.Fhir.Proxy.Channels.IChannel
  commentId: T:Microsoft.Health.Fhir.Proxy.Channels.IChannel
  id: IChannel
  parent: Microsoft.Health.Fhir.Proxy.Channels
  children:
  - Microsoft.Health.Fhir.Proxy.Channels.IChannel.AddMessageAsync(System.Byte[])
  - Microsoft.Health.Fhir.Proxy.Channels.IChannel.CloseAsync
  - Microsoft.Health.Fhir.Proxy.Channels.IChannel.Id
  - Microsoft.Health.Fhir.Proxy.Channels.IChannel.IsAuthenticated
  - Microsoft.Health.Fhir.Proxy.Channels.IChannel.IsEncrypted
  - Microsoft.Health.Fhir.Proxy.Channels.IChannel.Name
  - Microsoft.Health.Fhir.Proxy.Channels.IChannel.OnClose
  - Microsoft.Health.Fhir.Proxy.Channels.IChannel.OnError
  - Microsoft.Health.Fhir.Proxy.Channels.IChannel.OnOpen
  - Microsoft.Health.Fhir.Proxy.Channels.IChannel.OnReceive
  - Microsoft.Health.Fhir.Proxy.Channels.IChannel.OnStateChange
  - Microsoft.Health.Fhir.Proxy.Channels.IChannel.OpenAsync
  - Microsoft.Health.Fhir.Proxy.Channels.IChannel.Port
  - Microsoft.Health.Fhir.Proxy.Channels.IChannel.ReceiveAsync
  - Microsoft.Health.Fhir.Proxy.Channels.IChannel.SendAsync(System.Byte[],System.Object[])
  - Microsoft.Health.Fhir.Proxy.Channels.IChannel.State
  langs:
  - csharp
  - vb
  name: IChannel
  nameWithType: IChannel
  fullName: Microsoft.Health.Fhir.Proxy.Channels.IChannel
  type: Interface
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Channels/IChannel.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: IChannel
    path: Channels/IChannel.cs
    startLine: 8
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Channels
  summary: "\nInterface for channels.\n"
  example: []
  syntax:
    content: 'public interface IChannel : IDisposable'
    content.vb: >-
      Public Interface IChannel

          Inherits IDisposable
  inheritedMembers:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Microsoft.Health.Fhir.Proxy.Channels.IChannel.OnClose
  commentId: E:Microsoft.Health.Fhir.Proxy.Channels.IChannel.OnClose
  id: OnClose
  parent: Microsoft.Health.Fhir.Proxy.Channels.IChannel
  langs:
  - csharp
  - vb
  name: OnClose
  nameWithType: IChannel.OnClose
  fullName: Microsoft.Health.Fhir.Proxy.Channels.IChannel.OnClose
  type: Event
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Channels/IChannel.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: OnClose
    path: Channels/IChannel.cs
    startLine: 13
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Channels
  summary: "\nEvent signals the close on the channel.\n"
  example: []
  syntax:
    content: event EventHandler<ChannelCloseEventArgs> OnClose
    return:
      type: System.EventHandler{Microsoft.Health.Fhir.Proxy.Channels.ChannelCloseEventArgs}
    content.vb: Event OnClose As EventHandler(Of ChannelCloseEventArgs)
- uid: Microsoft.Health.Fhir.Proxy.Channels.IChannel.OnError
  commentId: E:Microsoft.Health.Fhir.Proxy.Channels.IChannel.OnError
  id: OnError
  parent: Microsoft.Health.Fhir.Proxy.Channels.IChannel
  langs:
  - csharp
  - vb
  name: OnError
  nameWithType: IChannel.OnError
  fullName: Microsoft.Health.Fhir.Proxy.Channels.IChannel.OnError
  type: Event
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Channels/IChannel.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: OnError
    path: Channels/IChannel.cs
    startLine: 18
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Channels
  summary: "\nEvent signals an error in the channel.\n"
  example: []
  syntax:
    content: event EventHandler<ChannelErrorEventArgs> OnError
    return:
      type: System.EventHandler{Microsoft.Health.Fhir.Proxy.Channels.ChannelErrorEventArgs}
    content.vb: Event OnError As EventHandler(Of ChannelErrorEventArgs)
- uid: Microsoft.Health.Fhir.Proxy.Channels.IChannel.OnOpen
  commentId: E:Microsoft.Health.Fhir.Proxy.Channels.IChannel.OnOpen
  id: OnOpen
  parent: Microsoft.Health.Fhir.Proxy.Channels.IChannel
  langs:
  - csharp
  - vb
  name: OnOpen
  nameWithType: IChannel.OnOpen
  fullName: Microsoft.Health.Fhir.Proxy.Channels.IChannel.OnOpen
  type: Event
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Channels/IChannel.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: OnOpen
    path: Channels/IChannel.cs
    startLine: 23
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Channels
  summary: "\nEvent signals the channel is open and connected.\n"
  example: []
  syntax:
    content: event EventHandler<ChannelOpenEventArgs> OnOpen
    return:
      type: System.EventHandler{Microsoft.Health.Fhir.Proxy.Channels.ChannelOpenEventArgs}
    content.vb: Event OnOpen As EventHandler(Of ChannelOpenEventArgs)
- uid: Microsoft.Health.Fhir.Proxy.Channels.IChannel.OnReceive
  commentId: E:Microsoft.Health.Fhir.Proxy.Channels.IChannel.OnReceive
  id: OnReceive
  parent: Microsoft.Health.Fhir.Proxy.Channels.IChannel
  langs:
  - csharp
  - vb
  name: OnReceive
  nameWithType: IChannel.OnReceive
  fullName: Microsoft.Health.Fhir.Proxy.Channels.IChannel.OnReceive
  type: Event
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Channels/IChannel.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: OnReceive
    path: Channels/IChannel.cs
    startLine: 28
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Channels
  summary: "\nEvent signals a message received by the channel.\n"
  example: []
  syntax:
    content: event EventHandler<ChannelReceivedEventArgs> OnReceive
    return:
      type: System.EventHandler{Microsoft.Health.Fhir.Proxy.Channels.ChannelReceivedEventArgs}
    content.vb: Event OnReceive As EventHandler(Of ChannelReceivedEventArgs)
- uid: Microsoft.Health.Fhir.Proxy.Channels.IChannel.OnStateChange
  commentId: E:Microsoft.Health.Fhir.Proxy.Channels.IChannel.OnStateChange
  id: OnStateChange
  parent: Microsoft.Health.Fhir.Proxy.Channels.IChannel
  langs:
  - csharp
  - vb
  name: OnStateChange
  nameWithType: IChannel.OnStateChange
  fullName: Microsoft.Health.Fhir.Proxy.Channels.IChannel.OnStateChange
  type: Event
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Channels/IChannel.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: OnStateChange
    path: Channels/IChannel.cs
    startLine: 33
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Channels
  summary: "\nEvent signals a change in the state of the channel.\n"
  example: []
  syntax:
    content: event EventHandler<ChannelStateEventArgs> OnStateChange
    return:
      type: System.EventHandler{Microsoft.Health.Fhir.Proxy.Channels.ChannelStateEventArgs}
    content.vb: Event OnStateChange As EventHandler(Of ChannelStateEventArgs)
- uid: Microsoft.Health.Fhir.Proxy.Channels.IChannel.Id
  commentId: P:Microsoft.Health.Fhir.Proxy.Channels.IChannel.Id
  id: Id
  parent: Microsoft.Health.Fhir.Proxy.Channels.IChannel
  langs:
  - csharp
  - vb
  name: Id
  nameWithType: IChannel.Id
  fullName: Microsoft.Health.Fhir.Proxy.Channels.IChannel.Id
  type: Property
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Channels/IChannel.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: Id
    path: Channels/IChannel.cs
    startLine: 38
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Channels
  summary: "\nGets a unique id for the channel instance.\n"
  example: []
  syntax:
    content: string Id { get; }
    parameters: []
    return:
      type: System.String
    content.vb: ReadOnly Property Id As String
  overload: Microsoft.Health.Fhir.Proxy.Channels.IChannel.Id*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Microsoft.Health.Fhir.Proxy.Channels.IChannel.Name
  commentId: P:Microsoft.Health.Fhir.Proxy.Channels.IChannel.Name
  id: Name
  parent: Microsoft.Health.Fhir.Proxy.Channels.IChannel
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: IChannel.Name
  fullName: Microsoft.Health.Fhir.Proxy.Channels.IChannel.Name
  type: Property
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Channels/IChannel.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: Name
    path: Channels/IChannel.cs
    startLine: 43
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Channels
  summary: "\nGets a name for the type of channel.\n"
  example: []
  syntax:
    content: string Name { get; }
    parameters: []
    return:
      type: System.String
    content.vb: ReadOnly Property Name As String
  overload: Microsoft.Health.Fhir.Proxy.Channels.IChannel.Name*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Microsoft.Health.Fhir.Proxy.Channels.IChannel.IsAuthenticated
  commentId: P:Microsoft.Health.Fhir.Proxy.Channels.IChannel.IsAuthenticated
  id: IsAuthenticated
  parent: Microsoft.Health.Fhir.Proxy.Channels.IChannel
  langs:
  - csharp
  - vb
  name: IsAuthenticated
  nameWithType: IChannel.IsAuthenticated
  fullName: Microsoft.Health.Fhir.Proxy.Channels.IChannel.IsAuthenticated
  type: Property
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Channels/IChannel.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: IsAuthenticated
    path: Channels/IChannel.cs
    startLine: 48
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Channels
  summary: "\nGets an indicator of whether the identity that received the channel connection is authenticated.\n"
  example: []
  syntax:
    content: bool IsAuthenticated { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property IsAuthenticated As Boolean
  overload: Microsoft.Health.Fhir.Proxy.Channels.IChannel.IsAuthenticated*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Microsoft.Health.Fhir.Proxy.Channels.IChannel.IsEncrypted
  commentId: P:Microsoft.Health.Fhir.Proxy.Channels.IChannel.IsEncrypted
  id: IsEncrypted
  parent: Microsoft.Health.Fhir.Proxy.Channels.IChannel
  langs:
  - csharp
  - vb
  name: IsEncrypted
  nameWithType: IChannel.IsEncrypted
  fullName: Microsoft.Health.Fhir.Proxy.Channels.IChannel.IsEncrypted
  type: Property
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Channels/IChannel.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: IsEncrypted
    path: Channels/IChannel.cs
    startLine: 53
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Channels
  summary: "\nGets an indicateor of whether the channel is encrypted.\n"
  example: []
  syntax:
    content: bool IsEncrypted { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property IsEncrypted As Boolean
  overload: Microsoft.Health.Fhir.Proxy.Channels.IChannel.IsEncrypted*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Microsoft.Health.Fhir.Proxy.Channels.IChannel.Port
  commentId: P:Microsoft.Health.Fhir.Proxy.Channels.IChannel.Port
  id: Port
  parent: Microsoft.Health.Fhir.Proxy.Channels.IChannel
  langs:
  - csharp
  - vb
  name: Port
  nameWithType: IChannel.Port
  fullName: Microsoft.Health.Fhir.Proxy.Channels.IChannel.Port
  type: Property
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Channels/IChannel.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: Port
    path: Channels/IChannel.cs
    startLine: 58
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Channels
  summary: "\nGets the port opened by the channel.\n"
  example: []
  syntax:
    content: int Port { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: ReadOnly Property Port As Integer
  overload: Microsoft.Health.Fhir.Proxy.Channels.IChannel.Port*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Microsoft.Health.Fhir.Proxy.Channels.IChannel.State
  commentId: P:Microsoft.Health.Fhir.Proxy.Channels.IChannel.State
  id: State
  parent: Microsoft.Health.Fhir.Proxy.Channels.IChannel
  langs:
  - csharp
  - vb
  name: State
  nameWithType: IChannel.State
  fullName: Microsoft.Health.Fhir.Proxy.Channels.IChannel.State
  type: Property
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Channels/IChannel.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: State
    path: Channels/IChannel.cs
    startLine: 63
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Channels
  summary: "\nGets the state of the channel.\n"
  example: []
  syntax:
    content: ChannelState State { get; }
    parameters: []
    return:
      type: Microsoft.Health.Fhir.Proxy.Channels.ChannelState
    content.vb: ReadOnly Property State As ChannelState
  overload: Microsoft.Health.Fhir.Proxy.Channels.IChannel.State*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Microsoft.Health.Fhir.Proxy.Channels.IChannel.OpenAsync
  commentId: M:Microsoft.Health.Fhir.Proxy.Channels.IChannel.OpenAsync
  id: OpenAsync
  parent: Microsoft.Health.Fhir.Proxy.Channels.IChannel
  langs:
  - csharp
  - vb
  name: OpenAsync()
  nameWithType: IChannel.OpenAsync()
  fullName: Microsoft.Health.Fhir.Proxy.Channels.IChannel.OpenAsync()
  type: Method
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Channels/IChannel.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: OpenAsync
    path: Channels/IChannel.cs
    startLine: 69
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Channels
  summary: "\nOpens the channel.\n"
  example: []
  syntax:
    content: Task OpenAsync()
    return:
      type: System.Threading.Tasks.Task
      description: Task
    content.vb: Function OpenAsync As Task
  overload: Microsoft.Health.Fhir.Proxy.Channels.IChannel.OpenAsync*
- uid: Microsoft.Health.Fhir.Proxy.Channels.IChannel.SendAsync(System.Byte[],System.Object[])
  commentId: M:Microsoft.Health.Fhir.Proxy.Channels.IChannel.SendAsync(System.Byte[],System.Object[])
  id: SendAsync(System.Byte[],System.Object[])
  parent: Microsoft.Health.Fhir.Proxy.Channels.IChannel
  langs:
  - csharp
  - vb
  name: SendAsync(Byte[], Object[])
  nameWithType: IChannel.SendAsync(Byte[], Object[])
  fullName: Microsoft.Health.Fhir.Proxy.Channels.IChannel.SendAsync(System.Byte[], System.Object[])
  type: Method
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Channels/IChannel.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: SendAsync
    path: Channels/IChannel.cs
    startLine: 77
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Channels
  summary: "\nSends a message on the channel.\n"
  example: []
  syntax:
    content: Task SendAsync(byte[] message, params object[] items)
    parameters:
    - id: message
      type: System.Byte[]
      description: Message to send.
    - id: items
      type: System.Object[]
      description: Optional parameters to use when sending.
    return:
      type: System.Threading.Tasks.Task
      description: Task
    content.vb: Function SendAsync(message As Byte(), ParamArray items As Object()) As Task
  overload: Microsoft.Health.Fhir.Proxy.Channels.IChannel.SendAsync*
  nameWithType.vb: IChannel.SendAsync(Byte(), Object())
  fullName.vb: Microsoft.Health.Fhir.Proxy.Channels.IChannel.SendAsync(System.Byte(), System.Object())
  name.vb: SendAsync(Byte(), Object())
- uid: Microsoft.Health.Fhir.Proxy.Channels.IChannel.ReceiveAsync
  commentId: M:Microsoft.Health.Fhir.Proxy.Channels.IChannel.ReceiveAsync
  id: ReceiveAsync
  parent: Microsoft.Health.Fhir.Proxy.Channels.IChannel
  langs:
  - csharp
  - vb
  name: ReceiveAsync()
  nameWithType: IChannel.ReceiveAsync()
  fullName: Microsoft.Health.Fhir.Proxy.Channels.IChannel.ReceiveAsync()
  type: Method
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Channels/IChannel.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: ReceiveAsync
    path: Channels/IChannel.cs
    startLine: 83
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Channels
  summary: "\nStarts the receive process for the channel.\n"
  example: []
  syntax:
    content: Task ReceiveAsync()
    return:
      type: System.Threading.Tasks.Task
      description: Task
    content.vb: Function ReceiveAsync As Task
  overload: Microsoft.Health.Fhir.Proxy.Channels.IChannel.ReceiveAsync*
- uid: Microsoft.Health.Fhir.Proxy.Channels.IChannel.AddMessageAsync(System.Byte[])
  commentId: M:Microsoft.Health.Fhir.Proxy.Channels.IChannel.AddMessageAsync(System.Byte[])
  id: AddMessageAsync(System.Byte[])
  parent: Microsoft.Health.Fhir.Proxy.Channels.IChannel
  langs:
  - csharp
  - vb
  name: AddMessageAsync(Byte[])
  nameWithType: IChannel.AddMessageAsync(Byte[])
  fullName: Microsoft.Health.Fhir.Proxy.Channels.IChannel.AddMessageAsync(System.Byte[])
  type: Method
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Channels/IChannel.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: AddMessageAsync
    path: Channels/IChannel.cs
    startLine: 90
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Channels
  summary: "\nInjects a message into the channel.  Useful with connectionless layer-2 protocols.\n"
  example: []
  syntax:
    content: Task AddMessageAsync(byte[] message)
    parameters:
    - id: message
      type: System.Byte[]
      description: Messages to add when needing auxiliary access to channel.
    return:
      type: System.Threading.Tasks.Task
      description: Task
    content.vb: Function AddMessageAsync(message As Byte()) As Task
  overload: Microsoft.Health.Fhir.Proxy.Channels.IChannel.AddMessageAsync*
  nameWithType.vb: IChannel.AddMessageAsync(Byte())
  fullName.vb: Microsoft.Health.Fhir.Proxy.Channels.IChannel.AddMessageAsync(System.Byte())
  name.vb: AddMessageAsync(Byte())
- uid: Microsoft.Health.Fhir.Proxy.Channels.IChannel.CloseAsync
  commentId: M:Microsoft.Health.Fhir.Proxy.Channels.IChannel.CloseAsync
  id: CloseAsync
  parent: Microsoft.Health.Fhir.Proxy.Channels.IChannel
  langs:
  - csharp
  - vb
  name: CloseAsync()
  nameWithType: IChannel.CloseAsync()
  fullName: Microsoft.Health.Fhir.Proxy.Channels.IChannel.CloseAsync()
  type: Method
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Channels/IChannel.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: CloseAsync
    path: Channels/IChannel.cs
    startLine: 96
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Channels
  summary: "\nCloses the channel.\n"
  example: []
  syntax:
    content: Task CloseAsync()
    return:
      type: System.Threading.Tasks.Task
      description: Task
    content.vb: Function CloseAsync As Task
  overload: Microsoft.Health.Fhir.Proxy.Channels.IChannel.CloseAsync*
references:
- uid: Microsoft.Health.Fhir.Proxy.Channels
  commentId: N:Microsoft.Health.Fhir.Proxy.Channels
  name: Microsoft.Health.Fhir.Proxy.Channels
  nameWithType: Microsoft.Health.Fhir.Proxy.Channels
  fullName: Microsoft.Health.Fhir.Proxy.Channels
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.EventHandler{Microsoft.Health.Fhir.Proxy.Channels.ChannelCloseEventArgs}
  commentId: T:System.EventHandler{Microsoft.Health.Fhir.Proxy.Channels.ChannelCloseEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<ChannelCloseEventArgs>
  nameWithType: EventHandler<ChannelCloseEventArgs>
  fullName: System.EventHandler<Microsoft.Health.Fhir.Proxy.Channels.ChannelCloseEventArgs>
  nameWithType.vb: EventHandler(Of ChannelCloseEventArgs)
  fullName.vb: System.EventHandler(Of Microsoft.Health.Fhir.Proxy.Channels.ChannelCloseEventArgs)
  name.vb: EventHandler(Of ChannelCloseEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.Fhir.Proxy.Channels.ChannelCloseEventArgs
    name: ChannelCloseEventArgs
    nameWithType: ChannelCloseEventArgs
    fullName: Microsoft.Health.Fhir.Proxy.Channels.ChannelCloseEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.Fhir.Proxy.Channels.ChannelCloseEventArgs
    name: ChannelCloseEventArgs
    nameWithType: ChannelCloseEventArgs
    fullName: Microsoft.Health.Fhir.Proxy.Channels.ChannelCloseEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: true
  name: EventHandler<TEventArgs>
  nameWithType: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  fullName.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler{Microsoft.Health.Fhir.Proxy.Channels.ChannelErrorEventArgs}
  commentId: T:System.EventHandler{Microsoft.Health.Fhir.Proxy.Channels.ChannelErrorEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<ChannelErrorEventArgs>
  nameWithType: EventHandler<ChannelErrorEventArgs>
  fullName: System.EventHandler<Microsoft.Health.Fhir.Proxy.Channels.ChannelErrorEventArgs>
  nameWithType.vb: EventHandler(Of ChannelErrorEventArgs)
  fullName.vb: System.EventHandler(Of Microsoft.Health.Fhir.Proxy.Channels.ChannelErrorEventArgs)
  name.vb: EventHandler(Of ChannelErrorEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.Fhir.Proxy.Channels.ChannelErrorEventArgs
    name: ChannelErrorEventArgs
    nameWithType: ChannelErrorEventArgs
    fullName: Microsoft.Health.Fhir.Proxy.Channels.ChannelErrorEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.Fhir.Proxy.Channels.ChannelErrorEventArgs
    name: ChannelErrorEventArgs
    nameWithType: ChannelErrorEventArgs
    fullName: Microsoft.Health.Fhir.Proxy.Channels.ChannelErrorEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler{Microsoft.Health.Fhir.Proxy.Channels.ChannelOpenEventArgs}
  commentId: T:System.EventHandler{Microsoft.Health.Fhir.Proxy.Channels.ChannelOpenEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<ChannelOpenEventArgs>
  nameWithType: EventHandler<ChannelOpenEventArgs>
  fullName: System.EventHandler<Microsoft.Health.Fhir.Proxy.Channels.ChannelOpenEventArgs>
  nameWithType.vb: EventHandler(Of ChannelOpenEventArgs)
  fullName.vb: System.EventHandler(Of Microsoft.Health.Fhir.Proxy.Channels.ChannelOpenEventArgs)
  name.vb: EventHandler(Of ChannelOpenEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.Fhir.Proxy.Channels.ChannelOpenEventArgs
    name: ChannelOpenEventArgs
    nameWithType: ChannelOpenEventArgs
    fullName: Microsoft.Health.Fhir.Proxy.Channels.ChannelOpenEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.Fhir.Proxy.Channels.ChannelOpenEventArgs
    name: ChannelOpenEventArgs
    nameWithType: ChannelOpenEventArgs
    fullName: Microsoft.Health.Fhir.Proxy.Channels.ChannelOpenEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler{Microsoft.Health.Fhir.Proxy.Channels.ChannelReceivedEventArgs}
  commentId: T:System.EventHandler{Microsoft.Health.Fhir.Proxy.Channels.ChannelReceivedEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<ChannelReceivedEventArgs>
  nameWithType: EventHandler<ChannelReceivedEventArgs>
  fullName: System.EventHandler<Microsoft.Health.Fhir.Proxy.Channels.ChannelReceivedEventArgs>
  nameWithType.vb: EventHandler(Of ChannelReceivedEventArgs)
  fullName.vb: System.EventHandler(Of Microsoft.Health.Fhir.Proxy.Channels.ChannelReceivedEventArgs)
  name.vb: EventHandler(Of ChannelReceivedEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.Fhir.Proxy.Channels.ChannelReceivedEventArgs
    name: ChannelReceivedEventArgs
    nameWithType: ChannelReceivedEventArgs
    fullName: Microsoft.Health.Fhir.Proxy.Channels.ChannelReceivedEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.Fhir.Proxy.Channels.ChannelReceivedEventArgs
    name: ChannelReceivedEventArgs
    nameWithType: ChannelReceivedEventArgs
    fullName: Microsoft.Health.Fhir.Proxy.Channels.ChannelReceivedEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler{Microsoft.Health.Fhir.Proxy.Channels.ChannelStateEventArgs}
  commentId: T:System.EventHandler{Microsoft.Health.Fhir.Proxy.Channels.ChannelStateEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<ChannelStateEventArgs>
  nameWithType: EventHandler<ChannelStateEventArgs>
  fullName: System.EventHandler<Microsoft.Health.Fhir.Proxy.Channels.ChannelStateEventArgs>
  nameWithType.vb: EventHandler(Of ChannelStateEventArgs)
  fullName.vb: System.EventHandler(Of Microsoft.Health.Fhir.Proxy.Channels.ChannelStateEventArgs)
  name.vb: EventHandler(Of ChannelStateEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.Fhir.Proxy.Channels.ChannelStateEventArgs
    name: ChannelStateEventArgs
    nameWithType: ChannelStateEventArgs
    fullName: Microsoft.Health.Fhir.Proxy.Channels.ChannelStateEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.Fhir.Proxy.Channels.ChannelStateEventArgs
    name: ChannelStateEventArgs
    nameWithType: ChannelStateEventArgs
    fullName: Microsoft.Health.Fhir.Proxy.Channels.ChannelStateEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Fhir.Proxy.Channels.IChannel.Id*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Channels.IChannel.Id
  name: Id
  nameWithType: IChannel.Id
  fullName: Microsoft.Health.Fhir.Proxy.Channels.IChannel.Id
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Health.Fhir.Proxy.Channels.IChannel.Name*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Channels.IChannel.Name
  name: Name
  nameWithType: IChannel.Name
  fullName: Microsoft.Health.Fhir.Proxy.Channels.IChannel.Name
- uid: Microsoft.Health.Fhir.Proxy.Channels.IChannel.IsAuthenticated*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Channels.IChannel.IsAuthenticated
  name: IsAuthenticated
  nameWithType: IChannel.IsAuthenticated
  fullName: Microsoft.Health.Fhir.Proxy.Channels.IChannel.IsAuthenticated
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Health.Fhir.Proxy.Channels.IChannel.IsEncrypted*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Channels.IChannel.IsEncrypted
  name: IsEncrypted
  nameWithType: IChannel.IsEncrypted
  fullName: Microsoft.Health.Fhir.Proxy.Channels.IChannel.IsEncrypted
- uid: Microsoft.Health.Fhir.Proxy.Channels.IChannel.Port*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Channels.IChannel.Port
  name: Port
  nameWithType: IChannel.Port
  fullName: Microsoft.Health.Fhir.Proxy.Channels.IChannel.Port
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.Health.Fhir.Proxy.Channels.IChannel.State*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Channels.IChannel.State
  name: State
  nameWithType: IChannel.State
  fullName: Microsoft.Health.Fhir.Proxy.Channels.IChannel.State
- uid: Microsoft.Health.Fhir.Proxy.Channels.ChannelState
  commentId: T:Microsoft.Health.Fhir.Proxy.Channels.ChannelState
  parent: Microsoft.Health.Fhir.Proxy.Channels
  name: ChannelState
  nameWithType: ChannelState
  fullName: Microsoft.Health.Fhir.Proxy.Channels.ChannelState
- uid: Microsoft.Health.Fhir.Proxy.Channels.IChannel.OpenAsync*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Channels.IChannel.OpenAsync
  name: OpenAsync
  nameWithType: IChannel.OpenAsync
  fullName: Microsoft.Health.Fhir.Proxy.Channels.IChannel.OpenAsync
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Microsoft.Health.Fhir.Proxy.Channels.IChannel.SendAsync*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Channels.IChannel.SendAsync
  name: SendAsync
  nameWithType: IChannel.SendAsync
  fullName: Microsoft.Health.Fhir.Proxy.Channels.IChannel.SendAsync
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Object[]
  isExternal: true
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Microsoft.Health.Fhir.Proxy.Channels.IChannel.ReceiveAsync*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Channels.IChannel.ReceiveAsync
  name: ReceiveAsync
  nameWithType: IChannel.ReceiveAsync
  fullName: Microsoft.Health.Fhir.Proxy.Channels.IChannel.ReceiveAsync
- uid: Microsoft.Health.Fhir.Proxy.Channels.IChannel.AddMessageAsync*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Channels.IChannel.AddMessageAsync
  name: AddMessageAsync
  nameWithType: IChannel.AddMessageAsync
  fullName: Microsoft.Health.Fhir.Proxy.Channels.IChannel.AddMessageAsync
- uid: Microsoft.Health.Fhir.Proxy.Channels.IChannel.CloseAsync*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Channels.IChannel.CloseAsync
  name: CloseAsync
  nameWithType: IChannel.CloseAsync
  fullName: Microsoft.Health.Fhir.Proxy.Channels.IChannel.CloseAsync
