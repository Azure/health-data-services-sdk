### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.Fhir.Proxy.Json.JObjectReader
  commentId: T:Microsoft.Health.Fhir.Proxy.Json.JObjectReader
  id: JObjectReader
  parent: Microsoft.Health.Fhir.Proxy.Json
  children:
  - Microsoft.Health.Fhir.Proxy.Json.JObjectReader.#ctor(Newtonsoft.Json.Linq.JObject)
  - Microsoft.Health.Fhir.Proxy.Json.JObjectReader.GetEnumerator
  - Microsoft.Health.Fhir.Proxy.Json.JObjectReader.root
  langs:
  - csharp
  - vb
  name: JObjectReader
  nameWithType: JObjectReader
  fullName: Microsoft.Health.Fhir.Proxy.Json.JObjectReader
  type: Class
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Json/JObjectReader.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: JObjectReader
    path: Json/JObjectReader.cs
    startLine: 8
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Json
  summary: "\nAbstract JObject reader\n"
  example: []
  syntax:
    content: public abstract class JObjectReader
    content.vb: Public MustInherit Class JObjectReader
  inheritance:
  - System.Object
  derivedClasses:
  - Microsoft.Health.Fhir.Proxy.Json.BundleReader
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Microsoft.Health.Fhir.Proxy.Json.JObjectReader.#ctor(Newtonsoft.Json.Linq.JObject)
  commentId: M:Microsoft.Health.Fhir.Proxy.Json.JObjectReader.#ctor(Newtonsoft.Json.Linq.JObject)
  id: '#ctor(Newtonsoft.Json.Linq.JObject)'
  parent: Microsoft.Health.Fhir.Proxy.Json.JObjectReader
  langs:
  - csharp
  - vb
  name: JObjectReader(JObject)
  nameWithType: JObjectReader.JObjectReader(JObject)
  fullName: Microsoft.Health.Fhir.Proxy.Json.JObjectReader.JObjectReader(Newtonsoft.Json.Linq.JObject)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Json/JObjectReader.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: .ctor
    path: Json/JObjectReader.cs
    startLine: 10
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Json
  syntax:
    content: protected JObjectReader(JObject root)
    parameters:
    - id: root
      type: Newtonsoft.Json.Linq.JObject
    content.vb: Protected Sub New(root As JObject)
  overload: Microsoft.Health.Fhir.Proxy.Json.JObjectReader.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Microsoft.Health.Fhir.Proxy.Json.JObjectReader.root
  commentId: F:Microsoft.Health.Fhir.Proxy.Json.JObjectReader.root
  id: root
  parent: Microsoft.Health.Fhir.Proxy.Json.JObjectReader
  langs:
  - csharp
  - vb
  name: root
  nameWithType: JObjectReader.root
  fullName: Microsoft.Health.Fhir.Proxy.Json.JObjectReader.root
  type: Field
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Json/JObjectReader.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: root
    path: Json/JObjectReader.cs
    startLine: 15
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Json
  syntax:
    content: protected JObject root
    return:
      type: Newtonsoft.Json.Linq.JObject
    content.vb: Protected root As JObject
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Microsoft.Health.Fhir.Proxy.Json.JObjectReader.GetEnumerator
  commentId: M:Microsoft.Health.Fhir.Proxy.Json.JObjectReader.GetEnumerator
  id: GetEnumerator
  parent: Microsoft.Health.Fhir.Proxy.Json.JObjectReader
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: JObjectReader.GetEnumerator()
  fullName: Microsoft.Health.Fhir.Proxy.Json.JObjectReader.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Json/JObjectReader.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: GetEnumerator
    path: Json/JObjectReader.cs
    startLine: 21
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Json
  summary: "\nGets an enumerator.\n"
  example: []
  syntax:
    content: public abstract IEnumerator<JToken> GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{Newtonsoft.Json.Linq.JToken}
      description: IEnumerator of JToken.
    content.vb: Public MustOverride Function GetEnumerator As IEnumerator(Of JToken)
  overload: Microsoft.Health.Fhir.Proxy.Json.JObjectReader.GetEnumerator*
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
references:
- uid: Microsoft.Health.Fhir.Proxy.Json
  commentId: N:Microsoft.Health.Fhir.Proxy.Json
  name: Microsoft.Health.Fhir.Proxy.Json
  nameWithType: Microsoft.Health.Fhir.Proxy.Json
  fullName: Microsoft.Health.Fhir.Proxy.Json
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.Fhir.Proxy.Json.JObjectReader.#ctor*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Json.JObjectReader.#ctor
  name: JObjectReader
  nameWithType: JObjectReader.JObjectReader
  fullName: Microsoft.Health.Fhir.Proxy.Json.JObjectReader.JObjectReader
- uid: Newtonsoft.Json.Linq.JObject
  commentId: T:Newtonsoft.Json.Linq.JObject
  parent: Newtonsoft.Json.Linq
  isExternal: true
  name: JObject
  nameWithType: JObject
  fullName: Newtonsoft.Json.Linq.JObject
- uid: Newtonsoft.Json.Linq
  commentId: N:Newtonsoft.Json.Linq
  isExternal: true
  name: Newtonsoft.Json.Linq
  nameWithType: Newtonsoft.Json.Linq
  fullName: Newtonsoft.Json.Linq
- uid: Microsoft.Health.Fhir.Proxy.Json.JObjectReader.GetEnumerator*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Json.JObjectReader.GetEnumerator
  name: GetEnumerator
  nameWithType: JObjectReader.GetEnumerator
  fullName: Microsoft.Health.Fhir.Proxy.Json.JObjectReader.GetEnumerator
- uid: System.Collections.Generic.IEnumerator{Newtonsoft.Json.Linq.JToken}
  commentId: T:System.Collections.Generic.IEnumerator{Newtonsoft.Json.Linq.JToken}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<JToken>
  nameWithType: IEnumerator<JToken>
  fullName: System.Collections.Generic.IEnumerator<Newtonsoft.Json.Linq.JToken>
  nameWithType.vb: IEnumerator(Of JToken)
  fullName.vb: System.Collections.Generic.IEnumerator(Of Newtonsoft.Json.Linq.JToken)
  name.vb: IEnumerator(Of JToken)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Newtonsoft.Json.Linq.JToken
    name: JToken
    nameWithType: JToken
    fullName: Newtonsoft.Json.Linq.JToken
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Newtonsoft.Json.Linq.JToken
    name: JToken
    nameWithType: JToken
    fullName: Newtonsoft.Json.Linq.JToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
