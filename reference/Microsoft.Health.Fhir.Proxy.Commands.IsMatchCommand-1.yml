### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.Fhir.Proxy.Commands.IsMatchCommand`1
  commentId: T:Microsoft.Health.Fhir.Proxy.Commands.IsMatchCommand`1
  id: IsMatchCommand`1
  parent: Microsoft.Health.Fhir.Proxy.Commands
  children:
  - Microsoft.Health.Fhir.Proxy.Commands.IsMatchCommand`1.#ctor(Newtonsoft.Json.Linq.JToken,System.String,`0)
  - Microsoft.Health.Fhir.Proxy.Commands.IsMatchCommand`1.Execute
  langs:
  - csharp
  - vb
  name: IsMatchCommand<T>
  nameWithType: IsMatchCommand<T>
  fullName: Microsoft.Health.Fhir.Proxy.Commands.IsMatchCommand<T>
  type: Class
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Commands/IsMatchCommand.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: IsMatchCommand
    path: Commands/IsMatchCommand.cs
    startLine: 8
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Commands
  summary: "\nCommand the verifies a JToken property value from Json path matches the supplied value.\n"
  example: []
  syntax:
    content: 'public class IsMatchCommand<T> : IExceptionCommand'
    typeParameters:
    - id: T
    content.vb: >-
      Public Class IsMatchCommand(Of T)

          Implements IExceptionCommand
  inheritance:
  - System.Object
  implements:
  - Microsoft.Health.Fhir.Proxy.Commands.IExceptionCommand
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: IsMatchCommand(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Microsoft.Health.Fhir.Proxy.Commands.IsMatchCommand(Of T)
  name.vb: IsMatchCommand(Of T)
- uid: Microsoft.Health.Fhir.Proxy.Commands.IsMatchCommand`1.#ctor(Newtonsoft.Json.Linq.JToken,System.String,`0)
  commentId: M:Microsoft.Health.Fhir.Proxy.Commands.IsMatchCommand`1.#ctor(Newtonsoft.Json.Linq.JToken,System.String,`0)
  id: '#ctor(Newtonsoft.Json.Linq.JToken,System.String,`0)'
  parent: Microsoft.Health.Fhir.Proxy.Commands.IsMatchCommand`1
  langs:
  - csharp
  - vb
  name: IsMatchCommand(JToken, String, T)
  nameWithType: IsMatchCommand<T>.IsMatchCommand(JToken, String, T)
  fullName: Microsoft.Health.Fhir.Proxy.Commands.IsMatchCommand<T>.IsMatchCommand(Newtonsoft.Json.Linq.JToken, System.String, T)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Commands/IsMatchCommand.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: .ctor
    path: Commands/IsMatchCommand.cs
    startLine: 16
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Commands
  summary: "\nCreates an instance of IsMatchCommand.\n"
  example: []
  syntax:
    content: public IsMatchCommand(JToken token, string jpath, T value)
    parameters:
    - id: token
      type: Newtonsoft.Json.Linq.JToken
      description: JToken to test.
    - id: jpath
      type: System.String
      description: Json path in JToken to leads to property to test value.
    - id: value
      type: '{T}'
      description: Value to test for match.
    content.vb: Public Sub New(token As JToken, jpath As String, value As T)
  overload: Microsoft.Health.Fhir.Proxy.Commands.IsMatchCommand`1.#ctor*
  nameWithType.vb: IsMatchCommand(Of T).IsMatchCommand(JToken, String, T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.Fhir.Proxy.Commands.IsMatchCommand(Of T).IsMatchCommand(Newtonsoft.Json.Linq.JToken, System.String, T)
- uid: Microsoft.Health.Fhir.Proxy.Commands.IsMatchCommand`1.Execute
  commentId: M:Microsoft.Health.Fhir.Proxy.Commands.IsMatchCommand`1.Execute
  id: Execute
  parent: Microsoft.Health.Fhir.Proxy.Commands.IsMatchCommand`1
  langs:
  - csharp
  - vb
  name: Execute()
  nameWithType: IsMatchCommand<T>.Execute()
  fullName: Microsoft.Health.Fhir.Proxy.Commands.IsMatchCommand<T>.Execute()
  type: Method
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Commands/IsMatchCommand.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: Execute
    path: Commands/IsMatchCommand.cs
    startLine: 30
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Commands
  summary: "\nExecutes without exception if Json path for JToken has a property value that matches supplied value.\n"
  example: []
  syntax:
    content: public void Execute()
    content.vb: Public Sub Execute
  overload: Microsoft.Health.Fhir.Proxy.Commands.IsMatchCommand`1.Execute*
  implements:
  - Microsoft.Health.Fhir.Proxy.Commands.IExceptionCommand.Execute
  nameWithType.vb: IsMatchCommand(Of T).Execute()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.Fhir.Proxy.Commands.IsMatchCommand(Of T).Execute()
references:
- uid: Microsoft.Health.Fhir.Proxy.Commands
  commentId: N:Microsoft.Health.Fhir.Proxy.Commands
  name: Microsoft.Health.Fhir.Proxy.Commands
  nameWithType: Microsoft.Health.Fhir.Proxy.Commands
  fullName: Microsoft.Health.Fhir.Proxy.Commands
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Health.Fhir.Proxy.Commands.IExceptionCommand
  commentId: T:Microsoft.Health.Fhir.Proxy.Commands.IExceptionCommand
  parent: Microsoft.Health.Fhir.Proxy.Commands
  name: IExceptionCommand
  nameWithType: IExceptionCommand
  fullName: Microsoft.Health.Fhir.Proxy.Commands.IExceptionCommand
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.Fhir.Proxy.Commands.IsMatchCommand`1.#ctor*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Commands.IsMatchCommand`1.#ctor
  name: IsMatchCommand
  nameWithType: IsMatchCommand<T>.IsMatchCommand
  fullName: Microsoft.Health.Fhir.Proxy.Commands.IsMatchCommand<T>.IsMatchCommand
  nameWithType.vb: IsMatchCommand(Of T).IsMatchCommand
  fullName.vb: Microsoft.Health.Fhir.Proxy.Commands.IsMatchCommand(Of T).IsMatchCommand
- uid: Newtonsoft.Json.Linq.JToken
  commentId: T:Newtonsoft.Json.Linq.JToken
  parent: Newtonsoft.Json.Linq
  isExternal: true
  name: JToken
  nameWithType: JToken
  fullName: Newtonsoft.Json.Linq.JToken
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: Newtonsoft.Json.Linq
  commentId: N:Newtonsoft.Json.Linq
  isExternal: true
  name: Newtonsoft.Json.Linq
  nameWithType: Newtonsoft.Json.Linq
  fullName: Newtonsoft.Json.Linq
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Microsoft.Health.Fhir.Proxy.Commands.IsMatchCommand`1.Execute*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Commands.IsMatchCommand`1.Execute
  name: Execute
  nameWithType: IsMatchCommand<T>.Execute
  fullName: Microsoft.Health.Fhir.Proxy.Commands.IsMatchCommand<T>.Execute
  nameWithType.vb: IsMatchCommand(Of T).Execute
  fullName.vb: Microsoft.Health.Fhir.Proxy.Commands.IsMatchCommand(Of T).Execute
- uid: Microsoft.Health.Fhir.Proxy.Commands.IExceptionCommand.Execute
  commentId: M:Microsoft.Health.Fhir.Proxy.Commands.IExceptionCommand.Execute
  parent: Microsoft.Health.Fhir.Proxy.Commands.IExceptionCommand
  name: Execute()
  nameWithType: IExceptionCommand.Execute()
  fullName: Microsoft.Health.Fhir.Proxy.Commands.IExceptionCommand.Execute()
  spec.csharp:
  - uid: Microsoft.Health.Fhir.Proxy.Commands.IExceptionCommand.Execute
    name: Execute
    nameWithType: IExceptionCommand.Execute
    fullName: Microsoft.Health.Fhir.Proxy.Commands.IExceptionCommand.Execute
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Fhir.Proxy.Commands.IExceptionCommand.Execute
    name: Execute
    nameWithType: IExceptionCommand.Execute
    fullName: Microsoft.Health.Fhir.Proxy.Commands.IExceptionCommand.Execute
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
