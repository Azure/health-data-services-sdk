### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.Fhir.Proxy.Clients.Retry
  commentId: T:Microsoft.Health.Fhir.Proxy.Clients.Retry
  id: Retry
  parent: Microsoft.Health.Fhir.Proxy.Clients
  children:
  - Microsoft.Health.Fhir.Proxy.Clients.Retry.Execute``1(System.Func{System.Threading.Tasks.Task{``0}},System.TimeSpan,System.Int32,Microsoft.Extensions.Logging.ILogger)
  - Microsoft.Health.Fhir.Proxy.Clients.Retry.ExecuteRequest(Microsoft.Health.Fhir.Proxy.Clients.RestRequest,System.TimeSpan,System.Int32,Microsoft.Extensions.Logging.ILogger)
  langs:
  - csharp
  - vb
  name: Retry
  nameWithType: Retry
  fullName: Microsoft.Health.Fhir.Proxy.Clients.Retry
  type: Class
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Clients/Retry.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: Retry
    path: src/Microsoft.Health.Fhir.Proxy/Clients/Retry.cs
    startLine: 11
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Clients
  summary: "\nAsync http request retry logic.\n"
  example: []
  syntax:
    content: public static class Retry
    content.vb: Public Module Retry
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.Health.Fhir.Proxy.Clients.Retry.ExecuteRequest(Microsoft.Health.Fhir.Proxy.Clients.RestRequest,System.TimeSpan,System.Int32,Microsoft.Extensions.Logging.ILogger)
  commentId: M:Microsoft.Health.Fhir.Proxy.Clients.Retry.ExecuteRequest(Microsoft.Health.Fhir.Proxy.Clients.RestRequest,System.TimeSpan,System.Int32,Microsoft.Extensions.Logging.ILogger)
  id: ExecuteRequest(Microsoft.Health.Fhir.Proxy.Clients.RestRequest,System.TimeSpan,System.Int32,Microsoft.Extensions.Logging.ILogger)
  parent: Microsoft.Health.Fhir.Proxy.Clients.Retry
  langs:
  - csharp
  - vb
  name: ExecuteRequest(RestRequest, TimeSpan, Int32, ILogger)
  nameWithType: Retry.ExecuteRequest(RestRequest, TimeSpan, Int32, ILogger)
  fullName: Microsoft.Health.Fhir.Proxy.Clients.Retry.ExecuteRequest(Microsoft.Health.Fhir.Proxy.Clients.RestRequest, System.TimeSpan, System.Int32, Microsoft.Extensions.Logging.ILogger)
  type: Method
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Clients/Retry.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: ExecuteRequest
    path: src/Microsoft.Health.Fhir.Proxy/Clients/Retry.cs
    startLine: 21
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Clients
  summary: "\nExecutes an http request with retry logic.\n"
  example: []
  syntax:
    content: public static async Task<HttpResponseMessage> ExecuteRequest(RestRequest request, TimeSpan deltaBackoff, int maxRetries, ILogger logger = null)
    parameters:
    - id: request
      type: Microsoft.Health.Fhir.Proxy.Clients.RestRequest
      description: Rest request to send.
    - id: deltaBackoff
      type: System.TimeSpan
      description: Time to wait for retry if request fails.
    - id: maxRetries
      type: System.Int32
      description: Maxiumum number of times to retry failed requests.
    - id: logger
      type: Microsoft.Extensions.Logging.ILogger
      description: ILogger
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: HttpResponseMessage
    content.vb: Public Shared Function ExecuteRequest(request As RestRequest, deltaBackoff As TimeSpan, maxRetries As Integer, logger As ILogger = Nothing) As Task(Of HttpResponseMessage)
  overload: Microsoft.Health.Fhir.Proxy.Clients.Retry.ExecuteRequest*
  modifiers.csharp:
  - public
  - static
  - async
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Fhir.Proxy.Clients.Retry.Execute``1(System.Func{System.Threading.Tasks.Task{``0}},System.TimeSpan,System.Int32,Microsoft.Extensions.Logging.ILogger)
  commentId: M:Microsoft.Health.Fhir.Proxy.Clients.Retry.Execute``1(System.Func{System.Threading.Tasks.Task{``0}},System.TimeSpan,System.Int32,Microsoft.Extensions.Logging.ILogger)
  id: Execute``1(System.Func{System.Threading.Tasks.Task{``0}},System.TimeSpan,System.Int32,Microsoft.Extensions.Logging.ILogger)
  parent: Microsoft.Health.Fhir.Proxy.Clients.Retry
  langs:
  - csharp
  - vb
  name: Execute<T>(Func<Task<T>>, TimeSpan, Int32, ILogger)
  nameWithType: Retry.Execute<T>(Func<Task<T>>, TimeSpan, Int32, ILogger)
  fullName: Microsoft.Health.Fhir.Proxy.Clients.Retry.Execute<T>(System.Func<System.Threading.Tasks.Task<T>>, System.TimeSpan, System.Int32, Microsoft.Extensions.Logging.ILogger)
  type: Method
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Clients/Retry.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: Execute
    path: src/Microsoft.Health.Fhir.Proxy/Clients/Retry.cs
    startLine: 75
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Clients
  summary: "\nExecutes an http request with retry logic.\n"
  example: []
  syntax:
    content: public static async Task<T> Execute<T>(Func<Task<T>> func, TimeSpan deltaBackoff, int maxRetries, ILogger logger = null)
    parameters:
    - id: func
      type: System.Func{System.Threading.Tasks.Task{{T}}}
      description: Function that executes the rest request.
    - id: deltaBackoff
      type: System.TimeSpan
      description: Time to wait for retry if request fails.
    - id: maxRetries
      type: System.Int32
      description: Maxiumum number of times to retry failed requests.
    - id: logger
      type: Microsoft.Extensions.Logging.ILogger
      description: ILogger
    typeParameters:
    - id: T
      description: The type return by the executing function.
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: Type returned by the executing function.
    content.vb: Public Shared Function Execute(Of T)(func As Func(Of Task(Of T)), deltaBackoff As TimeSpan, maxRetries As Integer, logger As ILogger = Nothing) As Task(Of T)
  overload: Microsoft.Health.Fhir.Proxy.Clients.Retry.Execute*
  nameWithType.vb: Retry.Execute(Of T)(Func(Of Task(Of T)), TimeSpan, Int32, ILogger)
  modifiers.csharp:
  - public
  - static
  - async
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.Fhir.Proxy.Clients.Retry.Execute(Of T)(System.Func(Of System.Threading.Tasks.Task(Of T)), System.TimeSpan, System.Int32, Microsoft.Extensions.Logging.ILogger)
  name.vb: Execute(Of T)(Func(Of Task(Of T)), TimeSpan, Int32, ILogger)
references:
- uid: Microsoft.Health.Fhir.Proxy.Clients
  commentId: N:Microsoft.Health.Fhir.Proxy.Clients
  name: Microsoft.Health.Fhir.Proxy.Clients
  nameWithType: Microsoft.Health.Fhir.Proxy.Clients
  fullName: Microsoft.Health.Fhir.Proxy.Clients
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.Fhir.Proxy.Clients.Retry.ExecuteRequest*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Clients.Retry.ExecuteRequest
  name: ExecuteRequest
  nameWithType: Retry.ExecuteRequest
  fullName: Microsoft.Health.Fhir.Proxy.Clients.Retry.ExecuteRequest
- uid: Microsoft.Health.Fhir.Proxy.Clients.RestRequest
  commentId: T:Microsoft.Health.Fhir.Proxy.Clients.RestRequest
  parent: Microsoft.Health.Fhir.Proxy.Clients
  name: RestRequest
  nameWithType: RestRequest
  fullName: Microsoft.Health.Fhir.Proxy.Clients.RestRequest
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.Extensions.Logging.ILogger
  commentId: T:Microsoft.Extensions.Logging.ILogger
  parent: Microsoft.Extensions.Logging
  isExternal: true
  name: ILogger
  nameWithType: ILogger
  fullName: Microsoft.Extensions.Logging.ILogger
- uid: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
  commentId: T:System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<HttpResponseMessage>
  nameWithType: Task<HttpResponseMessage>
  fullName: System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage>
  nameWithType.vb: Task(Of HttpResponseMessage)
  fullName.vb: System.Threading.Tasks.Task(Of System.Net.Http.HttpResponseMessage)
  name.vb: Task(Of HttpResponseMessage)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.Http.HttpResponseMessage
    name: HttpResponseMessage
    nameWithType: HttpResponseMessage
    fullName: System.Net.Http.HttpResponseMessage
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Net.Http.HttpResponseMessage
    name: HttpResponseMessage
    nameWithType: HttpResponseMessage
    fullName: System.Net.Http.HttpResponseMessage
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Logging
  commentId: N:Microsoft.Extensions.Logging
  isExternal: true
  name: Microsoft.Extensions.Logging
  nameWithType: Microsoft.Extensions.Logging
  fullName: Microsoft.Extensions.Logging
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Microsoft.Health.Fhir.Proxy.Clients.Retry.Execute*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Clients.Retry.Execute
  name: Execute
  nameWithType: Retry.Execute
  fullName: Microsoft.Health.Fhir.Proxy.Clients.Retry.Execute
- uid: System.Func{System.Threading.Tasks.Task{{T}}}
  commentId: T:System.Func{System.Threading.Tasks.Task{``0}}
  parent: System
  definition: System.Func`1
  name: Func<Task<T>>
  nameWithType: Func<Task<T>>
  fullName: System.Func<System.Threading.Tasks.Task<T>>
  nameWithType.vb: Func(Of Task(Of T))
  fullName.vb: System.Func(Of System.Threading.Tasks.Task(Of T))
  name.vb: Func(Of Task(Of T))
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{{T}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<T>
  nameWithType: Task<T>
  fullName: System.Threading.Tasks.Task<T>
  nameWithType.vb: Task(Of T)
  fullName.vb: System.Threading.Tasks.Task(Of T)
  name.vb: Task(Of T)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullName.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
