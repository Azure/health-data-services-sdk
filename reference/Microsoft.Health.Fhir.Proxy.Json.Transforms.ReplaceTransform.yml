### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.ReplaceTransform
  commentId: T:Microsoft.Health.Fhir.Proxy.Json.Transforms.ReplaceTransform
  id: ReplaceTransform
  parent: Microsoft.Health.Fhir.Proxy.Json.Transforms
  children:
  - Microsoft.Health.Fhir.Proxy.Json.Transforms.ReplaceTransform.Execute(System.String)
  - Microsoft.Health.Fhir.Proxy.Json.Transforms.ReplaceTransform.Name
  - Microsoft.Health.Fhir.Proxy.Json.Transforms.ReplaceTransform.ReplaceNode
  langs:
  - csharp
  - vb
  name: ReplaceTransform
  nameWithType: ReplaceTransform
  fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.ReplaceTransform
  type: Class
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Json/Transforms/ReplaceTransform.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: ReplaceTransform
    path: src/Microsoft.Health.Fhir.Proxy/Json/Transforms/ReplaceTransform.cs
    startLine: 9
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Json.Transforms
  summary: "\nJson replace transform.\n"
  example: []
  syntax:
    content: >-
      [Serializable]

      [JsonObject]

      public class ReplaceTransform : Transform
    content.vb: >-
      <Serializable>

      <JsonObject>

      Public Class ReplaceTransform
          Inherits Transform
  inheritance:
  - System.Object
  - Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform
  inheritedMembers:
  - Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform.JsonPath
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: System.SerializableAttribute
    ctor: System.SerializableAttribute.#ctor
    arguments: []
  - type: Newtonsoft.Json.JsonObjectAttribute
    ctor: Newtonsoft.Json.JsonObjectAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.ReplaceTransform.Name
  commentId: P:Microsoft.Health.Fhir.Proxy.Json.Transforms.ReplaceTransform.Name
  id: Name
  parent: Microsoft.Health.Fhir.Proxy.Json.Transforms.ReplaceTransform
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: ReplaceTransform.Name
  fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.ReplaceTransform.Name
  type: Property
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Json/Transforms/ReplaceTransform.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: Name
    path: src/Microsoft.Health.Fhir.Proxy/Json/Transforms/ReplaceTransform.cs
    startLine: 16
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Json.Transforms
  summary: "\nGets the name of the transform, i.e., &quot;replace&quot;.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty("name")]

      public override string Name { get; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty("name")>

      Public Overrides ReadOnly Property Name As String
  overridden: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform.Name
  overload: Microsoft.Health.Fhir.Proxy.Json.Transforms.ReplaceTransform.Name*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: name
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.ReplaceTransform.ReplaceNode
  commentId: P:Microsoft.Health.Fhir.Proxy.Json.Transforms.ReplaceTransform.ReplaceNode
  id: ReplaceNode
  parent: Microsoft.Health.Fhir.Proxy.Json.Transforms.ReplaceTransform
  langs:
  - csharp
  - vb
  name: ReplaceNode
  nameWithType: ReplaceTransform.ReplaceNode
  fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.ReplaceTransform.ReplaceNode
  type: Property
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Json/Transforms/ReplaceTransform.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: ReplaceNode
    path: src/Microsoft.Health.Fhir.Proxy/Json/Transforms/ReplaceTransform.cs
    startLine: 22
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Json.Transforms
  summary: "\nGets or sets the json node to replace.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty("replaceNode")]

      public string ReplaceNode { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty("replaceNode")>

      Public Property ReplaceNode As String
  overload: Microsoft.Health.Fhir.Proxy.Json.Transforms.ReplaceTransform.ReplaceNode*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: replaceNode
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.ReplaceTransform.Execute(System.String)
  commentId: M:Microsoft.Health.Fhir.Proxy.Json.Transforms.ReplaceTransform.Execute(System.String)
  id: Execute(System.String)
  parent: Microsoft.Health.Fhir.Proxy.Json.Transforms.ReplaceTransform
  langs:
  - csharp
  - vb
  name: Execute(String)
  nameWithType: ReplaceTransform.Execute(String)
  fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.ReplaceTransform.Execute(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Json/Transforms/ReplaceTransform.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: Execute
    path: src/Microsoft.Health.Fhir.Proxy/Json/Transforms/ReplaceTransform.cs
    startLine: 30
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Json.Transforms
  summary: "\nExecutes the replace transform.\n"
  example: []
  syntax:
    content: public override JObject Execute(string json)
    parameters:
    - id: json
      type: System.String
      description: Json document which a node is replaced based on the Json path and replace node.
    return:
      type: Newtonsoft.Json.Linq.JObject
      description: ''
    content.vb: Public Overrides Function Execute(json As String) As JObject
  overridden: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform.Execute(System.String)
  overload: Microsoft.Health.Fhir.Proxy.Json.Transforms.ReplaceTransform.Execute*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Microsoft.Health.Fhir.Proxy.Json.Transforms
  commentId: N:Microsoft.Health.Fhir.Proxy.Json.Transforms
  name: Microsoft.Health.Fhir.Proxy.Json.Transforms
  nameWithType: Microsoft.Health.Fhir.Proxy.Json.Transforms
  fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform
  commentId: T:Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform
  parent: Microsoft.Health.Fhir.Proxy.Json.Transforms
  name: Transform
  nameWithType: Transform
  fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform
- uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform.JsonPath
  commentId: P:Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform.JsonPath
  parent: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform
  name: JsonPath
  nameWithType: Transform.JsonPath
  fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform.JsonPath
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform.Name
  commentId: P:Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform.Name
  parent: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform
  name: Name
  nameWithType: Transform.Name
  fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform.Name
- uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.ReplaceTransform.Name*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Json.Transforms.ReplaceTransform.Name
  name: Name
  nameWithType: ReplaceTransform.Name
  fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.ReplaceTransform.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.ReplaceTransform.ReplaceNode*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Json.Transforms.ReplaceTransform.ReplaceNode
  name: ReplaceNode
  nameWithType: ReplaceTransform.ReplaceNode
  fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.ReplaceTransform.ReplaceNode
- uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform.Execute(System.String)
  commentId: M:Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform.Execute(System.String)
  parent: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform
  isExternal: true
  name: Execute(String)
  nameWithType: Transform.Execute(String)
  fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform.Execute(System.String)
  spec.csharp:
  - uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform.Execute(System.String)
    name: Execute
    nameWithType: Transform.Execute
    fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform.Execute
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform.Execute(System.String)
    name: Execute
    nameWithType: Transform.Execute
    fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform.Execute
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.ReplaceTransform.Execute*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Json.Transforms.ReplaceTransform.Execute
  name: Execute
  nameWithType: ReplaceTransform.Execute
  fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.ReplaceTransform.Execute
- uid: Newtonsoft.Json.Linq.JObject
  commentId: T:Newtonsoft.Json.Linq.JObject
  parent: Newtonsoft.Json.Linq
  isExternal: true
  name: JObject
  nameWithType: JObject
  fullName: Newtonsoft.Json.Linq.JObject
- uid: Newtonsoft.Json.Linq
  commentId: N:Newtonsoft.Json.Linq
  isExternal: true
  name: Newtonsoft.Json.Linq
  nameWithType: Newtonsoft.Json.Linq
  fullName: Newtonsoft.Json.Linq
