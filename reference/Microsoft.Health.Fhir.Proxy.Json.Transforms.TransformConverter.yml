### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformConverter
  commentId: T:Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformConverter
  id: TransformConverter
  parent: Microsoft.Health.Fhir.Proxy.Json.Transforms
  children:
  - Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformConverter.Create(System.Type,Newtonsoft.Json.Linq.JObject)
  langs:
  - csharp
  - vb
  name: TransformConverter
  nameWithType: TransformConverter
  fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformConverter
  type: Class
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Json/Transforms/TransformConverter.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: TransformConverter
    path: Json/Transforms/TransformConverter.cs
    startLine: 8
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Json.Transforms
  summary: "\nJSON.NET transform converter\n"
  example: []
  syntax:
    content: 'public class TransformConverter : JsonTransformConverter<Transform>'
    content.vb: >-
      Public Class TransformConverter

          Inherits JsonTransformConverter(Of Transform)
  inheritance:
  - System.Object
  - Newtonsoft.Json.JsonConverter
  - Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}
  inheritedMembers:
  - Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}.CanConvert(System.Type)
  - Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
  - Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
  - Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}.FieldExists(Newtonsoft.Json.Linq.JObject,System.String,Newtonsoft.Json.Linq.JTokenType)
  - Newtonsoft.Json.JsonConverter.CanRead
  - Newtonsoft.Json.JsonConverter.CanWrite
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformConverter.Create(System.Type,Newtonsoft.Json.Linq.JObject)
  commentId: M:Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformConverter.Create(System.Type,Newtonsoft.Json.Linq.JObject)
  id: Create(System.Type,Newtonsoft.Json.Linq.JObject)
  parent: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformConverter
  langs:
  - csharp
  - vb
  name: Create(Type, JObject)
  nameWithType: TransformConverter.Create(Type, JObject)
  fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformConverter.Create(System.Type, Newtonsoft.Json.Linq.JObject)
  type: Method
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Json/Transforms/TransformConverter.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: Create
    path: Json/Transforms/TransformConverter.cs
    startLine: 16
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Json.Transforms
  summary: "\nCreates a concrete transform and returns as abstract transform type.\n"
  example: []
  syntax:
    content: protected override Transform Create(Type objectType, JObject jObject)
    parameters:
    - id: objectType
      type: System.Type
      description: Transform object type.
    - id: jObject
      type: Newtonsoft.Json.Linq.JObject
      description: Transform object.
    return:
      type: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform
      description: ''
    content.vb: Protected Overrides Function Create(objectType As Type, jObject As JObject) As Transform
  overridden: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}.Create(System.Type,Newtonsoft.Json.Linq.JObject)
  overload: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformConverter.Create*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
references:
- uid: Microsoft.Health.Fhir.Proxy.Json.Transforms
  commentId: N:Microsoft.Health.Fhir.Proxy.Json.Transforms
  name: Microsoft.Health.Fhir.Proxy.Json.Transforms
  nameWithType: Microsoft.Health.Fhir.Proxy.Json.Transforms
  fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Newtonsoft.Json.JsonConverter
  commentId: T:Newtonsoft.Json.JsonConverter
  parent: Newtonsoft.Json
  isExternal: true
  name: JsonConverter
  nameWithType: JsonConverter
  fullName: Newtonsoft.Json.JsonConverter
- uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}
  commentId: T:Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}
  parent: Microsoft.Health.Fhir.Proxy.Json.Transforms
  definition: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1
  name: JsonTransformConverter<Transform>
  nameWithType: JsonTransformConverter<Transform>
  fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter<Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform>
  nameWithType.vb: JsonTransformConverter(Of Transform)
  fullName.vb: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter(Of Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform)
  name.vb: JsonTransformConverter(Of Transform)
  spec.csharp:
  - uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1
    name: JsonTransformConverter
    nameWithType: JsonTransformConverter
    fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform
    name: Transform
    nameWithType: Transform
    fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1
    name: JsonTransformConverter
    nameWithType: JsonTransformConverter
    fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform
    name: Transform
    nameWithType: Transform
    fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}.CanConvert(System.Type)
  commentId: M:Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}.CanConvert(System.Type)
  parent: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}
  definition: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1.CanConvert(System.Type)
  name: CanConvert(Type)
  nameWithType: JsonTransformConverter<Transform>.CanConvert(Type)
  fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter<Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform>.CanConvert(System.Type)
  nameWithType.vb: JsonTransformConverter(Of Transform).CanConvert(Type)
  fullName.vb: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter(Of Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform).CanConvert(System.Type)
  spec.csharp:
  - uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1.CanConvert(System.Type)
    name: CanConvert
    nameWithType: JsonTransformConverter<Transform>.CanConvert
    fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter<Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform>.CanConvert
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1.CanConvert(System.Type)
    name: CanConvert
    nameWithType: JsonTransformConverter(Of Transform).CanConvert
    fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter(Of Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform).CanConvert
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
  commentId: M:Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
  parent: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}
  definition: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
  name: ReadJson(JsonReader, Type, Object, JsonSerializer)
  nameWithType: JsonTransformConverter<Transform>.ReadJson(JsonReader, Type, Object, JsonSerializer)
  fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter<Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform>.ReadJson(Newtonsoft.Json.JsonReader, System.Type, System.Object, Newtonsoft.Json.JsonSerializer)
  nameWithType.vb: JsonTransformConverter(Of Transform).ReadJson(JsonReader, Type, Object, JsonSerializer)
  fullName.vb: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter(Of Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform).ReadJson(Newtonsoft.Json.JsonReader, System.Type, System.Object, Newtonsoft.Json.JsonSerializer)
  spec.csharp:
  - uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
    name: ReadJson
    nameWithType: JsonTransformConverter<Transform>.ReadJson
    fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter<Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform>.ReadJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: Newtonsoft.Json.JsonReader
    name: JsonReader
    nameWithType: JsonReader
    fullName: Newtonsoft.Json.JsonReader
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.JsonSerializer
    name: JsonSerializer
    nameWithType: JsonSerializer
    fullName: Newtonsoft.Json.JsonSerializer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
    name: ReadJson
    nameWithType: JsonTransformConverter(Of Transform).ReadJson
    fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter(Of Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform).ReadJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: Newtonsoft.Json.JsonReader
    name: JsonReader
    nameWithType: JsonReader
    fullName: Newtonsoft.Json.JsonReader
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.JsonSerializer
    name: JsonSerializer
    nameWithType: JsonSerializer
    fullName: Newtonsoft.Json.JsonSerializer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
  commentId: M:Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
  parent: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}
  definition: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
  name: WriteJson(JsonWriter, Object, JsonSerializer)
  nameWithType: JsonTransformConverter<Transform>.WriteJson(JsonWriter, Object, JsonSerializer)
  fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter<Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform>.WriteJson(Newtonsoft.Json.JsonWriter, System.Object, Newtonsoft.Json.JsonSerializer)
  nameWithType.vb: JsonTransformConverter(Of Transform).WriteJson(JsonWriter, Object, JsonSerializer)
  fullName.vb: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter(Of Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform).WriteJson(Newtonsoft.Json.JsonWriter, System.Object, Newtonsoft.Json.JsonSerializer)
  spec.csharp:
  - uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
    name: WriteJson
    nameWithType: JsonTransformConverter<Transform>.WriteJson
    fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter<Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform>.WriteJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: Newtonsoft.Json.JsonWriter
    name: JsonWriter
    nameWithType: JsonWriter
    fullName: Newtonsoft.Json.JsonWriter
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.JsonSerializer
    name: JsonSerializer
    nameWithType: JsonSerializer
    fullName: Newtonsoft.Json.JsonSerializer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
    name: WriteJson
    nameWithType: JsonTransformConverter(Of Transform).WriteJson
    fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter(Of Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform).WriteJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: Newtonsoft.Json.JsonWriter
    name: JsonWriter
    nameWithType: JsonWriter
    fullName: Newtonsoft.Json.JsonWriter
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.JsonSerializer
    name: JsonSerializer
    nameWithType: JsonSerializer
    fullName: Newtonsoft.Json.JsonSerializer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}.FieldExists(Newtonsoft.Json.Linq.JObject,System.String,Newtonsoft.Json.Linq.JTokenType)
  commentId: M:Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}.FieldExists(Newtonsoft.Json.Linq.JObject,System.String,Newtonsoft.Json.Linq.JTokenType)
  parent: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}
  definition: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1.FieldExists(Newtonsoft.Json.Linq.JObject,System.String,Newtonsoft.Json.Linq.JTokenType)
  name: FieldExists(JObject, String, JTokenType)
  nameWithType: JsonTransformConverter<Transform>.FieldExists(JObject, String, JTokenType)
  fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter<Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform>.FieldExists(Newtonsoft.Json.Linq.JObject, System.String, Newtonsoft.Json.Linq.JTokenType)
  nameWithType.vb: JsonTransformConverter(Of Transform).FieldExists(JObject, String, JTokenType)
  fullName.vb: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter(Of Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform).FieldExists(Newtonsoft.Json.Linq.JObject, System.String, Newtonsoft.Json.Linq.JTokenType)
  spec.csharp:
  - uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1.FieldExists(Newtonsoft.Json.Linq.JObject,System.String,Newtonsoft.Json.Linq.JTokenType)
    name: FieldExists
    nameWithType: JsonTransformConverter<Transform>.FieldExists
    fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter<Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform>.FieldExists
  - name: (
    nameWithType: (
    fullName: (
  - uid: Newtonsoft.Json.Linq.JObject
    name: JObject
    nameWithType: JObject
    fullName: Newtonsoft.Json.Linq.JObject
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.Linq.JTokenType
    name: JTokenType
    nameWithType: JTokenType
    fullName: Newtonsoft.Json.Linq.JTokenType
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1.FieldExists(Newtonsoft.Json.Linq.JObject,System.String,Newtonsoft.Json.Linq.JTokenType)
    name: FieldExists
    nameWithType: JsonTransformConverter(Of Transform).FieldExists
    fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter(Of Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform).FieldExists
  - name: (
    nameWithType: (
    fullName: (
  - uid: Newtonsoft.Json.Linq.JObject
    name: JObject
    nameWithType: JObject
    fullName: Newtonsoft.Json.Linq.JObject
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.Linq.JTokenType
    name: JTokenType
    nameWithType: JTokenType
    fullName: Newtonsoft.Json.Linq.JTokenType
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Newtonsoft.Json.JsonConverter.CanRead
  commentId: P:Newtonsoft.Json.JsonConverter.CanRead
  parent: Newtonsoft.Json.JsonConverter
  isExternal: true
  name: CanRead
  nameWithType: JsonConverter.CanRead
  fullName: Newtonsoft.Json.JsonConverter.CanRead
- uid: Newtonsoft.Json.JsonConverter.CanWrite
  commentId: P:Newtonsoft.Json.JsonConverter.CanWrite
  parent: Newtonsoft.Json.JsonConverter
  isExternal: true
  name: CanWrite
  nameWithType: JsonConverter.CanWrite
  fullName: Newtonsoft.Json.JsonConverter.CanWrite
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Newtonsoft.Json
  commentId: N:Newtonsoft.Json
  isExternal: true
  name: Newtonsoft.Json
  nameWithType: Newtonsoft.Json
  fullName: Newtonsoft.Json
- uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1
  commentId: T:Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1
  name: JsonTransformConverter<T>
  nameWithType: JsonTransformConverter<T>
  fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter<T>
  nameWithType.vb: JsonTransformConverter(Of T)
  fullName.vb: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter(Of T)
  name.vb: JsonTransformConverter(Of T)
  spec.csharp:
  - uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1
    name: JsonTransformConverter
    nameWithType: JsonTransformConverter
    fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1
    name: JsonTransformConverter
    nameWithType: JsonTransformConverter
    fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1.CanConvert(System.Type)
  commentId: M:Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1.CanConvert(System.Type)
  isExternal: true
  name: CanConvert(Type)
  nameWithType: JsonTransformConverter<T>.CanConvert(Type)
  fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter<T>.CanConvert(System.Type)
  nameWithType.vb: JsonTransformConverter(Of T).CanConvert(Type)
  fullName.vb: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter(Of T).CanConvert(System.Type)
  spec.csharp:
  - uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1.CanConvert(System.Type)
    name: CanConvert
    nameWithType: JsonTransformConverter<T>.CanConvert
    fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter<T>.CanConvert
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1.CanConvert(System.Type)
    name: CanConvert
    nameWithType: JsonTransformConverter(Of T).CanConvert
    fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter(Of T).CanConvert
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
  commentId: M:Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
  isExternal: true
  name: ReadJson(JsonReader, Type, Object, JsonSerializer)
  nameWithType: JsonTransformConverter<T>.ReadJson(JsonReader, Type, Object, JsonSerializer)
  fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter<T>.ReadJson(Newtonsoft.Json.JsonReader, System.Type, System.Object, Newtonsoft.Json.JsonSerializer)
  nameWithType.vb: JsonTransformConverter(Of T).ReadJson(JsonReader, Type, Object, JsonSerializer)
  fullName.vb: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter(Of T).ReadJson(Newtonsoft.Json.JsonReader, System.Type, System.Object, Newtonsoft.Json.JsonSerializer)
  spec.csharp:
  - uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
    name: ReadJson
    nameWithType: JsonTransformConverter<T>.ReadJson
    fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter<T>.ReadJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: Newtonsoft.Json.JsonReader
    name: JsonReader
    nameWithType: JsonReader
    fullName: Newtonsoft.Json.JsonReader
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.JsonSerializer
    name: JsonSerializer
    nameWithType: JsonSerializer
    fullName: Newtonsoft.Json.JsonSerializer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
    name: ReadJson
    nameWithType: JsonTransformConverter(Of T).ReadJson
    fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter(Of T).ReadJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: Newtonsoft.Json.JsonReader
    name: JsonReader
    nameWithType: JsonReader
    fullName: Newtonsoft.Json.JsonReader
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.JsonSerializer
    name: JsonSerializer
    nameWithType: JsonSerializer
    fullName: Newtonsoft.Json.JsonSerializer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
  commentId: M:Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
  isExternal: true
  name: WriteJson(JsonWriter, Object, JsonSerializer)
  nameWithType: JsonTransformConverter<T>.WriteJson(JsonWriter, Object, JsonSerializer)
  fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter<T>.WriteJson(Newtonsoft.Json.JsonWriter, System.Object, Newtonsoft.Json.JsonSerializer)
  nameWithType.vb: JsonTransformConverter(Of T).WriteJson(JsonWriter, Object, JsonSerializer)
  fullName.vb: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter(Of T).WriteJson(Newtonsoft.Json.JsonWriter, System.Object, Newtonsoft.Json.JsonSerializer)
  spec.csharp:
  - uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
    name: WriteJson
    nameWithType: JsonTransformConverter<T>.WriteJson
    fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter<T>.WriteJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: Newtonsoft.Json.JsonWriter
    name: JsonWriter
    nameWithType: JsonWriter
    fullName: Newtonsoft.Json.JsonWriter
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.JsonSerializer
    name: JsonSerializer
    nameWithType: JsonSerializer
    fullName: Newtonsoft.Json.JsonSerializer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
    name: WriteJson
    nameWithType: JsonTransformConverter(Of T).WriteJson
    fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter(Of T).WriteJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: Newtonsoft.Json.JsonWriter
    name: JsonWriter
    nameWithType: JsonWriter
    fullName: Newtonsoft.Json.JsonWriter
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.JsonSerializer
    name: JsonSerializer
    nameWithType: JsonSerializer
    fullName: Newtonsoft.Json.JsonSerializer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1.FieldExists(Newtonsoft.Json.Linq.JObject,System.String,Newtonsoft.Json.Linq.JTokenType)
  commentId: M:Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1.FieldExists(Newtonsoft.Json.Linq.JObject,System.String,Newtonsoft.Json.Linq.JTokenType)
  isExternal: true
  name: FieldExists(JObject, String, JTokenType)
  nameWithType: JsonTransformConverter<T>.FieldExists(JObject, String, JTokenType)
  fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter<T>.FieldExists(Newtonsoft.Json.Linq.JObject, System.String, Newtonsoft.Json.Linq.JTokenType)
  nameWithType.vb: JsonTransformConverter(Of T).FieldExists(JObject, String, JTokenType)
  fullName.vb: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter(Of T).FieldExists(Newtonsoft.Json.Linq.JObject, System.String, Newtonsoft.Json.Linq.JTokenType)
  spec.csharp:
  - uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1.FieldExists(Newtonsoft.Json.Linq.JObject,System.String,Newtonsoft.Json.Linq.JTokenType)
    name: FieldExists
    nameWithType: JsonTransformConverter<T>.FieldExists
    fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter<T>.FieldExists
  - name: (
    nameWithType: (
    fullName: (
  - uid: Newtonsoft.Json.Linq.JObject
    name: JObject
    nameWithType: JObject
    fullName: Newtonsoft.Json.Linq.JObject
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.Linq.JTokenType
    name: JTokenType
    nameWithType: JTokenType
    fullName: Newtonsoft.Json.Linq.JTokenType
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1.FieldExists(Newtonsoft.Json.Linq.JObject,System.String,Newtonsoft.Json.Linq.JTokenType)
    name: FieldExists
    nameWithType: JsonTransformConverter(Of T).FieldExists
    fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter(Of T).FieldExists
  - name: (
    nameWithType: (
    fullName: (
  - uid: Newtonsoft.Json.Linq.JObject
    name: JObject
    nameWithType: JObject
    fullName: Newtonsoft.Json.Linq.JObject
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.Linq.JTokenType
    name: JTokenType
    nameWithType: JTokenType
    fullName: Newtonsoft.Json.Linq.JTokenType
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}.Create(System.Type,Newtonsoft.Json.Linq.JObject)
  commentId: M:Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}.Create(System.Type,Newtonsoft.Json.Linq.JObject)
  parent: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}
  definition: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1.Create(System.Type,Newtonsoft.Json.Linq.JObject)
  name: Create(Type, JObject)
  nameWithType: JsonTransformConverter<Transform>.Create(Type, JObject)
  fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter<Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform>.Create(System.Type, Newtonsoft.Json.Linq.JObject)
  nameWithType.vb: JsonTransformConverter(Of Transform).Create(Type, JObject)
  fullName.vb: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter(Of Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform).Create(System.Type, Newtonsoft.Json.Linq.JObject)
  spec.csharp:
  - uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1.Create(System.Type,Newtonsoft.Json.Linq.JObject)
    name: Create
    nameWithType: JsonTransformConverter<Transform>.Create
    fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter<Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform>.Create
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.Linq.JObject
    name: JObject
    nameWithType: JObject
    fullName: Newtonsoft.Json.Linq.JObject
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1.Create(System.Type,Newtonsoft.Json.Linq.JObject)
    name: Create
    nameWithType: JsonTransformConverter(Of Transform).Create
    fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter(Of Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform).Create
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.Linq.JObject
    name: JObject
    nameWithType: JObject
    fullName: Newtonsoft.Json.Linq.JObject
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformConverter.Create*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformConverter.Create
  name: Create
  nameWithType: TransformConverter.Create
  fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformConverter.Create
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Newtonsoft.Json.Linq.JObject
  commentId: T:Newtonsoft.Json.Linq.JObject
  parent: Newtonsoft.Json.Linq
  isExternal: true
  name: JObject
  nameWithType: JObject
  fullName: Newtonsoft.Json.Linq.JObject
- uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform
  commentId: T:Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform
  parent: Microsoft.Health.Fhir.Proxy.Json.Transforms
  name: Transform
  nameWithType: Transform
  fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform
- uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1.Create(System.Type,Newtonsoft.Json.Linq.JObject)
  commentId: M:Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1.Create(System.Type,Newtonsoft.Json.Linq.JObject)
  isExternal: true
  name: Create(Type, JObject)
  nameWithType: JsonTransformConverter<T>.Create(Type, JObject)
  fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter<T>.Create(System.Type, Newtonsoft.Json.Linq.JObject)
  nameWithType.vb: JsonTransformConverter(Of T).Create(Type, JObject)
  fullName.vb: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter(Of T).Create(System.Type, Newtonsoft.Json.Linq.JObject)
  spec.csharp:
  - uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1.Create(System.Type,Newtonsoft.Json.Linq.JObject)
    name: Create
    nameWithType: JsonTransformConverter<T>.Create
    fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter<T>.Create
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.Linq.JObject
    name: JObject
    nameWithType: JObject
    fullName: Newtonsoft.Json.Linq.JObject
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter`1.Create(System.Type,Newtonsoft.Json.Linq.JObject)
    name: Create
    nameWithType: JsonTransformConverter(Of T).Create
    fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter(Of T).Create
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.Linq.JObject
    name: JObject
    nameWithType: JObject
    fullName: Newtonsoft.Json.Linq.JObject
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Newtonsoft.Json.Linq
  commentId: N:Newtonsoft.Json.Linq
  isExternal: true
  name: Newtonsoft.Json.Linq
  nameWithType: Newtonsoft.Json.Linq
  fullName: Newtonsoft.Json.Linq
