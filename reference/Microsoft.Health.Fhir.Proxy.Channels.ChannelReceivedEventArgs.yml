### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.Fhir.Proxy.Channels.ChannelReceivedEventArgs
  commentId: T:Microsoft.Health.Fhir.Proxy.Channels.ChannelReceivedEventArgs
  id: ChannelReceivedEventArgs
  parent: Microsoft.Health.Fhir.Proxy.Channels
  children:
  - Microsoft.Health.Fhir.Proxy.Channels.ChannelReceivedEventArgs.#ctor(System.String,System.String,System.Byte[])
  - Microsoft.Health.Fhir.Proxy.Channels.ChannelReceivedEventArgs.#ctor(System.String,System.String,System.Byte[],System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  - Microsoft.Health.Fhir.Proxy.Channels.ChannelReceivedEventArgs.Id
  - Microsoft.Health.Fhir.Proxy.Channels.ChannelReceivedEventArgs.Message
  - Microsoft.Health.Fhir.Proxy.Channels.ChannelReceivedEventArgs.Name
  - Microsoft.Health.Fhir.Proxy.Channels.ChannelReceivedEventArgs.Properties
  langs:
  - csharp
  - vb
  name: ChannelReceivedEventArgs
  nameWithType: ChannelReceivedEventArgs
  fullName: Microsoft.Health.Fhir.Proxy.Channels.ChannelReceivedEventArgs
  type: Class
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Channels/ChannelReceivedEventArgs.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: ChannelReceivedEventArgs
    path: src/Microsoft.Health.Fhir.Proxy/Channels/ChannelReceivedEventArgs.cs
    startLine: 8
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Channels
  summary: "\nEvents args for channel receive events.\n"
  example: []
  syntax:
    content: 'public class ChannelReceivedEventArgs : EventArgs'
    content.vb: >-
      Public Class ChannelReceivedEventArgs
          Inherits EventArgs
  inheritance:
  - System.Object
  - System.EventArgs
  inheritedMembers:
  - System.EventArgs.Empty
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Health.Fhir.Proxy.Channels.ChannelReceivedEventArgs.#ctor(System.String,System.String,System.Byte[])
  commentId: M:Microsoft.Health.Fhir.Proxy.Channels.ChannelReceivedEventArgs.#ctor(System.String,System.String,System.Byte[])
  id: '#ctor(System.String,System.String,System.Byte[])'
  parent: Microsoft.Health.Fhir.Proxy.Channels.ChannelReceivedEventArgs
  langs:
  - csharp
  - vb
  name: ChannelReceivedEventArgs(String, String, Byte[])
  nameWithType: ChannelReceivedEventArgs.ChannelReceivedEventArgs(String, String, Byte[])
  fullName: Microsoft.Health.Fhir.Proxy.Channels.ChannelReceivedEventArgs.ChannelReceivedEventArgs(System.String, System.String, System.Byte[])
  type: Constructor
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Channels/ChannelReceivedEventArgs.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: .ctor
    path: src/Microsoft.Health.Fhir.Proxy/Channels/ChannelReceivedEventArgs.cs
    startLine: 16
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Channels
  summary: "\nCreates an instance of ChannelReceivedEventArgs.\n"
  example: []
  syntax:
    content: public ChannelReceivedEventArgs(string id, string name, byte[] message)
    parameters:
    - id: id
      type: System.String
      description: Channel instance ID.
    - id: name
      type: System.String
      description: Channel name.
    - id: message
      type: System.Byte[]
      description: Message received by the channel.
    content.vb: Public Sub New(id As String, name As String, message As Byte())
  overload: Microsoft.Health.Fhir.Proxy.Channels.ChannelReceivedEventArgs.#ctor*
  nameWithType.vb: ChannelReceivedEventArgs.ChannelReceivedEventArgs(String, String, Byte())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.Fhir.Proxy.Channels.ChannelReceivedEventArgs.ChannelReceivedEventArgs(System.String, System.String, System.Byte())
  name.vb: ChannelReceivedEventArgs(String, String, Byte())
- uid: Microsoft.Health.Fhir.Proxy.Channels.ChannelReceivedEventArgs.#ctor(System.String,System.String,System.Byte[],System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  commentId: M:Microsoft.Health.Fhir.Proxy.Channels.ChannelReceivedEventArgs.#ctor(System.String,System.String,System.Byte[],System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  id: '#ctor(System.String,System.String,System.Byte[],System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})'
  parent: Microsoft.Health.Fhir.Proxy.Channels.ChannelReceivedEventArgs
  langs:
  - csharp
  - vb
  name: ChannelReceivedEventArgs(String, String, Byte[], IEnumerable<KeyValuePair<String, String>>)
  nameWithType: ChannelReceivedEventArgs.ChannelReceivedEventArgs(String, String, Byte[], IEnumerable<KeyValuePair<String, String>>)
  fullName: Microsoft.Health.Fhir.Proxy.Channels.ChannelReceivedEventArgs.ChannelReceivedEventArgs(System.String, System.String, System.Byte[], System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, System.String>>)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Channels/ChannelReceivedEventArgs.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: .ctor
    path: src/Microsoft.Health.Fhir.Proxy/Channels/ChannelReceivedEventArgs.cs
    startLine: 28
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Channels
  summary: "\nCreates an instance of ChannelReceivedEventArgs.\n"
  example: []
  syntax:
    content: public ChannelReceivedEventArgs(string id, string name, byte[] message, IEnumerable<KeyValuePair<string, string>> properties)
    parameters:
    - id: id
      type: System.String
      description: Channel instance ID.
    - id: name
      type: System.String
      description: Channel name.
    - id: message
      type: System.Byte[]
      description: Message received by the channel.
    - id: properties
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}
      description: Additional properties to be passed.
    content.vb: Public Sub New(id As String, name As String, message As Byte(), properties As IEnumerable(Of KeyValuePair(Of String, String)))
  overload: Microsoft.Health.Fhir.Proxy.Channels.ChannelReceivedEventArgs.#ctor*
  nameWithType.vb: ChannelReceivedEventArgs.ChannelReceivedEventArgs(String, String, Byte(), IEnumerable(Of KeyValuePair(Of String, String)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.Fhir.Proxy.Channels.ChannelReceivedEventArgs.ChannelReceivedEventArgs(System.String, System.String, System.Byte(), System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.String, System.String)))
  name.vb: ChannelReceivedEventArgs(String, String, Byte(), IEnumerable(Of KeyValuePair(Of String, String)))
- uid: Microsoft.Health.Fhir.Proxy.Channels.ChannelReceivedEventArgs.Id
  commentId: P:Microsoft.Health.Fhir.Proxy.Channels.ChannelReceivedEventArgs.Id
  id: Id
  parent: Microsoft.Health.Fhir.Proxy.Channels.ChannelReceivedEventArgs
  langs:
  - csharp
  - vb
  name: Id
  nameWithType: ChannelReceivedEventArgs.Id
  fullName: Microsoft.Health.Fhir.Proxy.Channels.ChannelReceivedEventArgs.Id
  type: Property
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Channels/ChannelReceivedEventArgs.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: Id
    path: src/Microsoft.Health.Fhir.Proxy/Channels/ChannelReceivedEventArgs.cs
    startLine: 40
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Channels
  summary: "\nGets channel instance ID.\n"
  example: []
  syntax:
    content: public string Id { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Id As String
  overload: Microsoft.Health.Fhir.Proxy.Channels.ChannelReceivedEventArgs.Id*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.Fhir.Proxy.Channels.ChannelReceivedEventArgs.Name
  commentId: P:Microsoft.Health.Fhir.Proxy.Channels.ChannelReceivedEventArgs.Name
  id: Name
  parent: Microsoft.Health.Fhir.Proxy.Channels.ChannelReceivedEventArgs
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: ChannelReceivedEventArgs.Name
  fullName: Microsoft.Health.Fhir.Proxy.Channels.ChannelReceivedEventArgs.Name
  type: Property
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Channels/ChannelReceivedEventArgs.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: Name
    path: src/Microsoft.Health.Fhir.Proxy/Channels/ChannelReceivedEventArgs.cs
    startLine: 45
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Channels
  summary: "\nGets channel name.\n"
  example: []
  syntax:
    content: public string Name { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Name As String
  overload: Microsoft.Health.Fhir.Proxy.Channels.ChannelReceivedEventArgs.Name*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.Fhir.Proxy.Channels.ChannelReceivedEventArgs.Message
  commentId: P:Microsoft.Health.Fhir.Proxy.Channels.ChannelReceivedEventArgs.Message
  id: Message
  parent: Microsoft.Health.Fhir.Proxy.Channels.ChannelReceivedEventArgs
  langs:
  - csharp
  - vb
  name: Message
  nameWithType: ChannelReceivedEventArgs.Message
  fullName: Microsoft.Health.Fhir.Proxy.Channels.ChannelReceivedEventArgs.Message
  type: Property
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Channels/ChannelReceivedEventArgs.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: Message
    path: src/Microsoft.Health.Fhir.Proxy/Channels/ChannelReceivedEventArgs.cs
    startLine: 50
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Channels
  summary: "\nMessage received by the channel.\n"
  example: []
  syntax:
    content: public byte[] Message { get; }
    parameters: []
    return:
      type: System.Byte[]
    content.vb: Public ReadOnly Property Message As Byte()
  overload: Microsoft.Health.Fhir.Proxy.Channels.ChannelReceivedEventArgs.Message*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.Fhir.Proxy.Channels.ChannelReceivedEventArgs.Properties
  commentId: P:Microsoft.Health.Fhir.Proxy.Channels.ChannelReceivedEventArgs.Properties
  id: Properties
  parent: Microsoft.Health.Fhir.Proxy.Channels.ChannelReceivedEventArgs
  langs:
  - csharp
  - vb
  name: Properties
  nameWithType: ChannelReceivedEventArgs.Properties
  fullName: Microsoft.Health.Fhir.Proxy.Channels.ChannelReceivedEventArgs.Properties
  type: Property
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Channels/ChannelReceivedEventArgs.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: Properties
    path: src/Microsoft.Health.Fhir.Proxy/Channels/ChannelReceivedEventArgs.cs
    startLine: 55
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Channels
  summary: "\nGets additional properties passed on the channel receive.\n"
  example: []
  syntax:
    content: public IEnumerable<KeyValuePair<string, string>> Properties { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}
    content.vb: Public ReadOnly Property Properties As IEnumerable(Of KeyValuePair(Of String, String))
  overload: Microsoft.Health.Fhir.Proxy.Channels.ChannelReceivedEventArgs.Properties*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Microsoft.Health.Fhir.Proxy.Channels
  commentId: N:Microsoft.Health.Fhir.Proxy.Channels
  name: Microsoft.Health.Fhir.Proxy.Channels
  nameWithType: Microsoft.Health.Fhir.Proxy.Channels
  fullName: Microsoft.Health.Fhir.Proxy.Channels
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.EventArgs
  commentId: T:System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.EventArgs.Empty
  commentId: F:System.EventArgs.Empty
  parent: System.EventArgs
  isExternal: true
  name: Empty
  nameWithType: EventArgs.Empty
  fullName: System.EventArgs.Empty
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.Fhir.Proxy.Channels.ChannelReceivedEventArgs.#ctor*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Channels.ChannelReceivedEventArgs.#ctor
  name: ChannelReceivedEventArgs
  nameWithType: ChannelReceivedEventArgs.ChannelReceivedEventArgs
  fullName: Microsoft.Health.Fhir.Proxy.Channels.ChannelReceivedEventArgs.ChannelReceivedEventArgs
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<KeyValuePair<String, String>>
  nameWithType: IEnumerable<KeyValuePair<String, String>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, System.String>>
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of String, String))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.String, System.String))
  name.vb: IEnumerable(Of KeyValuePair(Of String, String))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.Health.Fhir.Proxy.Channels.ChannelReceivedEventArgs.Id*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Channels.ChannelReceivedEventArgs.Id
  name: Id
  nameWithType: ChannelReceivedEventArgs.Id
  fullName: Microsoft.Health.Fhir.Proxy.Channels.ChannelReceivedEventArgs.Id
- uid: Microsoft.Health.Fhir.Proxy.Channels.ChannelReceivedEventArgs.Name*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Channels.ChannelReceivedEventArgs.Name
  name: Name
  nameWithType: ChannelReceivedEventArgs.Name
  fullName: Microsoft.Health.Fhir.Proxy.Channels.ChannelReceivedEventArgs.Name
- uid: Microsoft.Health.Fhir.Proxy.Channels.ChannelReceivedEventArgs.Message*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Channels.ChannelReceivedEventArgs.Message
  name: Message
  nameWithType: ChannelReceivedEventArgs.Message
  fullName: Microsoft.Health.Fhir.Proxy.Channels.ChannelReceivedEventArgs.Message
- uid: Microsoft.Health.Fhir.Proxy.Channels.ChannelReceivedEventArgs.Properties*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Channels.ChannelReceivedEventArgs.Properties
  name: Properties
  nameWithType: ChannelReceivedEventArgs.Properties
  fullName: Microsoft.Health.Fhir.Proxy.Channels.ChannelReceivedEventArgs.Properties
