### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.Fhir.Proxy.Pipelines.WebPipelineManager
  commentId: T:Microsoft.Health.Fhir.Proxy.Pipelines.WebPipelineManager
  id: WebPipelineManager
  parent: Microsoft.Health.Fhir.Proxy.Pipelines
  children:
  - Microsoft.Health.Fhir.Proxy.Pipelines.WebPipelineManager.#ctor(Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings,Microsoft.Health.Fhir.Proxy.Bindings.PipelineBinding,Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings,Microsoft.ApplicationInsights.TelemetryClient,Microsoft.Extensions.Logging.ILogger)
  - Microsoft.Health.Fhir.Proxy.Pipelines.WebPipelineManager.AfterInput
  - Microsoft.Health.Fhir.Proxy.Pipelines.WebPipelineManager.AfterOutput
  - Microsoft.Health.Fhir.Proxy.Pipelines.WebPipelineManager.BeforeInput
  - Microsoft.Health.Fhir.Proxy.Pipelines.WebPipelineManager.BeforeOutput
  - Microsoft.Health.Fhir.Proxy.Pipelines.WebPipelineManager.ExecuteAsync(System.Net.Http.HttpRequestMessage)
  langs:
  - csharp
  - vb
  name: WebPipelineManager
  nameWithType: WebPipelineManager
  fullName: Microsoft.Health.Fhir.Proxy.Pipelines.WebPipelineManager
  type: Class
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Pipelines/WebPipelineManager.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: WebPipelineManager
    path: src/Microsoft.Health.Fhir.Proxy/Pipelines/WebPipelineManager.cs
    startLine: 15
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Pipelines
  summary: "\nManages input and output pipelines for a Web app.\n"
  example: []
  syntax:
    content: 'public sealed class WebPipelineManager : IPipelineManager<HttpRequestMessage, HttpResponseMessage>'
    content.vb: >-
      Public NotInheritable Class WebPipelineManager
          Implements IPipelineManager(Of HttpRequestMessage, HttpResponseMessage)
  inheritance:
  - System.Object
  implements:
  - Microsoft.Health.Fhir.Proxy.Pipelines.IPipelineManager{System.Net.Http.HttpRequestMessage,System.Net.Http.HttpResponseMessage}
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Microsoft.Health.Fhir.Proxy.Pipelines.WebPipelineManager.#ctor(Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings,Microsoft.Health.Fhir.Proxy.Bindings.PipelineBinding,Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings,Microsoft.ApplicationInsights.TelemetryClient,Microsoft.Extensions.Logging.ILogger)
  commentId: M:Microsoft.Health.Fhir.Proxy.Pipelines.WebPipelineManager.#ctor(Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings,Microsoft.Health.Fhir.Proxy.Bindings.PipelineBinding,Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings,Microsoft.ApplicationInsights.TelemetryClient,Microsoft.Extensions.Logging.ILogger)
  id: '#ctor(Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings,Microsoft.Health.Fhir.Proxy.Bindings.PipelineBinding,Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings,Microsoft.ApplicationInsights.TelemetryClient,Microsoft.Extensions.Logging.ILogger)'
  parent: Microsoft.Health.Fhir.Proxy.Pipelines.WebPipelineManager
  langs:
  - csharp
  - vb
  name: WebPipelineManager(PipelineSettings, PipelineBinding, PipelineSettings, TelemetryClient, ILogger)
  nameWithType: WebPipelineManager.WebPipelineManager(PipelineSettings, PipelineBinding, PipelineSettings, TelemetryClient, ILogger)
  fullName: Microsoft.Health.Fhir.Proxy.Pipelines.WebPipelineManager.WebPipelineManager(Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings, Microsoft.Health.Fhir.Proxy.Bindings.PipelineBinding, Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings, Microsoft.ApplicationInsights.TelemetryClient, Microsoft.Extensions.Logging.ILogger)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Pipelines/WebPipelineManager.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: .ctor
    path: src/Microsoft.Health.Fhir.Proxy/Pipelines/WebPipelineManager.cs
    startLine: 25
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Pipelines
  summary: "\nCreates an instance of WebPipelineManager.\n"
  example: []
  syntax:
    content: public WebPipelineManager(PipelineSettings input, PipelineBinding binding, PipelineSettings output, TelemetryClient client = null, ILogger logger = null)
    parameters:
    - id: input
      type: Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings
      description: Input pipeline settings.
    - id: binding
      type: Microsoft.Health.Fhir.Proxy.Bindings.PipelineBinding
      description: Binding between input and output pipelines.
    - id: output
      type: Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings
      description: Output pipeline settings.
    - id: client
      type: Microsoft.ApplicationInsights.TelemetryClient
      description: Telemetry cleint.
    - id: logger
      type: Microsoft.Extensions.Logging.ILogger
      description: ILogger
    content.vb: Public Sub New(input As PipelineSettings, binding As PipelineBinding, output As PipelineSettings, client As TelemetryClient = Nothing, logger As ILogger = Nothing)
  overload: Microsoft.Health.Fhir.Proxy.Pipelines.WebPipelineManager.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Fhir.Proxy.Pipelines.WebPipelineManager.BeforeInput
  commentId: P:Microsoft.Health.Fhir.Proxy.Pipelines.WebPipelineManager.BeforeInput
  id: BeforeInput
  parent: Microsoft.Health.Fhir.Proxy.Pipelines.WebPipelineManager
  langs:
  - csharp
  - vb
  name: BeforeInput
  nameWithType: WebPipelineManager.BeforeInput
  fullName: Microsoft.Health.Fhir.Proxy.Pipelines.WebPipelineManager.BeforeInput
  type: Property
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Pipelines/WebPipelineManager.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: BeforeInput
    path: src/Microsoft.Health.Fhir.Proxy/Pipelines/WebPipelineManager.cs
    startLine: 43
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Pipelines
  summary: "\nOptional function that executes prior to the input pipeline.\n"
  example: []
  syntax:
    content: public Func<OperationContext, OperationContext> BeforeInput { get; set; }
    parameters: []
    return:
      type: System.Func{Microsoft.Health.Fhir.Proxy.Pipelines.OperationContext,Microsoft.Health.Fhir.Proxy.Pipelines.OperationContext}
    content.vb: Public Property BeforeInput As Func(Of OperationContext, OperationContext)
  overload: Microsoft.Health.Fhir.Proxy.Pipelines.WebPipelineManager.BeforeInput*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Fhir.Proxy.Pipelines.WebPipelineManager.AfterInput
  commentId: P:Microsoft.Health.Fhir.Proxy.Pipelines.WebPipelineManager.AfterInput
  id: AfterInput
  parent: Microsoft.Health.Fhir.Proxy.Pipelines.WebPipelineManager
  langs:
  - csharp
  - vb
  name: AfterInput
  nameWithType: WebPipelineManager.AfterInput
  fullName: Microsoft.Health.Fhir.Proxy.Pipelines.WebPipelineManager.AfterInput
  type: Property
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Pipelines/WebPipelineManager.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: AfterInput
    path: src/Microsoft.Health.Fhir.Proxy/Pipelines/WebPipelineManager.cs
    startLine: 48
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Pipelines
  summary: "\nOptional function that executes after the input pipeline.\n"
  example: []
  syntax:
    content: public Func<OperationContext, OperationContext> AfterInput { get; set; }
    parameters: []
    return:
      type: System.Func{Microsoft.Health.Fhir.Proxy.Pipelines.OperationContext,Microsoft.Health.Fhir.Proxy.Pipelines.OperationContext}
    content.vb: Public Property AfterInput As Func(Of OperationContext, OperationContext)
  overload: Microsoft.Health.Fhir.Proxy.Pipelines.WebPipelineManager.AfterInput*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Fhir.Proxy.Pipelines.WebPipelineManager.BeforeOutput
  commentId: P:Microsoft.Health.Fhir.Proxy.Pipelines.WebPipelineManager.BeforeOutput
  id: BeforeOutput
  parent: Microsoft.Health.Fhir.Proxy.Pipelines.WebPipelineManager
  langs:
  - csharp
  - vb
  name: BeforeOutput
  nameWithType: WebPipelineManager.BeforeOutput
  fullName: Microsoft.Health.Fhir.Proxy.Pipelines.WebPipelineManager.BeforeOutput
  type: Property
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Pipelines/WebPipelineManager.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: BeforeOutput
    path: src/Microsoft.Health.Fhir.Proxy/Pipelines/WebPipelineManager.cs
    startLine: 53
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Pipelines
  summary: "\nOptional function that executes prior to the output pipeline.\n"
  example: []
  syntax:
    content: public Func<OperationContext, OperationContext> BeforeOutput { get; set; }
    parameters: []
    return:
      type: System.Func{Microsoft.Health.Fhir.Proxy.Pipelines.OperationContext,Microsoft.Health.Fhir.Proxy.Pipelines.OperationContext}
    content.vb: Public Property BeforeOutput As Func(Of OperationContext, OperationContext)
  overload: Microsoft.Health.Fhir.Proxy.Pipelines.WebPipelineManager.BeforeOutput*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Fhir.Proxy.Pipelines.WebPipelineManager.AfterOutput
  commentId: P:Microsoft.Health.Fhir.Proxy.Pipelines.WebPipelineManager.AfterOutput
  id: AfterOutput
  parent: Microsoft.Health.Fhir.Proxy.Pipelines.WebPipelineManager
  langs:
  - csharp
  - vb
  name: AfterOutput
  nameWithType: WebPipelineManager.AfterOutput
  fullName: Microsoft.Health.Fhir.Proxy.Pipelines.WebPipelineManager.AfterOutput
  type: Property
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Pipelines/WebPipelineManager.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: AfterOutput
    path: src/Microsoft.Health.Fhir.Proxy/Pipelines/WebPipelineManager.cs
    startLine: 58
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Pipelines
  summary: "\nOptional function that executes after the output pipeline.\n"
  example: []
  syntax:
    content: public Func<OperationContext, OperationContext> AfterOutput { get; set; }
    parameters: []
    return:
      type: System.Func{Microsoft.Health.Fhir.Proxy.Pipelines.OperationContext,Microsoft.Health.Fhir.Proxy.Pipelines.OperationContext}
    content.vb: Public Property AfterOutput As Func(Of OperationContext, OperationContext)
  overload: Microsoft.Health.Fhir.Proxy.Pipelines.WebPipelineManager.AfterOutput*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Fhir.Proxy.Pipelines.WebPipelineManager.ExecuteAsync(System.Net.Http.HttpRequestMessage)
  commentId: M:Microsoft.Health.Fhir.Proxy.Pipelines.WebPipelineManager.ExecuteAsync(System.Net.Http.HttpRequestMessage)
  id: ExecuteAsync(System.Net.Http.HttpRequestMessage)
  parent: Microsoft.Health.Fhir.Proxy.Pipelines.WebPipelineManager
  langs:
  - csharp
  - vb
  name: ExecuteAsync(HttpRequestMessage)
  nameWithType: WebPipelineManager.ExecuteAsync(HttpRequestMessage)
  fullName: Microsoft.Health.Fhir.Proxy.Pipelines.WebPipelineManager.ExecuteAsync(System.Net.Http.HttpRequestMessage)
  type: Method
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Pipelines/WebPipelineManager.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: ExecuteAsync
    path: src/Microsoft.Health.Fhir.Proxy/Pipelines/WebPipelineManager.cs
    startLine: 65
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Pipelines
  summary: "\nExecutes the all the configured components.\n"
  example: []
  syntax:
    content: public async Task<HttpResponseMessage> ExecuteAsync(HttpRequestMessage request)
    parameters:
    - id: request
      type: System.Net.Http.HttpRequestMessage
      description: HttpRequestMessage from Web app.
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: HttpResponseMessage for Web app.
    content.vb: Public Function ExecuteAsync(request As HttpRequestMessage) As Task(Of HttpResponseMessage)
  overload: Microsoft.Health.Fhir.Proxy.Pipelines.WebPipelineManager.ExecuteAsync*
  implements:
  - Microsoft.Health.Fhir.Proxy.Pipelines.IPipelineManager{System.Net.Http.HttpRequestMessage,System.Net.Http.HttpResponseMessage}.ExecuteAsync(System.Net.Http.HttpRequestMessage)
  modifiers.csharp:
  - public
  - async
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Health.Fhir.Proxy.Pipelines
  commentId: N:Microsoft.Health.Fhir.Proxy.Pipelines
  name: Microsoft.Health.Fhir.Proxy.Pipelines
  nameWithType: Microsoft.Health.Fhir.Proxy.Pipelines
  fullName: Microsoft.Health.Fhir.Proxy.Pipelines
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Health.Fhir.Proxy.Pipelines.IPipelineManager{System.Net.Http.HttpRequestMessage,System.Net.Http.HttpResponseMessage}
  commentId: T:Microsoft.Health.Fhir.Proxy.Pipelines.IPipelineManager{System.Net.Http.HttpRequestMessage,System.Net.Http.HttpResponseMessage}
  parent: Microsoft.Health.Fhir.Proxy.Pipelines
  definition: Microsoft.Health.Fhir.Proxy.Pipelines.IPipelineManager`2
  name: IPipelineManager<HttpRequestMessage, HttpResponseMessage>
  nameWithType: IPipelineManager<HttpRequestMessage, HttpResponseMessage>
  fullName: Microsoft.Health.Fhir.Proxy.Pipelines.IPipelineManager<System.Net.Http.HttpRequestMessage, System.Net.Http.HttpResponseMessage>
  nameWithType.vb: IPipelineManager(Of HttpRequestMessage, HttpResponseMessage)
  fullName.vb: Microsoft.Health.Fhir.Proxy.Pipelines.IPipelineManager(Of System.Net.Http.HttpRequestMessage, System.Net.Http.HttpResponseMessage)
  name.vb: IPipelineManager(Of HttpRequestMessage, HttpResponseMessage)
  spec.csharp:
  - uid: Microsoft.Health.Fhir.Proxy.Pipelines.IPipelineManager`2
    name: IPipelineManager
    nameWithType: IPipelineManager
    fullName: Microsoft.Health.Fhir.Proxy.Pipelines.IPipelineManager
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.Http.HttpRequestMessage
    name: HttpRequestMessage
    nameWithType: HttpRequestMessage
    fullName: System.Net.Http.HttpRequestMessage
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.Http.HttpResponseMessage
    name: HttpResponseMessage
    nameWithType: HttpResponseMessage
    fullName: System.Net.Http.HttpResponseMessage
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Health.Fhir.Proxy.Pipelines.IPipelineManager`2
    name: IPipelineManager
    nameWithType: IPipelineManager
    fullName: Microsoft.Health.Fhir.Proxy.Pipelines.IPipelineManager
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Net.Http.HttpRequestMessage
    name: HttpRequestMessage
    nameWithType: HttpRequestMessage
    fullName: System.Net.Http.HttpRequestMessage
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.Http.HttpResponseMessage
    name: HttpResponseMessage
    nameWithType: HttpResponseMessage
    fullName: System.Net.Http.HttpResponseMessage
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.Fhir.Proxy.Pipelines.IPipelineManager`2
  commentId: T:Microsoft.Health.Fhir.Proxy.Pipelines.IPipelineManager`2
  name: IPipelineManager<TRequest, TResponse>
  nameWithType: IPipelineManager<TRequest, TResponse>
  fullName: Microsoft.Health.Fhir.Proxy.Pipelines.IPipelineManager<TRequest, TResponse>
  nameWithType.vb: IPipelineManager(Of TRequest, TResponse)
  fullName.vb: Microsoft.Health.Fhir.Proxy.Pipelines.IPipelineManager(Of TRequest, TResponse)
  name.vb: IPipelineManager(Of TRequest, TResponse)
  spec.csharp:
  - uid: Microsoft.Health.Fhir.Proxy.Pipelines.IPipelineManager`2
    name: IPipelineManager
    nameWithType: IPipelineManager
    fullName: Microsoft.Health.Fhir.Proxy.Pipelines.IPipelineManager
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Health.Fhir.Proxy.Pipelines.IPipelineManager`2
    name: IPipelineManager
    nameWithType: IPipelineManager
    fullName: Microsoft.Health.Fhir.Proxy.Pipelines.IPipelineManager
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Fhir.Proxy.Pipelines.WebPipelineManager.#ctor*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Pipelines.WebPipelineManager.#ctor
  name: WebPipelineManager
  nameWithType: WebPipelineManager.WebPipelineManager
  fullName: Microsoft.Health.Fhir.Proxy.Pipelines.WebPipelineManager.WebPipelineManager
- uid: Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings
  commentId: T:Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings
  parent: Microsoft.Health.Fhir.Proxy.Configuration
  name: PipelineSettings
  nameWithType: PipelineSettings
  fullName: Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings
- uid: Microsoft.Health.Fhir.Proxy.Bindings.PipelineBinding
  commentId: T:Microsoft.Health.Fhir.Proxy.Bindings.PipelineBinding
  parent: Microsoft.Health.Fhir.Proxy.Bindings
  name: PipelineBinding
  nameWithType: PipelineBinding
  fullName: Microsoft.Health.Fhir.Proxy.Bindings.PipelineBinding
- uid: Microsoft.ApplicationInsights.TelemetryClient
  commentId: T:Microsoft.ApplicationInsights.TelemetryClient
  parent: Microsoft.ApplicationInsights
  isExternal: true
  name: TelemetryClient
  nameWithType: TelemetryClient
  fullName: Microsoft.ApplicationInsights.TelemetryClient
- uid: Microsoft.Extensions.Logging.ILogger
  commentId: T:Microsoft.Extensions.Logging.ILogger
  parent: Microsoft.Extensions.Logging
  isExternal: true
  name: ILogger
  nameWithType: ILogger
  fullName: Microsoft.Extensions.Logging.ILogger
- uid: Microsoft.Health.Fhir.Proxy.Configuration
  commentId: N:Microsoft.Health.Fhir.Proxy.Configuration
  name: Microsoft.Health.Fhir.Proxy.Configuration
  nameWithType: Microsoft.Health.Fhir.Proxy.Configuration
  fullName: Microsoft.Health.Fhir.Proxy.Configuration
- uid: Microsoft.Health.Fhir.Proxy.Bindings
  commentId: N:Microsoft.Health.Fhir.Proxy.Bindings
  name: Microsoft.Health.Fhir.Proxy.Bindings
  nameWithType: Microsoft.Health.Fhir.Proxy.Bindings
  fullName: Microsoft.Health.Fhir.Proxy.Bindings
- uid: Microsoft.ApplicationInsights
  commentId: N:Microsoft.ApplicationInsights
  isExternal: true
  name: Microsoft.ApplicationInsights
  nameWithType: Microsoft.ApplicationInsights
  fullName: Microsoft.ApplicationInsights
- uid: Microsoft.Extensions.Logging
  commentId: N:Microsoft.Extensions.Logging
  isExternal: true
  name: Microsoft.Extensions.Logging
  nameWithType: Microsoft.Extensions.Logging
  fullName: Microsoft.Extensions.Logging
- uid: Microsoft.Health.Fhir.Proxy.Pipelines.WebPipelineManager.BeforeInput*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Pipelines.WebPipelineManager.BeforeInput
  name: BeforeInput
  nameWithType: WebPipelineManager.BeforeInput
  fullName: Microsoft.Health.Fhir.Proxy.Pipelines.WebPipelineManager.BeforeInput
- uid: System.Func{Microsoft.Health.Fhir.Proxy.Pipelines.OperationContext,Microsoft.Health.Fhir.Proxy.Pipelines.OperationContext}
  commentId: T:System.Func{Microsoft.Health.Fhir.Proxy.Pipelines.OperationContext,Microsoft.Health.Fhir.Proxy.Pipelines.OperationContext}
  parent: System
  definition: System.Func`2
  name: Func<OperationContext, OperationContext>
  nameWithType: Func<OperationContext, OperationContext>
  fullName: System.Func<Microsoft.Health.Fhir.Proxy.Pipelines.OperationContext, Microsoft.Health.Fhir.Proxy.Pipelines.OperationContext>
  nameWithType.vb: Func(Of OperationContext, OperationContext)
  fullName.vb: System.Func(Of Microsoft.Health.Fhir.Proxy.Pipelines.OperationContext, Microsoft.Health.Fhir.Proxy.Pipelines.OperationContext)
  name.vb: Func(Of OperationContext, OperationContext)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.Fhir.Proxy.Pipelines.OperationContext
    name: OperationContext
    nameWithType: OperationContext
    fullName: Microsoft.Health.Fhir.Proxy.Pipelines.OperationContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.Fhir.Proxy.Pipelines.OperationContext
    name: OperationContext
    nameWithType: OperationContext
    fullName: Microsoft.Health.Fhir.Proxy.Pipelines.OperationContext
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.Fhir.Proxy.Pipelines.OperationContext
    name: OperationContext
    nameWithType: OperationContext
    fullName: Microsoft.Health.Fhir.Proxy.Pipelines.OperationContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.Fhir.Proxy.Pipelines.OperationContext
    name: OperationContext
    nameWithType: OperationContext
    fullName: Microsoft.Health.Fhir.Proxy.Pipelines.OperationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Fhir.Proxy.Pipelines.WebPipelineManager.AfterInput*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Pipelines.WebPipelineManager.AfterInput
  name: AfterInput
  nameWithType: WebPipelineManager.AfterInput
  fullName: Microsoft.Health.Fhir.Proxy.Pipelines.WebPipelineManager.AfterInput
- uid: Microsoft.Health.Fhir.Proxy.Pipelines.WebPipelineManager.BeforeOutput*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Pipelines.WebPipelineManager.BeforeOutput
  name: BeforeOutput
  nameWithType: WebPipelineManager.BeforeOutput
  fullName: Microsoft.Health.Fhir.Proxy.Pipelines.WebPipelineManager.BeforeOutput
- uid: Microsoft.Health.Fhir.Proxy.Pipelines.WebPipelineManager.AfterOutput*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Pipelines.WebPipelineManager.AfterOutput
  name: AfterOutput
  nameWithType: WebPipelineManager.AfterOutput
  fullName: Microsoft.Health.Fhir.Proxy.Pipelines.WebPipelineManager.AfterOutput
- uid: Microsoft.Health.Fhir.Proxy.Pipelines.WebPipelineManager.ExecuteAsync*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Pipelines.WebPipelineManager.ExecuteAsync
  name: ExecuteAsync
  nameWithType: WebPipelineManager.ExecuteAsync
  fullName: Microsoft.Health.Fhir.Proxy.Pipelines.WebPipelineManager.ExecuteAsync
- uid: Microsoft.Health.Fhir.Proxy.Pipelines.IPipelineManager{System.Net.Http.HttpRequestMessage,System.Net.Http.HttpResponseMessage}.ExecuteAsync(System.Net.Http.HttpRequestMessage)
  commentId: M:Microsoft.Health.Fhir.Proxy.Pipelines.IPipelineManager{System.Net.Http.HttpRequestMessage,System.Net.Http.HttpResponseMessage}.ExecuteAsync(System.Net.Http.HttpRequestMessage)
  parent: Microsoft.Health.Fhir.Proxy.Pipelines.IPipelineManager{System.Net.Http.HttpRequestMessage,System.Net.Http.HttpResponseMessage}
  definition: Microsoft.Health.Fhir.Proxy.Pipelines.IPipelineManager`2.ExecuteAsync(`0)
  name: ExecuteAsync(HttpRequestMessage)
  nameWithType: IPipelineManager<HttpRequestMessage, HttpResponseMessage>.ExecuteAsync(HttpRequestMessage)
  fullName: Microsoft.Health.Fhir.Proxy.Pipelines.IPipelineManager<System.Net.Http.HttpRequestMessage, System.Net.Http.HttpResponseMessage>.ExecuteAsync(System.Net.Http.HttpRequestMessage)
  nameWithType.vb: IPipelineManager(Of HttpRequestMessage, HttpResponseMessage).ExecuteAsync(HttpRequestMessage)
  fullName.vb: Microsoft.Health.Fhir.Proxy.Pipelines.IPipelineManager(Of System.Net.Http.HttpRequestMessage, System.Net.Http.HttpResponseMessage).ExecuteAsync(System.Net.Http.HttpRequestMessage)
  spec.csharp:
  - uid: Microsoft.Health.Fhir.Proxy.Pipelines.IPipelineManager`2.ExecuteAsync(`0)
    name: ExecuteAsync
    nameWithType: IPipelineManager<HttpRequestMessage, HttpResponseMessage>.ExecuteAsync
    fullName: Microsoft.Health.Fhir.Proxy.Pipelines.IPipelineManager<System.Net.Http.HttpRequestMessage, System.Net.Http.HttpResponseMessage>.ExecuteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Net.Http.HttpRequestMessage
    name: HttpRequestMessage
    nameWithType: HttpRequestMessage
    fullName: System.Net.Http.HttpRequestMessage
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Fhir.Proxy.Pipelines.IPipelineManager`2.ExecuteAsync(`0)
    name: ExecuteAsync
    nameWithType: IPipelineManager(Of HttpRequestMessage, HttpResponseMessage).ExecuteAsync
    fullName: Microsoft.Health.Fhir.Proxy.Pipelines.IPipelineManager(Of System.Net.Http.HttpRequestMessage, System.Net.Http.HttpResponseMessage).ExecuteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Net.Http.HttpRequestMessage
    name: HttpRequestMessage
    nameWithType: HttpRequestMessage
    fullName: System.Net.Http.HttpRequestMessage
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Net.Http.HttpRequestMessage
  commentId: T:System.Net.Http.HttpRequestMessage
  parent: System.Net.Http
  isExternal: true
  name: HttpRequestMessage
  nameWithType: HttpRequestMessage
  fullName: System.Net.Http.HttpRequestMessage
- uid: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
  commentId: T:System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<HttpResponseMessage>
  nameWithType: Task<HttpResponseMessage>
  fullName: System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage>
  nameWithType.vb: Task(Of HttpResponseMessage)
  fullName.vb: System.Threading.Tasks.Task(Of System.Net.Http.HttpResponseMessage)
  name.vb: Task(Of HttpResponseMessage)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.Http.HttpResponseMessage
    name: HttpResponseMessage
    nameWithType: HttpResponseMessage
    fullName: System.Net.Http.HttpResponseMessage
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Net.Http.HttpResponseMessage
    name: HttpResponseMessage
    nameWithType: HttpResponseMessage
    fullName: System.Net.Http.HttpResponseMessage
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Fhir.Proxy.Pipelines.IPipelineManager`2.ExecuteAsync(`0)
  commentId: M:Microsoft.Health.Fhir.Proxy.Pipelines.IPipelineManager`2.ExecuteAsync(`0)
  name: ExecuteAsync(TRequest)
  nameWithType: IPipelineManager<TRequest, TResponse>.ExecuteAsync(TRequest)
  fullName: Microsoft.Health.Fhir.Proxy.Pipelines.IPipelineManager<TRequest, TResponse>.ExecuteAsync(TRequest)
  nameWithType.vb: IPipelineManager(Of TRequest, TResponse).ExecuteAsync(TRequest)
  fullName.vb: Microsoft.Health.Fhir.Proxy.Pipelines.IPipelineManager(Of TRequest, TResponse).ExecuteAsync(TRequest)
  spec.csharp:
  - uid: Microsoft.Health.Fhir.Proxy.Pipelines.IPipelineManager`2.ExecuteAsync(`0)
    name: ExecuteAsync
    nameWithType: IPipelineManager<TRequest, TResponse>.ExecuteAsync
    fullName: Microsoft.Health.Fhir.Proxy.Pipelines.IPipelineManager<TRequest, TResponse>.ExecuteAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Health.Fhir.Proxy.Pipelines.IPipelineManager`2.ExecuteAsync(`0)
    name: ExecuteAsync
    nameWithType: IPipelineManager(Of TRequest, TResponse).ExecuteAsync
    fullName: Microsoft.Health.Fhir.Proxy.Pipelines.IPipelineManager(Of TRequest, TResponse).ExecuteAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Net.Http
  commentId: N:System.Net.Http
  isExternal: true
  name: System.Net.Http
  nameWithType: System.Net.Http
  fullName: System.Net.Http
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
