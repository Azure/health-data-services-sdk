### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions
  commentId: T:Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions
  id: JTokenExtensions
  parent: Microsoft.Health.Fhir.Proxy.Json
  children:
  - Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.Exists(Newtonsoft.Json.Linq.JToken,System.String)
  - Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.GetArray(Newtonsoft.Json.Linq.JToken,System.String,System.Boolean)
  - Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.GetArrayItem``1(Newtonsoft.Json.Linq.JToken,System.String,System.Boolean)
  - Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.GetToken(Newtonsoft.Json.Linq.JToken,System.String,System.Boolean)
  - Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.GetValue``1(Newtonsoft.Json.Linq.JToken,System.Boolean)
  - Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.GetValue``1(Newtonsoft.Json.Linq.JToken,System.String,System.Boolean)
  - Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.IsArray(Newtonsoft.Json.Linq.JToken)
  - Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.IsArray(Newtonsoft.Json.Linq.JToken,System.String)
  - Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.IsMatch(Newtonsoft.Json.Linq.JToken,System.String,System.String)
  - Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.IsMatch``1(Newtonsoft.Json.Linq.JToken,System.String,``0)
  - Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.IsNullOrEmpty(Newtonsoft.Json.Linq.JToken)
  - Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.IsNullOrEmpty(Newtonsoft.Json.Linq.JToken,System.String)
  langs:
  - csharp
  - vb
  name: JTokenExtensions
  nameWithType: JTokenExtensions
  fullName: Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions
  type: Class
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Json/JTokenExtensions.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: JTokenExtensions
    path: Json/JTokenExtensions.cs
    startLine: 8
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Json
  summary: "\nExtensions for JToken.\n"
  example: []
  syntax:
    content: public static class JTokenExtensions
    content.vb: Public Module JTokenExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.Exists(Newtonsoft.Json.Linq.JToken,System.String)
  commentId: M:Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.Exists(Newtonsoft.Json.Linq.JToken,System.String)
  id: Exists(Newtonsoft.Json.Linq.JToken,System.String)
  isExtensionMethod: true
  parent: Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions
  langs:
  - csharp
  - vb
  name: Exists(JToken, String)
  nameWithType: JTokenExtensions.Exists(JToken, String)
  fullName: Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.Exists(Newtonsoft.Json.Linq.JToken, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Json/JTokenExtensions.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: Exists
    path: Json/JTokenExtensions.cs
    startLine: 16
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Json
  summary: "\nIndicates whether a token exists found by JPath.\n"
  example: []
  syntax:
    content: public static bool Exists(this JToken jtoken, string jpath)
    parameters:
    - id: jtoken
      type: Newtonsoft.Json.Linq.JToken
      description: JToken root.
    - id: jpath
      type: System.String
      description: JPath to test whether the JToken exists.
    return:
      type: System.Boolean
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Exists(jtoken As JToken, jpath As String) As Boolean
  overload: Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.Exists*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.IsMatch(Newtonsoft.Json.Linq.JToken,System.String,System.String)
  commentId: M:Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.IsMatch(Newtonsoft.Json.Linq.JToken,System.String,System.String)
  id: IsMatch(Newtonsoft.Json.Linq.JToken,System.String,System.String)
  isExtensionMethod: true
  parent: Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions
  langs:
  - csharp
  - vb
  name: IsMatch(JToken, String, String)
  nameWithType: JTokenExtensions.IsMatch(JToken, String, String)
  fullName: Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.IsMatch(Newtonsoft.Json.Linq.JToken, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Json/JTokenExtensions.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: IsMatch
    path: Json/JTokenExtensions.cs
    startLine: 28
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Json
  summary: "\nIndicates whether the value of a token found by JPath is a match.\n"
  example: []
  syntax:
    content: public static bool IsMatch(this JToken jtoken, string jpath, string value)
    parameters:
    - id: jtoken
      type: Newtonsoft.Json.Linq.JToken
      description: JToken root.
    - id: jpath
      type: System.String
      description: JPath to test for JToken.
    - id: value
      type: System.String
      description: Value to test for JToken in path.
    return:
      type: System.Boolean
      description: True is match; otherwise false.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsMatch(jtoken As JToken, jpath As String, value As String) As Boolean
  overload: Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.IsMatch*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.IsMatch``1(Newtonsoft.Json.Linq.JToken,System.String,``0)
  commentId: M:Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.IsMatch``1(Newtonsoft.Json.Linq.JToken,System.String,``0)
  id: IsMatch``1(Newtonsoft.Json.Linq.JToken,System.String,``0)
  isExtensionMethod: true
  parent: Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions
  langs:
  - csharp
  - vb
  name: IsMatch<T>(JToken, String, T)
  nameWithType: JTokenExtensions.IsMatch<T>(JToken, String, T)
  fullName: Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.IsMatch<T>(Newtonsoft.Json.Linq.JToken, System.String, T)
  type: Method
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Json/JTokenExtensions.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: IsMatch
    path: Json/JTokenExtensions.cs
    startLine: 48
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Json
  summary: "\nIndicates whether the value of a token found by JPath is a match.\n"
  example: []
  syntax:
    content: public static bool IsMatch<T>(this JToken jtoken, string jpath, T value)
    parameters:
    - id: jtoken
      type: Newtonsoft.Json.Linq.JToken
      description: JToken root.
    - id: jpath
      type: System.String
      description: JPath to test for JToken.
    - id: value
      type: '{T}'
      description: Value to test for JToken in path.
    typeParameters:
    - id: T
      description: Type of value.
    return:
      type: System.Boolean
      description: True is match; otherwise false.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsMatch(Of T)(jtoken As JToken, jpath As String, value As T) As Boolean
  overload: Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.IsMatch*
  nameWithType.vb: JTokenExtensions.IsMatch(Of T)(JToken, String, T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.IsMatch(Of T)(Newtonsoft.Json.Linq.JToken, System.String, T)
  name.vb: IsMatch(Of T)(JToken, String, T)
- uid: Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.GetArray(Newtonsoft.Json.Linq.JToken,System.String,System.Boolean)
  commentId: M:Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.GetArray(Newtonsoft.Json.Linq.JToken,System.String,System.Boolean)
  id: GetArray(Newtonsoft.Json.Linq.JToken,System.String,System.Boolean)
  isExtensionMethod: true
  parent: Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions
  langs:
  - csharp
  - vb
  name: GetArray(JToken, String, Boolean)
  nameWithType: JTokenExtensions.GetArray(JToken, String, Boolean)
  fullName: Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.GetArray(Newtonsoft.Json.Linq.JToken, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Json/JTokenExtensions.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: GetArray
    path: Json/JTokenExtensions.cs
    startLine: 68
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Json
  summary: "\nGets JArray from a JPath from the root JToKen; otherwise null if array not present.\n"
  example: []
  syntax:
    content: public static JArray GetArray(this JToken token, string jpath, bool throwIfNull = false)
    parameters:
    - id: token
      type: Newtonsoft.Json.Linq.JToken
      description: JToken root.
    - id: jpath
      type: System.String
      description: JPath to array.
    - id: throwIfNull
      type: System.Boolean
      description: If true throws and exception is array not found; otherwise null.
    return:
      type: Newtonsoft.Json.Linq.JArray
      description: JArray is found by JPath; otherwise if throwIfNull is true throws an exception; otherwise returns null.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetArray(token As JToken, jpath As String, throwIfNull As Boolean = False) As JArray
  overload: Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.GetArray*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.IsArray(Newtonsoft.Json.Linq.JToken,System.String)
  commentId: M:Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.IsArray(Newtonsoft.Json.Linq.JToken,System.String)
  id: IsArray(Newtonsoft.Json.Linq.JToken,System.String)
  isExtensionMethod: true
  parent: Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions
  langs:
  - csharp
  - vb
  name: IsArray(JToken, String)
  nameWithType: JTokenExtensions.IsArray(JToken, String)
  fullName: Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.IsArray(Newtonsoft.Json.Linq.JToken, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Json/JTokenExtensions.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: IsArray
    path: Json/JTokenExtensions.cs
    startLine: 106
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Json
  summary: "\nIndicates true when an array is found via JPath.\n"
  example: []
  syntax:
    content: public static bool IsArray(this JToken token, string jpath)
    parameters:
    - id: token
      type: Newtonsoft.Json.Linq.JToken
      description: JToken root.
    - id: jpath
      type: System.String
      description: JPath to array.
    return:
      type: System.Boolean
      description: True if JPath finds an array; otherwise false.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsArray(token As JToken, jpath As String) As Boolean
  overload: Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.IsArray*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.IsArray(Newtonsoft.Json.Linq.JToken)
  commentId: M:Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.IsArray(Newtonsoft.Json.Linq.JToken)
  id: IsArray(Newtonsoft.Json.Linq.JToken)
  isExtensionMethod: true
  parent: Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions
  langs:
  - csharp
  - vb
  name: IsArray(JToken)
  nameWithType: JTokenExtensions.IsArray(JToken)
  fullName: Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.IsArray(Newtonsoft.Json.Linq.JToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Json/JTokenExtensions.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: IsArray
    path: Json/JTokenExtensions.cs
    startLine: 117
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Json
  summary: "\nIndicates true when a JToken is an array; otherwise false.\n"
  example: []
  syntax:
    content: public static bool IsArray(this JToken token)
    parameters:
    - id: token
      type: Newtonsoft.Json.Linq.JToken
      description: JToken to test.
    return:
      type: System.Boolean
      description: True is JToken is an array; otherwise false.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsArray(token As JToken) As Boolean
  overload: Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.IsArray*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.GetArrayItem``1(Newtonsoft.Json.Linq.JToken,System.String,System.Boolean)
  commentId: M:Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.GetArrayItem``1(Newtonsoft.Json.Linq.JToken,System.String,System.Boolean)
  id: GetArrayItem``1(Newtonsoft.Json.Linq.JToken,System.String,System.Boolean)
  isExtensionMethod: true
  parent: Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions
  langs:
  - csharp
  - vb
  name: GetArrayItem<T>(JToken, String, Boolean)
  nameWithType: JTokenExtensions.GetArrayItem<T>(JToken, String, Boolean)
  fullName: Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.GetArrayItem<T>(Newtonsoft.Json.Linq.JToken, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Json/JTokenExtensions.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: GetArrayItem
    path: Json/JTokenExtensions.cs
    startLine: 130
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Json
  summary: "\nGets the value of an item in a JArray.\n"
  example: []
  syntax:
    content: public static T GetArrayItem<T>(this JToken token, string jpath, bool throwIfNull = false)
    parameters:
    - id: token
      type: Newtonsoft.Json.Linq.JToken
      description: JToken root.
    - id: jpath
      type: System.String
      description: JPath to array.
    - id: throwIfNull
      type: System.Boolean
      description: Determines whether an exception is throw if the item value cannot be returned; otherwise returns null.
    typeParameters:
    - id: T
      description: Data type of item value.
    return:
      type: '{T}'
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetArrayItem(Of T)(token As JToken, jpath As String, throwIfNull As Boolean = False) As T
  overload: Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.GetArrayItem*
  nameWithType.vb: JTokenExtensions.GetArrayItem(Of T)(JToken, String, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.GetArrayItem(Of T)(Newtonsoft.Json.Linq.JToken, System.String, System.Boolean)
  name.vb: GetArrayItem(Of T)(JToken, String, Boolean)
- uid: Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.GetValue``1(Newtonsoft.Json.Linq.JToken,System.Boolean)
  commentId: M:Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.GetValue``1(Newtonsoft.Json.Linq.JToken,System.Boolean)
  id: GetValue``1(Newtonsoft.Json.Linq.JToken,System.Boolean)
  isExtensionMethod: true
  parent: Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions
  langs:
  - csharp
  - vb
  name: GetValue<T>(JToken, Boolean)
  nameWithType: JTokenExtensions.GetValue<T>(JToken, Boolean)
  fullName: Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.GetValue<T>(Newtonsoft.Json.Linq.JToken, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Json/JTokenExtensions.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: GetValue
    path: Json/JTokenExtensions.cs
    startLine: 154
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Json
  summary: "\nGets a value from a JToken.\n"
  example: []
  syntax:
    content: public static T GetValue<T>(this JToken token, bool throwIfNull = false)
    parameters:
    - id: token
      type: Newtonsoft.Json.Linq.JToken
      description: JToken to get value.
    - id: throwIfNull
      type: System.Boolean
      description: Determines whether an exception is throw if the item value cannot be returned; otherwise returns null.
    typeParameters:
    - id: T
      description: Data type of value.
    return:
      type: '{T}'
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetValue(Of T)(token As JToken, throwIfNull As Boolean = False) As T
  overload: Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.GetValue*
  nameWithType.vb: JTokenExtensions.GetValue(Of T)(JToken, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.GetValue(Of T)(Newtonsoft.Json.Linq.JToken, System.Boolean)
  name.vb: GetValue(Of T)(JToken, Boolean)
- uid: Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.GetValue``1(Newtonsoft.Json.Linq.JToken,System.String,System.Boolean)
  commentId: M:Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.GetValue``1(Newtonsoft.Json.Linq.JToken,System.String,System.Boolean)
  id: GetValue``1(Newtonsoft.Json.Linq.JToken,System.String,System.Boolean)
  isExtensionMethod: true
  parent: Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions
  langs:
  - csharp
  - vb
  name: GetValue<T>(JToken, String, Boolean)
  nameWithType: JTokenExtensions.GetValue<T>(JToken, String, Boolean)
  fullName: Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.GetValue<T>(Newtonsoft.Json.Linq.JToken, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Json/JTokenExtensions.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: GetValue
    path: Json/JTokenExtensions.cs
    startLine: 183
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Json
  summary: "\nGets a value from a JToken root via JPath.\n"
  example: []
  syntax:
    content: public static T GetValue<T>(this JToken token, string jpath, bool throwIfNull = false)
    parameters:
    - id: token
      type: Newtonsoft.Json.Linq.JToken
      description: ''
    - id: jpath
      type: System.String
      description: ''
    - id: throwIfNull
      type: System.Boolean
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: '{T}'
      description: Value of token if found.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetValue(Of T)(token As JToken, jpath As String, throwIfNull As Boolean = False) As T
  overload: Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.GetValue*
  nameWithType.vb: JTokenExtensions.GetValue(Of T)(JToken, String, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.GetValue(Of T)(Newtonsoft.Json.Linq.JToken, System.String, System.Boolean)
  name.vb: GetValue(Of T)(JToken, String, Boolean)
- uid: Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.IsNullOrEmpty(Newtonsoft.Json.Linq.JToken,System.String)
  commentId: M:Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.IsNullOrEmpty(Newtonsoft.Json.Linq.JToken,System.String)
  id: IsNullOrEmpty(Newtonsoft.Json.Linq.JToken,System.String)
  isExtensionMethod: true
  parent: Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions
  langs:
  - csharp
  - vb
  name: IsNullOrEmpty(JToken, String)
  nameWithType: JTokenExtensions.IsNullOrEmpty(JToken, String)
  fullName: Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.IsNullOrEmpty(Newtonsoft.Json.Linq.JToken, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Json/JTokenExtensions.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: IsNullOrEmpty
    path: Json/JTokenExtensions.cs
    startLine: 216
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Json
  summary: "\nIndicates true when a value found by a JPath is null or empty; otherwise false.\n"
  example: []
  syntax:
    content: public static bool IsNullOrEmpty(this JToken token, string jpath)
    parameters:
    - id: token
      type: Newtonsoft.Json.Linq.JToken
      description: ''
    - id: jpath
      type: System.String
      description: ''
    return:
      type: System.Boolean
      description: True if the token found is null or empty; otherwise false.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsNullOrEmpty(token As JToken, jpath As String) As Boolean
  overload: Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.IsNullOrEmpty*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.IsNullOrEmpty(Newtonsoft.Json.Linq.JToken)
  commentId: M:Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.IsNullOrEmpty(Newtonsoft.Json.Linq.JToken)
  id: IsNullOrEmpty(Newtonsoft.Json.Linq.JToken)
  isExtensionMethod: true
  parent: Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions
  langs:
  - csharp
  - vb
  name: IsNullOrEmpty(JToken)
  nameWithType: JTokenExtensions.IsNullOrEmpty(JToken)
  fullName: Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.IsNullOrEmpty(Newtonsoft.Json.Linq.JToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Json/JTokenExtensions.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: IsNullOrEmpty
    path: Json/JTokenExtensions.cs
    startLine: 232
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Json
  summary: "\nIndicates true when a JToken value is null or empty; otherwise false.\n"
  example: []
  syntax:
    content: public static bool IsNullOrEmpty(this JToken token)
    parameters:
    - id: token
      type: Newtonsoft.Json.Linq.JToken
      description: ''
    return:
      type: System.Boolean
      description: True is the token is null or empty; otherwise false.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsNullOrEmpty(token As JToken) As Boolean
  overload: Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.IsNullOrEmpty*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.GetToken(Newtonsoft.Json.Linq.JToken,System.String,System.Boolean)
  commentId: M:Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.GetToken(Newtonsoft.Json.Linq.JToken,System.String,System.Boolean)
  id: GetToken(Newtonsoft.Json.Linq.JToken,System.String,System.Boolean)
  isExtensionMethod: true
  parent: Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions
  langs:
  - csharp
  - vb
  name: GetToken(JToken, String, Boolean)
  nameWithType: JTokenExtensions.GetToken(JToken, String, Boolean)
  fullName: Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.GetToken(Newtonsoft.Json.Linq.JToken, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Json/JTokenExtensions.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: GetToken
    path: Json/JTokenExtensions.cs
    startLine: 248
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Json
  summary: "\nGets a JToken from a JPath.\n"
  example: []
  syntax:
    content: public static JToken GetToken(this JToken token, string jpath, bool throwIfNull = false)
    parameters:
    - id: token
      type: Newtonsoft.Json.Linq.JToken
      description: JToken root.
    - id: jpath
      type: System.String
      description: JPath to token.
    - id: throwIfNull
      type: System.Boolean
      description: If true throws an exception if a token is not found; otherwise is false returns null.
    return:
      type: Newtonsoft.Json.Linq.JToken
      description: JToken if found.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetToken(token As JToken, jpath As String, throwIfNull As Boolean = False) As JToken
  overload: Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.GetToken*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Microsoft.Health.Fhir.Proxy.Json
  commentId: N:Microsoft.Health.Fhir.Proxy.Json
  name: Microsoft.Health.Fhir.Proxy.Json
  nameWithType: Microsoft.Health.Fhir.Proxy.Json
  fullName: Microsoft.Health.Fhir.Proxy.Json
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.Exists*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.Exists
  name: Exists
  nameWithType: JTokenExtensions.Exists
  fullName: Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.Exists
- uid: Newtonsoft.Json.Linq.JToken
  commentId: T:Newtonsoft.Json.Linq.JToken
  parent: Newtonsoft.Json.Linq
  isExternal: true
  name: JToken
  nameWithType: JToken
  fullName: Newtonsoft.Json.Linq.JToken
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Newtonsoft.Json.Linq
  commentId: N:Newtonsoft.Json.Linq
  isExternal: true
  name: Newtonsoft.Json.Linq
  nameWithType: Newtonsoft.Json.Linq
  fullName: Newtonsoft.Json.Linq
- uid: Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.IsMatch*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.IsMatch
  name: IsMatch
  nameWithType: JTokenExtensions.IsMatch
  fullName: Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.IsMatch
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.GetArray*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.GetArray
  name: GetArray
  nameWithType: JTokenExtensions.GetArray
  fullName: Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.GetArray
- uid: Newtonsoft.Json.Linq.JArray
  commentId: T:Newtonsoft.Json.Linq.JArray
  parent: Newtonsoft.Json.Linq
  isExternal: true
  name: JArray
  nameWithType: JArray
  fullName: Newtonsoft.Json.Linq.JArray
- uid: Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.IsArray*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.IsArray
  name: IsArray
  nameWithType: JTokenExtensions.IsArray
  fullName: Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.IsArray
- uid: Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.GetArrayItem*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.GetArrayItem
  name: GetArrayItem
  nameWithType: JTokenExtensions.GetArrayItem
  fullName: Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.GetArrayItem
- uid: Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.GetValue*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.GetValue
  name: GetValue
  nameWithType: JTokenExtensions.GetValue
  fullName: Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.GetValue
- uid: Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.IsNullOrEmpty*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.IsNullOrEmpty
  name: IsNullOrEmpty
  nameWithType: JTokenExtensions.IsNullOrEmpty
  fullName: Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.IsNullOrEmpty
- uid: Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.GetToken*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.GetToken
  name: GetToken
  nameWithType: JTokenExtensions.GetToken
  fullName: Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.GetToken
