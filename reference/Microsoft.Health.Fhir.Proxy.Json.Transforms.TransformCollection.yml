### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection
  commentId: T:Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection
  id: TransformCollection
  parent: Microsoft.Health.Fhir.Proxy.Json.Transforms
  children:
  - Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.#ctor
  - Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.Add(Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform)
  - Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.Clear
  - Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.Contains(Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform)
  - Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.CopyTo(Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform[],System.Int32)
  - Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.Count
  - Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.GetEnumerator
  - Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.IndexOf(Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform)
  - Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.Insert(System.Int32,Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform)
  - Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.IsReadOnly
  - Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.Item(System.Int32)
  - Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.Remove(Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform)
  - Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.RemoveAt(System.Int32)
  - Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.System#Collections#IEnumerable#GetEnumerator
  langs:
  - csharp
  - vb
  name: TransformCollection
  nameWithType: TransformCollection
  fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection
  type: Class
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Json/Transforms/TransformCollection.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: TransformCollection
    path: src/Microsoft.Health.Fhir.Proxy/Json/Transforms/TransformCollection.cs
    startLine: 8
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Json.Transforms
  summary: "\nA collection of transforms.\n"
  example: []
  syntax:
    content: 'public class TransformCollection : IList<Transform>, ICollection<Transform>, IEnumerable<Transform>, IEnumerable'
    content.vb: >-
      Public Class TransformCollection
          Implements IList(Of Transform), ICollection(Of Transform), IEnumerable(Of Transform), IEnumerable
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IList{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}
  - System.Collections.Generic.ICollection{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}
  - System.Collections.Generic.IEnumerable{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.#ctor
  commentId: M:Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.#ctor
  id: '#ctor'
  parent: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection
  langs:
  - csharp
  - vb
  name: TransformCollection()
  nameWithType: TransformCollection.TransformCollection()
  fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.TransformCollection()
  type: Constructor
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Json/Transforms/TransformCollection.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: .ctor
    path: src/Microsoft.Health.Fhir.Proxy/Json/Transforms/TransformCollection.cs
    startLine: 13
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Json.Transforms
  summary: "\nCreates an instance of the transform collection.\n"
  example: []
  syntax:
    content: public TransformCollection()
    content.vb: Public Sub New
  overload: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.Count
  commentId: P:Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.Count
  id: Count
  parent: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: TransformCollection.Count
  fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.Count
  type: Property
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Json/Transforms/TransformCollection.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: Count
    path: src/Microsoft.Health.Fhir.Proxy/Json/Transforms/TransformCollection.cs
    startLine: 23
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Json.Transforms
  summary: "\nGets the number of transforms in the collection.\n"
  example: []
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.Count*
  implements:
  - System.Collections.Generic.ICollection{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}.Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.IsReadOnly
  commentId: P:Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.IsReadOnly
  id: IsReadOnly
  parent: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection
  langs:
  - csharp
  - vb
  name: IsReadOnly
  nameWithType: TransformCollection.IsReadOnly
  fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.IsReadOnly
  type: Property
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Json/Transforms/TransformCollection.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: IsReadOnly
    path: src/Microsoft.Health.Fhir.Proxy/Json/Transforms/TransformCollection.cs
    startLine: 28
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Json.Transforms
  summary: "\nGets an indicator of whether the transform is read-only.\n"
  example: []
  syntax:
    content: public bool IsReadOnly { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsReadOnly As Boolean
  overload: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.IsReadOnly*
  implements:
  - System.Collections.Generic.ICollection{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}.IsReadOnly
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.Item(System.Int32)
  commentId: P:Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.Item(System.Int32)
  id: Item(System.Int32)
  parent: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: TransformCollection.Item[Int32]
  fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Json/Transforms/TransformCollection.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: this[]
    path: src/Microsoft.Health.Fhir.Proxy/Json/Transforms/TransformCollection.cs
    startLine: 35
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Json.Transforms
  summary: "\nGets a transform in the collection by its index.\n"
  example: []
  syntax:
    content: public Transform this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: Index of transform to return.
    return:
      type: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform
      description: Transform
    content.vb: Public Property Item(index As Integer) As Transform
  overload: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.Item*
  implements:
  - System.Collections.Generic.IList{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}.Item(System.Int32)
  nameWithType.vb: TransformCollection.Item(Int32)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.Item(System.Int32)
  name.vb: Item(Int32)
- uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.IndexOf(Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform)
  commentId: M:Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.IndexOf(Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform)
  id: IndexOf(Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform)
  parent: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection
  langs:
  - csharp
  - vb
  name: IndexOf(Transform)
  nameWithType: TransformCollection.IndexOf(Transform)
  fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.IndexOf(Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform)
  type: Method
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Json/Transforms/TransformCollection.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: IndexOf
    path: src/Microsoft.Health.Fhir.Proxy/Json/Transforms/TransformCollection.cs
    startLine: 42
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Json.Transforms
  summary: "\nFinds the index of a transform.\n"
  example: []
  syntax:
    content: public int IndexOf(Transform item)
    parameters:
    - id: item
      type: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform
      description: The transform to return the index.
    return:
      type: System.Int32
      description: Index of the input transform in the collection.
    content.vb: Public Function IndexOf(item As Transform) As Integer
  overload: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.IndexOf*
  implements:
  - System.Collections.Generic.IList{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}.IndexOf(Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.Insert(System.Int32,Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform)
  commentId: M:Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.Insert(System.Int32,Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform)
  id: Insert(System.Int32,Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform)
  parent: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection
  langs:
  - csharp
  - vb
  name: Insert(Int32, Transform)
  nameWithType: TransformCollection.Insert(Int32, Transform)
  fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.Insert(System.Int32, Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform)
  type: Method
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Json/Transforms/TransformCollection.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: Insert
    path: src/Microsoft.Health.Fhir.Proxy/Json/Transforms/TransformCollection.cs
    startLine: 52
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Json.Transforms
  summary: "\nInserts a transform into the collection.\n"
  example: []
  syntax:
    content: public void Insert(int index, Transform item)
    parameters:
    - id: index
      type: System.Int32
      description: Index of the transform insertion.
    - id: item
      type: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform
      description: Transform to insert.
    content.vb: Public Sub Insert(index As Integer, item As Transform)
  overload: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.Insert*
  implements:
  - System.Collections.Generic.IList{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}.Insert(System.Int32,Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.RemoveAt(System.Int32)
  commentId: M:Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection
  langs:
  - csharp
  - vb
  name: RemoveAt(Int32)
  nameWithType: TransformCollection.RemoveAt(Int32)
  fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.RemoveAt(System.Int32)
  type: Method
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Json/Transforms/TransformCollection.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: RemoveAt
    path: src/Microsoft.Health.Fhir.Proxy/Json/Transforms/TransformCollection.cs
    startLine: 61
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Json.Transforms
  summary: "\nRemove a transform from the collection by its index.\n"
  example: []
  syntax:
    content: public void RemoveAt(int index)
    parameters:
    - id: index
      type: System.Int32
      description: Index of transform to remove.
    content.vb: Public Sub RemoveAt(index As Integer)
  overload: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.RemoveAt*
  implements:
  - System.Collections.Generic.IList{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}.RemoveAt(System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.Add(Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform)
  commentId: M:Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.Add(Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform)
  id: Add(Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform)
  parent: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection
  langs:
  - csharp
  - vb
  name: Add(Transform)
  nameWithType: TransformCollection.Add(Transform)
  fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.Add(Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform)
  type: Method
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Json/Transforms/TransformCollection.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: Add
    path: src/Microsoft.Health.Fhir.Proxy/Json/Transforms/TransformCollection.cs
    startLine: 70
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Json.Transforms
  summary: "\nAdds a transform to the collection.\n"
  example: []
  syntax:
    content: public void Add(Transform item)
    parameters:
    - id: item
      type: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform
      description: Transform to add to the collection.
    content.vb: Public Sub Add(item As Transform)
  overload: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.Add*
  implements:
  - System.Collections.Generic.ICollection{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}.Add(Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.Clear
  commentId: M:Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.Clear
  id: Clear
  parent: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: TransformCollection.Clear()
  fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.Clear()
  type: Method
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Json/Transforms/TransformCollection.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: Clear
    path: src/Microsoft.Health.Fhir.Proxy/Json/Transforms/TransformCollection.cs
    startLine: 78
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Json.Transforms
  summary: "\nClears the transform collections.\n"
  example: []
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  overload: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.Clear*
  implements:
  - System.Collections.Generic.ICollection{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}.Clear
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.Contains(Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform)
  commentId: M:Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.Contains(Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform)
  id: Contains(Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform)
  parent: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection
  langs:
  - csharp
  - vb
  name: Contains(Transform)
  nameWithType: TransformCollection.Contains(Transform)
  fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.Contains(Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform)
  type: Method
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Json/Transforms/TransformCollection.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: Contains
    path: src/Microsoft.Health.Fhir.Proxy/Json/Transforms/TransformCollection.cs
    startLine: 88
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Json.Transforms
  summary: "\nIndicates whether a transform is contained in the collection.\n"
  example: []
  syntax:
    content: public bool Contains(Transform item)
    parameters:
    - id: item
      type: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform
      description: Transform used to determined if it is in the collection.
    return:
      type: System.Boolean
      description: True is transform in is the collection; otherwise false.
    content.vb: Public Function Contains(item As Transform) As Boolean
  overload: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.Contains*
  implements:
  - System.Collections.Generic.ICollection{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}.Contains(Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.CopyTo(Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform[],System.Int32)
  commentId: M:Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.CopyTo(Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform[],System.Int32)
  id: CopyTo(Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform[],System.Int32)
  parent: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection
  langs:
  - csharp
  - vb
  name: CopyTo(Transform[], Int32)
  nameWithType: TransformCollection.CopyTo(Transform[], Int32)
  fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.CopyTo(Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform[], System.Int32)
  type: Method
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Json/Transforms/TransformCollection.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: CopyTo
    path: src/Microsoft.Health.Fhir.Proxy/Json/Transforms/TransformCollection.cs
    startLine: 98
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Json.Transforms
  summary: "\nCopies the transform collection into an array starting at the index.\n"
  example: []
  syntax:
    content: public void CopyTo(Transform[] array, int arrayIndex)
    parameters:
    - id: array
      type: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform[]
      description: Array to fill with transform collection.
    - id: arrayIndex
      type: System.Int32
      description: Starting index to fill the array.
    content.vb: Public Sub CopyTo(array As Transform(), arrayIndex As Integer)
  overload: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.CopyTo*
  implements:
  - System.Collections.Generic.ICollection{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}.CopyTo(Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform[],System.Int32)
  nameWithType.vb: TransformCollection.CopyTo(Transform(), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.CopyTo(Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform(), System.Int32)
  name.vb: CopyTo(Transform(), Int32)
- uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.Remove(Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform)
  commentId: M:Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.Remove(Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform)
  id: Remove(Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform)
  parent: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection
  langs:
  - csharp
  - vb
  name: Remove(Transform)
  nameWithType: TransformCollection.Remove(Transform)
  fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.Remove(Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform)
  type: Method
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Json/Transforms/TransformCollection.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: Remove
    path: src/Microsoft.Health.Fhir.Proxy/Json/Transforms/TransformCollection.cs
    startLine: 108
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Json.Transforms
  summary: "\nRemoves a transform from the collection.\n"
  example: []
  syntax:
    content: public bool Remove(Transform item)
    parameters:
    - id: item
      type: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform
      description: Transform to remove.
    return:
      type: System.Boolean
      description: True is the transform is removed; otherwise false.
    content.vb: Public Function Remove(item As Transform) As Boolean
  overload: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.Remove*
  implements:
  - System.Collections.Generic.ICollection{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}.Remove(Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.GetEnumerator
  commentId: M:Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.GetEnumerator
  id: GetEnumerator
  parent: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: TransformCollection.GetEnumerator()
  fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Json/Transforms/TransformCollection.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: GetEnumerator
    path: src/Microsoft.Health.Fhir.Proxy/Json/Transforms/TransformCollection.cs
    startLine: 117
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Json.Transforms
  summary: "\nGets an enumerator for the transforms in the collection.\n"
  example: []
  syntax:
    content: public IEnumerator<Transform> GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}
      description: Enumerator of transforms.
    content.vb: Public Function GetEnumerator As IEnumerator(Of Transform)
  overload: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}.GetEnumerator
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.System#Collections#IEnumerable#GetEnumerator
  commentId: M:Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: TransformCollection.IEnumerable.GetEnumerator()
  fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Json/Transforms/TransformCollection.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: System.Collections.IEnumerable.GetEnumerator
    path: src/Microsoft.Health.Fhir.Proxy/Json/Transforms/TransformCollection.cs
    startLine: 121
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Json.Transforms
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    return:
      type: System.Collections.IEnumerator
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
  overload: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.System#Collections#IEnumerable#GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: TransformCollection.System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
references:
- uid: Microsoft.Health.Fhir.Proxy.Json.Transforms
  commentId: N:Microsoft.Health.Fhir.Proxy.Json.Transforms
  name: Microsoft.Health.Fhir.Proxy.Json.Transforms
  nameWithType: Microsoft.Health.Fhir.Proxy.Json.Transforms
  fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.IList{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}
  commentId: T:System.Collections.Generic.IList{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<Transform>
  nameWithType: IList<Transform>
  fullName: System.Collections.Generic.IList<Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform>
  nameWithType.vb: IList(Of Transform)
  fullName.vb: System.Collections.Generic.IList(Of Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform)
  name.vb: IList(Of Transform)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform
    name: Transform
    nameWithType: Transform
    fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform
    name: Transform
    nameWithType: Transform
    fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}
  commentId: T:System.Collections.Generic.ICollection{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<Transform>
  nameWithType: ICollection<Transform>
  fullName: System.Collections.Generic.ICollection<Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform>
  nameWithType.vb: ICollection(Of Transform)
  fullName.vb: System.Collections.Generic.ICollection(Of Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform)
  name.vb: ICollection(Of Transform)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform
    name: Transform
    nameWithType: Transform
    fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform
    name: Transform
    nameWithType: Transform
    fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Transform>
  nameWithType: IEnumerable<Transform>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform>
  nameWithType.vb: IEnumerable(Of Transform)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform)
  name.vb: IEnumerable(Of Transform)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform
    name: Transform
    nameWithType: Transform
    fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform
    name: Transform
    nameWithType: Transform
    fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.#ctor*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.#ctor
  name: TransformCollection
  nameWithType: TransformCollection.TransformCollection
  fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.TransformCollection
- uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.Count*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.Count
  name: Count
  nameWithType: TransformCollection.Count
  fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.Count
- uid: System.Collections.Generic.ICollection{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}.Count
  commentId: P:System.Collections.Generic.ICollection{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}.Count
  parent: System.Collections.Generic.ICollection{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}
  definition: System.Collections.Generic.ICollection`1.Count
  name: Count
  nameWithType: ICollection<Transform>.Count
  fullName: System.Collections.Generic.ICollection<Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform>.Count
  nameWithType.vb: ICollection(Of Transform).Count
  fullName.vb: System.Collections.Generic.ICollection(Of Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform).Count
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.ICollection`1.Count
  commentId: P:System.Collections.Generic.ICollection`1.Count
  isExternal: true
  name: Count
  nameWithType: ICollection<T>.Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  nameWithType.vb: ICollection(Of T).Count
  fullName.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.IsReadOnly*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.IsReadOnly
  name: IsReadOnly
  nameWithType: TransformCollection.IsReadOnly
  fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.IsReadOnly
- uid: System.Collections.Generic.ICollection{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}.IsReadOnly
  parent: System.Collections.Generic.ICollection{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}
  definition: System.Collections.Generic.ICollection`1.IsReadOnly
  name: IsReadOnly
  nameWithType: ICollection<Transform>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform>.IsReadOnly
  nameWithType.vb: ICollection(Of Transform).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform).IsReadOnly
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.ICollection`1.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection`1.IsReadOnly
  isExternal: true
  name: IsReadOnly
  nameWithType: ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: ICollection(Of T).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly
- uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.Item*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.Item
  name: Item
  nameWithType: TransformCollection.Item
  fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.Item
- uid: System.Collections.Generic.IList{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}.Item(System.Int32)
  commentId: P:System.Collections.Generic.IList{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}.Item(System.Int32)
  parent: System.Collections.Generic.IList{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}
  definition: System.Collections.Generic.IList`1.Item(System.Int32)
  name: Item[Int32]
  nameWithType: IList<Transform>.Item[Int32]
  fullName: System.Collections.Generic.IList<Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform>.Item[System.Int32]
  nameWithType.vb: IList(Of Transform).Item(Int32)
  fullName.vb: System.Collections.Generic.IList(Of Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList<Transform>.Item
    fullName: System.Collections.Generic.IList<Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList(Of Transform).Item
    fullName: System.Collections.Generic.IList(Of Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform
  commentId: T:Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform
  parent: Microsoft.Health.Fhir.Proxy.Json.Transforms
  name: Transform
  nameWithType: Transform
  fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform
- uid: System.Collections.Generic.IList`1.Item(System.Int32)
  commentId: P:System.Collections.Generic.IList`1.Item(System.Int32)
  isExternal: true
  name: Item[Int32]
  nameWithType: IList<T>.Item[Int32]
  fullName: System.Collections.Generic.IList<T>.Item[System.Int32]
  nameWithType.vb: IList(Of T).Item(Int32)
  fullName.vb: System.Collections.Generic.IList(Of T).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList<T>.Item
    fullName: System.Collections.Generic.IList<T>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList(Of T).Item
    fullName: System.Collections.Generic.IList(Of T).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.IndexOf*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.IndexOf
  name: IndexOf
  nameWithType: TransformCollection.IndexOf
  fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.IndexOf
- uid: System.Collections.Generic.IList{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}.IndexOf(Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform)
  commentId: M:System.Collections.Generic.IList{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}.IndexOf(Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform)
  parent: System.Collections.Generic.IList{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}
  definition: System.Collections.Generic.IList`1.IndexOf(`0)
  name: IndexOf(Transform)
  nameWithType: IList<Transform>.IndexOf(Transform)
  fullName: System.Collections.Generic.IList<Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform>.IndexOf(Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform)
  nameWithType.vb: IList(Of Transform).IndexOf(Transform)
  fullName.vb: System.Collections.Generic.IList(Of Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform).IndexOf(Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList<Transform>.IndexOf
    fullName: System.Collections.Generic.IList<Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform
    name: Transform
    nameWithType: Transform
    fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList(Of Transform).IndexOf
    fullName: System.Collections.Generic.IList(Of Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform
    name: Transform
    nameWithType: Transform
    fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1.IndexOf(`0)
  commentId: M:System.Collections.Generic.IList`1.IndexOf(`0)
  isExternal: true
  name: IndexOf(T)
  nameWithType: IList<T>.IndexOf(T)
  fullName: System.Collections.Generic.IList<T>.IndexOf(T)
  nameWithType.vb: IList(Of T).IndexOf(T)
  fullName.vb: System.Collections.Generic.IList(Of T).IndexOf(T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList<T>.IndexOf
    fullName: System.Collections.Generic.IList<T>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList(Of T).IndexOf
    fullName: System.Collections.Generic.IList(Of T).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.Insert*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.Insert
  name: Insert
  nameWithType: TransformCollection.Insert
  fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.Insert
- uid: System.Collections.Generic.IList{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}.Insert(System.Int32,Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform)
  commentId: M:System.Collections.Generic.IList{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}.Insert(System.Int32,Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform)
  parent: System.Collections.Generic.IList{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}
  definition: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  name: Insert(Int32, Transform)
  nameWithType: IList<Transform>.Insert(Int32, Transform)
  fullName: System.Collections.Generic.IList<Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform>.Insert(System.Int32, Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform)
  nameWithType.vb: IList(Of Transform).Insert(Int32, Transform)
  fullName.vb: System.Collections.Generic.IList(Of Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform).Insert(System.Int32, Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList<Transform>.Insert
    fullName: System.Collections.Generic.IList<Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform>.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform
    name: Transform
    nameWithType: Transform
    fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList(Of Transform).Insert
    fullName: System.Collections.Generic.IList(Of Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform).Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform
    name: Transform
    nameWithType: Transform
    fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  commentId: M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  isExternal: true
  name: Insert(Int32, T)
  nameWithType: IList<T>.Insert(Int32, T)
  fullName: System.Collections.Generic.IList<T>.Insert(System.Int32, T)
  nameWithType.vb: IList(Of T).Insert(Int32, T)
  fullName.vb: System.Collections.Generic.IList(Of T).Insert(System.Int32, T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList<T>.Insert
    fullName: System.Collections.Generic.IList<T>.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList(Of T).Insert
    fullName: System.Collections.Generic.IList(Of T).Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.RemoveAt*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.RemoveAt
  name: RemoveAt
  nameWithType: TransformCollection.RemoveAt
  fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.RemoveAt
- uid: System.Collections.Generic.IList{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}.RemoveAt(System.Int32)
  commentId: M:System.Collections.Generic.IList{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}.RemoveAt(System.Int32)
  parent: System.Collections.Generic.IList{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}
  definition: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  name: RemoveAt(Int32)
  nameWithType: IList<Transform>.RemoveAt(Int32)
  fullName: System.Collections.Generic.IList<Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform>.RemoveAt(System.Int32)
  nameWithType.vb: IList(Of Transform).RemoveAt(Int32)
  fullName.vb: System.Collections.Generic.IList(Of Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform).RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList<Transform>.RemoveAt
    fullName: System.Collections.Generic.IList<Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform>.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList(Of Transform).RemoveAt
    fullName: System.Collections.Generic.IList(Of Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform).RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  commentId: M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  isExternal: true
  name: RemoveAt(Int32)
  nameWithType: IList<T>.RemoveAt(Int32)
  fullName: System.Collections.Generic.IList<T>.RemoveAt(System.Int32)
  nameWithType.vb: IList(Of T).RemoveAt(Int32)
  fullName.vb: System.Collections.Generic.IList(Of T).RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList<T>.RemoveAt
    fullName: System.Collections.Generic.IList<T>.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList(Of T).RemoveAt
    fullName: System.Collections.Generic.IList(Of T).RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.Add*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.Add
  name: Add
  nameWithType: TransformCollection.Add
  fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.Add
- uid: System.Collections.Generic.ICollection{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}.Add(Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform)
  commentId: M:System.Collections.Generic.ICollection{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}.Add(Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform)
  parent: System.Collections.Generic.ICollection{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}
  definition: System.Collections.Generic.ICollection`1.Add(`0)
  name: Add(Transform)
  nameWithType: ICollection<Transform>.Add(Transform)
  fullName: System.Collections.Generic.ICollection<Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform>.Add(Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform)
  nameWithType.vb: ICollection(Of Transform).Add(Transform)
  fullName.vb: System.Collections.Generic.ICollection(Of Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform).Add(Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<Transform>.Add
    fullName: System.Collections.Generic.ICollection<Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform
    name: Transform
    nameWithType: Transform
    fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of Transform).Add
    fullName: System.Collections.Generic.ICollection(Of Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform
    name: Transform
    nameWithType: Transform
    fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Add(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Add(`0)
  isExternal: true
  name: Add(T)
  nameWithType: ICollection<T>.Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  nameWithType.vb: ICollection(Of T).Add(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<T>.Add
    fullName: System.Collections.Generic.ICollection<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of T).Add
    fullName: System.Collections.Generic.ICollection(Of T).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.Clear*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.Clear
  name: Clear
  nameWithType: TransformCollection.Clear
  fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.Clear
- uid: System.Collections.Generic.ICollection{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}.Clear
  commentId: M:System.Collections.Generic.ICollection{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}.Clear
  parent: System.Collections.Generic.ICollection{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}
  definition: System.Collections.Generic.ICollection`1.Clear
  name: Clear()
  nameWithType: ICollection<Transform>.Clear()
  fullName: System.Collections.Generic.ICollection<Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform>.Clear()
  nameWithType.vb: ICollection(Of Transform).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<Transform>.Clear
    fullName: System.Collections.Generic.ICollection<Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of Transform).Clear
    fullName: System.Collections.Generic.ICollection(Of Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Clear
  commentId: M:System.Collections.Generic.ICollection`1.Clear
  isExternal: true
  name: Clear()
  nameWithType: ICollection<T>.Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  nameWithType.vb: ICollection(Of T).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<T>.Clear
    fullName: System.Collections.Generic.ICollection<T>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of T).Clear
    fullName: System.Collections.Generic.ICollection(Of T).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.Contains*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.Contains
  name: Contains
  nameWithType: TransformCollection.Contains
  fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.Contains
- uid: System.Collections.Generic.ICollection{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}.Contains(Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform)
  commentId: M:System.Collections.Generic.ICollection{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}.Contains(Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform)
  parent: System.Collections.Generic.ICollection{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}
  definition: System.Collections.Generic.ICollection`1.Contains(`0)
  name: Contains(Transform)
  nameWithType: ICollection<Transform>.Contains(Transform)
  fullName: System.Collections.Generic.ICollection<Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform>.Contains(Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform)
  nameWithType.vb: ICollection(Of Transform).Contains(Transform)
  fullName.vb: System.Collections.Generic.ICollection(Of Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform).Contains(Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<Transform>.Contains
    fullName: System.Collections.Generic.ICollection<Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform
    name: Transform
    nameWithType: Transform
    fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of Transform).Contains
    fullName: System.Collections.Generic.ICollection(Of Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform
    name: Transform
    nameWithType: Transform
    fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Contains(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Contains(`0)
  isExternal: true
  name: Contains(T)
  nameWithType: ICollection<T>.Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  nameWithType.vb: ICollection(Of T).Contains(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<T>.Contains
    fullName: System.Collections.Generic.ICollection<T>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of T).Contains
    fullName: System.Collections.Generic.ICollection(Of T).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.CopyTo*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.CopyTo
  name: CopyTo
  nameWithType: TransformCollection.CopyTo
  fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.CopyTo
- uid: System.Collections.Generic.ICollection{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}.CopyTo(Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}.CopyTo(Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform[],System.Int32)
  parent: System.Collections.Generic.ICollection{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}
  definition: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  name: CopyTo(Transform[], Int32)
  nameWithType: ICollection<Transform>.CopyTo(Transform[], Int32)
  fullName: System.Collections.Generic.ICollection<Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform>.CopyTo(Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform[], System.Int32)
  nameWithType.vb: ICollection(Of Transform).CopyTo(Transform(), Int32)
  fullName.vb: System.Collections.Generic.ICollection(Of Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform).CopyTo(Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform(), System.Int32)
  name.vb: CopyTo(Transform(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<Transform>.CopyTo
    fullName: System.Collections.Generic.ICollection<Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform
    name: Transform
    nameWithType: Transform
    fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of Transform).CopyTo
    fullName: System.Collections.Generic.ICollection(Of Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform
    name: Transform
    nameWithType: Transform
    fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform[]
  isExternal: true
  name: Transform[]
  nameWithType: Transform[]
  fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform[]
  nameWithType.vb: Transform()
  fullName.vb: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform()
  name.vb: Transform()
  spec.csharp:
  - uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform
    name: Transform
    nameWithType: Transform
    fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform
    name: Transform
    nameWithType: Transform
    fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  isExternal: true
  name: CopyTo(T[], Int32)
  nameWithType: ICollection<T>.CopyTo(T[], Int32)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)
  nameWithType.vb: ICollection(Of T).CopyTo(T(), Int32)
  fullName.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<T>.CopyTo
    fullName: System.Collections.Generic.ICollection<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of T).CopyTo
    fullName: System.Collections.Generic.ICollection(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.Remove*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.Remove
  name: Remove
  nameWithType: TransformCollection.Remove
  fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.Remove
- uid: System.Collections.Generic.ICollection{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}.Remove(Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform)
  commentId: M:System.Collections.Generic.ICollection{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}.Remove(Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform)
  parent: System.Collections.Generic.ICollection{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}
  definition: System.Collections.Generic.ICollection`1.Remove(`0)
  name: Remove(Transform)
  nameWithType: ICollection<Transform>.Remove(Transform)
  fullName: System.Collections.Generic.ICollection<Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform>.Remove(Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform)
  nameWithType.vb: ICollection(Of Transform).Remove(Transform)
  fullName.vb: System.Collections.Generic.ICollection(Of Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform).Remove(Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<Transform>.Remove
    fullName: System.Collections.Generic.ICollection<Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform
    name: Transform
    nameWithType: Transform
    fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of Transform).Remove
    fullName: System.Collections.Generic.ICollection(Of Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform
    name: Transform
    nameWithType: Transform
    fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Remove(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Remove(`0)
  isExternal: true
  name: Remove(T)
  nameWithType: ICollection<T>.Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  nameWithType.vb: ICollection(Of T).Remove(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<T>.Remove
    fullName: System.Collections.Generic.ICollection<T>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of T).Remove
    fullName: System.Collections.Generic.ICollection(Of T).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.GetEnumerator*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.GetEnumerator
  name: GetEnumerator
  nameWithType: TransformCollection.GetEnumerator
  fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.GetEnumerator
- uid: System.Collections.Generic.IEnumerable{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<Transform>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of Transform).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<Transform>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of Transform).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}
  commentId: T:System.Collections.Generic.IEnumerator{Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<Transform>
  nameWithType: IEnumerator<Transform>
  fullName: System.Collections.Generic.IEnumerator<Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform>
  nameWithType.vb: IEnumerator(Of Transform)
  fullName.vb: System.Collections.Generic.IEnumerator(Of Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform)
  name.vb: IEnumerator(Of Transform)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform
    name: Transform
    nameWithType: Transform
    fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform
    name: Transform
    nameWithType: Transform
    fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.System#Collections#IEnumerable#GetEnumerator*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator
  nameWithType: TransformCollection.IEnumerable.GetEnumerator
  fullName: Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: TransformCollection.System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
