### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig
  commentId: T:Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig
  id: ServiceConfig
  parent: Microsoft.Health.Fhir.Proxy.Configuration
  children:
  - Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.#ctor
  - Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.Certficate
  - Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.ClientId
  - Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.ClientSecret
  - Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.FhirServerUrl
  - Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.InstrumentationKey
  - Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.KeyVaultCertificateName
  - Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.KeyVaultUri
  - Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.LoggingLevel
  - Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.SystemManagedIdentity
  - Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.TenantId
  langs:
  - csharp
  - vb
  name: ServiceConfig
  nameWithType: ServiceConfig
  fullName: Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig
  type: Class
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Configuration/ServiceConfig.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: ServiceConfig
    path: src/Microsoft.Health.Fhir.Proxy/Configuration/ServiceConfig.cs
    startLine: 13
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Configuration
  summary: "\nService configuration for pipelines.\n"
  example: []
  syntax:
    content: >-
      [JsonObject]

      [Serializable]

      public class ServiceConfig
    content.vb: >-
      <JsonObject>

      <Serializable>

      Public Class ServiceConfig
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: Newtonsoft.Json.JsonObjectAttribute
    ctor: Newtonsoft.Json.JsonObjectAttribute.#ctor
    arguments: []
  - type: System.SerializableAttribute
    ctor: System.SerializableAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.#ctor
  commentId: M:Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.#ctor
  id: '#ctor'
  parent: Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig
  langs:
  - csharp
  - vb
  name: ServiceConfig()
  nameWithType: ServiceConfig.ServiceConfig()
  fullName: Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.ServiceConfig()
  type: Constructor
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Configuration/ServiceConfig.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: .ctor
    path: src/Microsoft.Health.Fhir.Proxy/Configuration/ServiceConfig.cs
    startLine: 17
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Configuration
  syntax:
    content: public ServiceConfig()
    content.vb: Public Sub New
  overload: Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.ClientId
  commentId: P:Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.ClientId
  id: ClientId
  parent: Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig
  langs:
  - csharp
  - vb
  name: ClientId
  nameWithType: ServiceConfig.ClientId
  fullName: Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.ClientId
  type: Property
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Configuration/ServiceConfig.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: ClientId
    path: src/Microsoft.Health.Fhir.Proxy/Configuration/ServiceConfig.cs
    startLine: 27
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Configuration
  summary: "\nAAD client id for authentication.\n"
  remarks: Property can be omitted with using either (i) MSI or (ii) X509 certificate for authentication
  example: []
  syntax:
    content: >-
      [JsonProperty("clientId")]

      public string ClientId { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty("clientId")>

      Public Property ClientId As String
  overload: Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.ClientId*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: clientId
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.ClientSecret
  commentId: P:Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.ClientSecret
  id: ClientSecret
  parent: Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig
  langs:
  - csharp
  - vb
  name: ClientSecret
  nameWithType: ServiceConfig.ClientSecret
  fullName: Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.ClientSecret
  type: Property
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Configuration/ServiceConfig.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: ClientSecret
    path: src/Microsoft.Health.Fhir.Proxy/Configuration/ServiceConfig.cs
    startLine: 34
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Configuration
  summary: "\nAAD client secret for authentication.\n"
  remarks: Property can be omitted with using either (i) MSI or (ii) X509 certificate for authentication
  example: []
  syntax:
    content: >-
      [JsonProperty("clientSecret")]

      public string ClientSecret { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty("clientSecret")>

      Public Property ClientSecret As String
  overload: Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.ClientSecret*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: clientSecret
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.KeyVaultUri
  commentId: P:Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.KeyVaultUri
  id: KeyVaultUri
  parent: Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig
  langs:
  - csharp
  - vb
  name: KeyVaultUri
  nameWithType: ServiceConfig.KeyVaultUri
  fullName: Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.KeyVaultUri
  type: Property
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Configuration/ServiceConfig.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: KeyVaultUri
    path: src/Microsoft.Health.Fhir.Proxy/Configuration/ServiceConfig.cs
    startLine: 41
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Configuration
  summary: "\nKey vault URI required obtaining a certificate for AAD authentication.\n"
  remarks: Property can be omitted with using either (i) MSI or (ii) client_id and client_secret for authentication
  example: []
  syntax:
    content: >-
      [JsonProperty("keyVaultUri")]

      public string KeyVaultUri { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty("keyVaultUri")>

      Public Property KeyVaultUri As String
  overload: Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.KeyVaultUri*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: keyVaultUri
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.KeyVaultCertificateName
  commentId: P:Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.KeyVaultCertificateName
  id: KeyVaultCertificateName
  parent: Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig
  langs:
  - csharp
  - vb
  name: KeyVaultCertificateName
  nameWithType: ServiceConfig.KeyVaultCertificateName
  fullName: Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.KeyVaultCertificateName
  type: Property
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Configuration/ServiceConfig.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: KeyVaultCertificateName
    path: src/Microsoft.Health.Fhir.Proxy/Configuration/ServiceConfig.cs
    startLine: 48
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Configuration
  summary: "\nName of the certificate to retreive from key vault.\n"
  remarks: Property can be omitted with using either (i) MSI or (ii) client_id and client_secret for authentication
  example: []
  syntax:
    content: >-
      [JsonProperty("keyVaultCertificateName")]

      public string KeyVaultCertificateName { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty("keyVaultCertificateName")>

      Public Property KeyVaultCertificateName As String
  overload: Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.KeyVaultCertificateName*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: keyVaultCertificateName
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.Certficate
  commentId: P:Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.Certficate
  id: Certficate
  parent: Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig
  langs:
  - csharp
  - vb
  name: Certficate
  nameWithType: ServiceConfig.Certficate
  fullName: Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.Certficate
  type: Property
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Configuration/ServiceConfig.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: Certficate
    path: src/Microsoft.Health.Fhir.Proxy/Configuration/ServiceConfig.cs
    startLine: 51
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Configuration
  syntax:
    content: >-
      [JsonIgnore]

      public X509Certificate2 Certficate { get; }
    parameters: []
    return:
      type: System.Security.Cryptography.X509Certificates.X509Certificate2
    content.vb: >-
      <JsonIgnore>

      Public ReadOnly Property Certficate As X509Certificate2
  overload: Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.Certficate*
  attributes:
  - type: Newtonsoft.Json.JsonIgnoreAttribute
    ctor: Newtonsoft.Json.JsonIgnoreAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.SystemManagedIdentity
  commentId: P:Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.SystemManagedIdentity
  id: SystemManagedIdentity
  parent: Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig
  langs:
  - csharp
  - vb
  name: SystemManagedIdentity
  nameWithType: ServiceConfig.SystemManagedIdentity
  fullName: Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.SystemManagedIdentity
  type: Property
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Configuration/ServiceConfig.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: SystemManagedIdentity
    path: src/Microsoft.Health.Fhir.Proxy/Configuration/ServiceConfig.cs
    startLine: 76
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Configuration
  summary: "\nGets an indicators that is true when MSI is used; otherwise false. \n"
  example: []
  syntax:
    content: >-
      [JsonIgnore]

      public bool SystemManagedIdentity { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: >-
      <JsonIgnore>

      Public ReadOnly Property SystemManagedIdentity As Boolean
  overload: Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.SystemManagedIdentity*
  attributes:
  - type: Newtonsoft.Json.JsonIgnoreAttribute
    ctor: Newtonsoft.Json.JsonIgnoreAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.TenantId
  commentId: P:Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.TenantId
  id: TenantId
  parent: Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig
  langs:
  - csharp
  - vb
  name: TenantId
  nameWithType: ServiceConfig.TenantId
  fullName: Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.TenantId
  type: Property
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Configuration/ServiceConfig.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: TenantId
    path: src/Microsoft.Health.Fhir.Proxy/Configuration/ServiceConfig.cs
    startLine: 85
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Configuration
  summary: "\nGets or sets Tenant ID used for AAD authentication.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty("tenantId")]

      public string TenantId { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty("tenantId")>

      Public Property TenantId As String
  overload: Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.TenantId*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: tenantId
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.FhirServerUrl
  commentId: P:Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.FhirServerUrl
  id: FhirServerUrl
  parent: Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig
  langs:
  - csharp
  - vb
  name: FhirServerUrl
  nameWithType: ServiceConfig.FhirServerUrl
  fullName: Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.FhirServerUrl
  type: Property
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Configuration/ServiceConfig.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: FhirServerUrl
    path: src/Microsoft.Health.Fhir.Proxy/Configuration/ServiceConfig.cs
    startLine: 91
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Configuration
  summary: "\nGets or sets the FHIR server URL.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty("fhirServiceUrl")]

      public string FhirServerUrl { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty("fhirServiceUrl")>

      Public Property FhirServerUrl As String
  overload: Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.FhirServerUrl*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: fhirServiceUrl
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.InstrumentationKey
  commentId: P:Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.InstrumentationKey
  id: InstrumentationKey
  parent: Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig
  langs:
  - csharp
  - vb
  name: InstrumentationKey
  nameWithType: ServiceConfig.InstrumentationKey
  fullName: Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.InstrumentationKey
  type: Property
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Configuration/ServiceConfig.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: InstrumentationKey
    path: src/Microsoft.Health.Fhir.Proxy/Configuration/ServiceConfig.cs
    startLine: 97
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Configuration
  summary: "\nGets or sets the instrumentation key used for app insights.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty("instrumentationKey")]

      public string InstrumentationKey { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty("instrumentationKey")>

      Public Property InstrumentationKey As String
  overload: Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.InstrumentationKey*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: instrumentationKey
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.LoggingLevel
  commentId: P:Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.LoggingLevel
  id: LoggingLevel
  parent: Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig
  langs:
  - csharp
  - vb
  name: LoggingLevel
  nameWithType: ServiceConfig.LoggingLevel
  fullName: Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.LoggingLevel
  type: Property
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Configuration/ServiceConfig.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: LoggingLevel
    path: src/Microsoft.Health.Fhir.Proxy/Configuration/ServiceConfig.cs
    startLine: 103
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Configuration
  summary: "\nGets or sets the log level used for app insights.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty("logLevel")]

      public LogLevel LoggingLevel { get; set; }
    parameters: []
    return:
      type: Microsoft.Extensions.Logging.LogLevel
    content.vb: >-
      <JsonProperty("logLevel")>

      Public Property LoggingLevel As LogLevel
  overload: Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.LoggingLevel*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: logLevel
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Health.Fhir.Proxy.Configuration
  commentId: N:Microsoft.Health.Fhir.Proxy.Configuration
  name: Microsoft.Health.Fhir.Proxy.Configuration
  nameWithType: Microsoft.Health.Fhir.Proxy.Configuration
  fullName: Microsoft.Health.Fhir.Proxy.Configuration
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.#ctor*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.#ctor
  name: ServiceConfig
  nameWithType: ServiceConfig.ServiceConfig
  fullName: Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.ServiceConfig
- uid: Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.ClientId*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.ClientId
  name: ClientId
  nameWithType: ServiceConfig.ClientId
  fullName: Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.ClientId
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.ClientSecret*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.ClientSecret
  name: ClientSecret
  nameWithType: ServiceConfig.ClientSecret
  fullName: Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.ClientSecret
- uid: Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.KeyVaultUri*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.KeyVaultUri
  name: KeyVaultUri
  nameWithType: ServiceConfig.KeyVaultUri
  fullName: Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.KeyVaultUri
- uid: Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.KeyVaultCertificateName*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.KeyVaultCertificateName
  name: KeyVaultCertificateName
  nameWithType: ServiceConfig.KeyVaultCertificateName
  fullName: Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.KeyVaultCertificateName
- uid: Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.Certficate*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.Certficate
  name: Certficate
  nameWithType: ServiceConfig.Certficate
  fullName: Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.Certficate
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2
  commentId: T:System.Security.Cryptography.X509Certificates.X509Certificate2
  parent: System.Security.Cryptography.X509Certificates
  isExternal: true
  name: X509Certificate2
  nameWithType: X509Certificate2
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2
- uid: System.Security.Cryptography.X509Certificates
  commentId: N:System.Security.Cryptography.X509Certificates
  isExternal: true
  name: System.Security.Cryptography.X509Certificates
  nameWithType: System.Security.Cryptography.X509Certificates
  fullName: System.Security.Cryptography.X509Certificates
- uid: Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.SystemManagedIdentity*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.SystemManagedIdentity
  name: SystemManagedIdentity
  nameWithType: ServiceConfig.SystemManagedIdentity
  fullName: Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.SystemManagedIdentity
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.TenantId*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.TenantId
  name: TenantId
  nameWithType: ServiceConfig.TenantId
  fullName: Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.TenantId
- uid: Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.FhirServerUrl*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.FhirServerUrl
  name: FhirServerUrl
  nameWithType: ServiceConfig.FhirServerUrl
  fullName: Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.FhirServerUrl
- uid: Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.InstrumentationKey*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.InstrumentationKey
  name: InstrumentationKey
  nameWithType: ServiceConfig.InstrumentationKey
  fullName: Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.InstrumentationKey
- uid: Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.LoggingLevel*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.LoggingLevel
  name: LoggingLevel
  nameWithType: ServiceConfig.LoggingLevel
  fullName: Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.LoggingLevel
- uid: Microsoft.Extensions.Logging.LogLevel
  commentId: T:Microsoft.Extensions.Logging.LogLevel
  parent: Microsoft.Extensions.Logging
  isExternal: true
  name: LogLevel
  nameWithType: LogLevel
  fullName: Microsoft.Extensions.Logging.LogLevel
- uid: Microsoft.Extensions.Logging
  commentId: N:Microsoft.Extensions.Logging
  isExternal: true
  name: Microsoft.Extensions.Logging
  nameWithType: Microsoft.Extensions.Logging
  fullName: Microsoft.Extensions.Logging
