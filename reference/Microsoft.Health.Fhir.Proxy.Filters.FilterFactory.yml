### YamlMime:ManagedReference
items:
- uid: Microsoft.Health.Fhir.Proxy.Filters.FilterFactory
  commentId: T:Microsoft.Health.Fhir.Proxy.Filters.FilterFactory
  id: FilterFactory
  parent: Microsoft.Health.Fhir.Proxy.Filters
  children:
  - Microsoft.Health.Fhir.Proxy.Filters.FilterFactory.Clear
  - Microsoft.Health.Fhir.Proxy.Filters.FilterFactory.Container
  - Microsoft.Health.Fhir.Proxy.Filters.FilterFactory.Create(System.String)
  - Microsoft.Health.Fhir.Proxy.Filters.FilterFactory.GetNames
  - Microsoft.Health.Fhir.Proxy.Filters.FilterFactory.Register(System.String,System.Type,System.Object[])
  langs:
  - csharp
  - vb
  name: FilterFactory
  nameWithType: FilterFactory
  fullName: Microsoft.Health.Fhir.Proxy.Filters.FilterFactory
  type: Class
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Filters/FilterFactory.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: FilterFactory
    path: Filters/FilterFactory.cs
    startLine: 9
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Filters
  summary: "\nA factory of filters.\n"
  example: []
  syntax:
    content: public abstract class FilterFactory
    content.vb: Public MustInherit Class FilterFactory
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Microsoft.Health.Fhir.Proxy.Filters.FilterFactory.Container
  commentId: P:Microsoft.Health.Fhir.Proxy.Filters.FilterFactory.Container
  id: Container
  parent: Microsoft.Health.Fhir.Proxy.Filters.FilterFactory
  langs:
  - csharp
  - vb
  name: Container
  nameWithType: FilterFactory.Container
  fullName: Microsoft.Health.Fhir.Proxy.Filters.FilterFactory.Container
  type: Property
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Filters/FilterFactory.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: Container
    path: Filters/FilterFactory.cs
    startLine: 16
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Filters
  syntax:
    content: public static Dictionary<string, Tuple<Type, object[]>> Container { get; }
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.Tuple{System.Type,System.Object[]}}
    content.vb: Public Shared ReadOnly Property Container As Dictionary(Of String, Tuple(Of Type, Object()))
  overload: Microsoft.Health.Fhir.Proxy.Filters.FilterFactory.Container*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Health.Fhir.Proxy.Filters.FilterFactory.Register(System.String,System.Type,System.Object[])
  commentId: M:Microsoft.Health.Fhir.Proxy.Filters.FilterFactory.Register(System.String,System.Type,System.Object[])
  id: Register(System.String,System.Type,System.Object[])
  parent: Microsoft.Health.Fhir.Proxy.Filters.FilterFactory
  langs:
  - csharp
  - vb
  name: Register(String, Type, Object[])
  nameWithType: FilterFactory.Register(String, Type, Object[])
  fullName: Microsoft.Health.Fhir.Proxy.Filters.FilterFactory.Register(System.String, System.Type, System.Object[])
  type: Method
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Filters/FilterFactory.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: Register
    path: Filters/FilterFactory.cs
    startLine: 24
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Filters
  summary: "\nRegisters a filter in the factory.\n"
  example: []
  syntax:
    content: public static void Register(string name, Type type, object[] args = null)
    parameters:
    - id: name
      type: System.String
      description: Filter name that matches the name property of the filter.
    - id: type
      type: System.Type
      description: Type of filter.
    - id: args
      type: System.Object[]
      description: Arguments used in the constructor of the filter type.
    content.vb: Public Shared Sub Register(name As String, type As Type, args As Object() = Nothing)
  overload: Microsoft.Health.Fhir.Proxy.Filters.FilterFactory.Register*
  nameWithType.vb: FilterFactory.Register(String, Type, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Health.Fhir.Proxy.Filters.FilterFactory.Register(System.String, System.Type, System.Object())
  name.vb: Register(String, Type, Object())
- uid: Microsoft.Health.Fhir.Proxy.Filters.FilterFactory.GetNames
  commentId: M:Microsoft.Health.Fhir.Proxy.Filters.FilterFactory.GetNames
  id: GetNames
  parent: Microsoft.Health.Fhir.Proxy.Filters.FilterFactory
  langs:
  - csharp
  - vb
  name: GetNames()
  nameWithType: FilterFactory.GetNames()
  fullName: Microsoft.Health.Fhir.Proxy.Filters.FilterFactory.GetNames()
  type: Method
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Filters/FilterFactory.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: GetNames
    path: Filters/FilterFactory.cs
    startLine: 48
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Filters
  summary: "\nGets an array of filter names.\n"
  example: []
  syntax:
    content: public static string[] GetNames()
    return:
      type: System.String[]
      description: Array string names.
    content.vb: Public Shared Function GetNames As String()
  overload: Microsoft.Health.Fhir.Proxy.Filters.FilterFactory.GetNames*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Fhir.Proxy.Filters.FilterFactory.Clear
  commentId: M:Microsoft.Health.Fhir.Proxy.Filters.FilterFactory.Clear
  id: Clear
  parent: Microsoft.Health.Fhir.Proxy.Filters.FilterFactory
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: FilterFactory.Clear()
  fullName: Microsoft.Health.Fhir.Proxy.Filters.FilterFactory.Clear()
  type: Method
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Filters/FilterFactory.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: Clear
    path: Filters/FilterFactory.cs
    startLine: 61
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Filters
  summary: "\nClears the filter factory.\n"
  example: []
  syntax:
    content: public static void Clear()
    content.vb: Public Shared Sub Clear
  overload: Microsoft.Health.Fhir.Proxy.Filters.FilterFactory.Clear*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Health.Fhir.Proxy.Filters.FilterFactory.Create(System.String)
  commentId: M:Microsoft.Health.Fhir.Proxy.Filters.FilterFactory.Create(System.String)
  id: Create(System.String)
  parent: Microsoft.Health.Fhir.Proxy.Filters.FilterFactory
  langs:
  - csharp
  - vb
  name: Create(String)
  nameWithType: FilterFactory.Create(String)
  fullName: Microsoft.Health.Fhir.Proxy.Filters.FilterFactory.Create(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Health.Fhir.Proxy/Filters/FilterFactory.cs
      branch: malong/1042
      repo: https://smokejumpers@dev.azure.com/smokejumpers/HealthArchitectures/_git/microsoft-fhir-proxy
    id: Create
    path: Filters/FilterFactory.cs
    startLine: 74
  assemblies:
  - Microsoft.Health.Fhir.Proxy
  namespace: Microsoft.Health.Fhir.Proxy.Filters
  summary: "\nCreate a filter from the factory by its name.\n"
  example: []
  syntax:
    content: public static IFilter Create(string name)
    parameters:
    - id: name
      type: System.String
      description: Name of the filter in the factory to create.
    return:
      type: Microsoft.Health.Fhir.Proxy.Filters.IFilter
      description: IFilter
    content.vb: Public Shared Function Create(name As String) As IFilter
  overload: Microsoft.Health.Fhir.Proxy.Filters.FilterFactory.Create*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Microsoft.Health.Fhir.Proxy.Filters
  commentId: N:Microsoft.Health.Fhir.Proxy.Filters
  name: Microsoft.Health.Fhir.Proxy.Filters
  nameWithType: Microsoft.Health.Fhir.Proxy.Filters
  fullName: Microsoft.Health.Fhir.Proxy.Filters
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Health.Fhir.Proxy.Filters.FilterFactory.Container*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Filters.FilterFactory.Container
  name: Container
  nameWithType: FilterFactory.Container
  fullName: Microsoft.Health.Fhir.Proxy.Filters.FilterFactory.Container
- uid: System.Collections.Generic.Dictionary{System.String,System.Tuple{System.Type,System.Object[]}}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.Tuple{System.Type,System.Object[]}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, Tuple<Type, Object[]>>
  nameWithType: Dictionary<String, Tuple<Type, Object[]>>
  fullName: System.Collections.Generic.Dictionary<System.String, System.Tuple<System.Type, System.Object[]>>
  nameWithType.vb: Dictionary(Of String, Tuple(Of Type, Object()))
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.Tuple(Of System.Type, System.Object()))
  name.vb: Dictionary(Of String, Tuple(Of Type, Object()))
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.Health.Fhir.Proxy.Filters.FilterFactory.Register*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Filters.FilterFactory.Register
  name: Register
  nameWithType: FilterFactory.Register
  fullName: Microsoft.Health.Fhir.Proxy.Filters.FilterFactory.Register
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Object[]
  isExternal: true
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Microsoft.Health.Fhir.Proxy.Filters.FilterFactory.GetNames*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Filters.FilterFactory.GetNames
  name: GetNames
  nameWithType: FilterFactory.GetNames
  fullName: Microsoft.Health.Fhir.Proxy.Filters.FilterFactory.GetNames
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Microsoft.Health.Fhir.Proxy.Filters.FilterFactory.Clear*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Filters.FilterFactory.Clear
  name: Clear
  nameWithType: FilterFactory.Clear
  fullName: Microsoft.Health.Fhir.Proxy.Filters.FilterFactory.Clear
- uid: Microsoft.Health.Fhir.Proxy.Filters.FilterFactory.Create*
  commentId: Overload:Microsoft.Health.Fhir.Proxy.Filters.FilterFactory.Create
  name: Create
  nameWithType: FilterFactory.Create
  fullName: Microsoft.Health.Fhir.Proxy.Filters.FilterFactory.Create
- uid: Microsoft.Health.Fhir.Proxy.Filters.IFilter
  commentId: T:Microsoft.Health.Fhir.Proxy.Filters.IFilter
  parent: Microsoft.Health.Fhir.Proxy.Filters
  name: IFilter
  nameWithType: IFilter
  fullName: Microsoft.Health.Fhir.Proxy.Filters.IFilter
