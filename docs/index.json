{
  "README.html": {
    "href": "README.html",
    "title": "Introduction | Title",
    "keywords": "Introduction TODO: Give a short introduction of your project. Let this section explain the objectives or the motivation behind this project. Getting Started TODO: Guide users through getting your code up and running on their own system. In this section you can talk about: Installation process Software dependencies Latest releases API references Build and Test TODO: Describe and show how to build your code and run the tests. Contribute TODO: Explain how other users and developers can contribute to make your code better. If you want to learn more about creating good readme files then refer the following guidelines . You can also seek inspiration from the below readme files: ASP.NET Core Visual Studio Code Chakra Core"
  },
  "reference/Microsoft.Health.Fhir.Proxy.Bindings.CoupledPipelineBinding.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Bindings.CoupledPipelineBinding.html",
    "title": "Class CoupledPipelineBinding | Title",
    "keywords": "Class CoupledPipelineBinding A binding that does no work, but couples an input to output pipeline or acts as a terminator for an input pipeline. Inheritance Object PipelineBinding CoupledPipelineBinding Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Microsoft.Health.Fhir.Proxy.Bindings Assembly : Microsoft.Health.Fhir.Proxy.dll Syntax public class CoupledPipelineBinding : PipelineBinding Constructors View Source CoupledPipelineBinding(ILogger) Creates an instance of the CoupledPipelineBinding. Declaration public CoupledPipelineBinding(ILogger logger = null) Parameters Type Name Description ILogger logger Properties View Source Id Gets a unique ID of the binding instance. Declaration public override string Id { get; } Property Value Type Description String Overrides PipelineBinding.Id View Source Name Gets the name of the binding \"CoupledPipelineBinding\". Declaration public override string Name { get; } Property Value Type Description String Overrides PipelineBinding.Name Methods View Source ExecuteAsync(OperationContext) Executes the binding. Declaration public override async Task<OperationContext> ExecuteAsync(OperationContext context) Parameters Type Name Description OperationContext context Operation context. Returns Type Description Task < OperationContext > Operation context. Overrides PipelineBinding.ExecuteAsync(OperationContext) Events View Source OnComplete An event that signals the binding has completed. Declaration public override event EventHandler<PipelineCompleteEventArgs> OnComplete Event Type Type Description EventHandler < PipelineCompleteEventArgs > Overrides PipelineBinding.OnComplete View Source OnError An event that signals an error in the binding. Declaration public override event EventHandler<PipelineErrorEventArgs> OnError Event Type Type Description EventHandler < PipelineErrorEventArgs > Overrides PipelineBinding.OnError"
  },
  "reference/Microsoft.Health.Fhir.Proxy.Bindings.FhirPipelineBinding.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Bindings.FhirPipelineBinding.html",
    "title": "Class FhirPipelineBinding | Title",
    "keywords": "Class FhirPipelineBinding A binding used to call the FHIR server and couples input/output pipelines or acts as terminator for an input pipeline. Inheritance Object PipelineBinding FhirPipelineBinding Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Microsoft.Health.Fhir.Proxy.Bindings Assembly : Microsoft.Health.Fhir.Proxy.dll Syntax public class FhirPipelineBinding : PipelineBinding Constructors View Source FhirPipelineBinding(ILogger) Creates an instanc of the FhirPipelineBinding. Declaration public FhirPipelineBinding(ILogger logger = null) Parameters Type Name Description ILogger logger Optional logger View Source FhirPipelineBinding(X509Certificate2, ILogger) Creates an instance of the FhirPipelineBinding. Declaration public FhirPipelineBinding(X509Certificate2 certificate, ILogger logger = null) Parameters Type Name Description X509Certificate2 certificate X509 certificate used a security token when calling the FHIR server. ILogger logger Optional logger. Properties View Source Id Gets a unique ID of the binding instance. Declaration public override string Id { get; } Property Value Type Description String Overrides PipelineBinding.Id View Source Name Gets the name of the binding \"FhirPipelineBinding\". Declaration public override string Name { get; } Property Value Type Description String Overrides PipelineBinding.Name Methods View Source ExecuteAsync(OperationContext) Executes the binding. Declaration public override async Task<OperationContext> ExecuteAsync(OperationContext context) Parameters Type Name Description OperationContext context Operation context. Returns Type Description Task < OperationContext > Operation context. Overrides PipelineBinding.ExecuteAsync(OperationContext) Events View Source OnComplete An event that signals the binding has completed. Declaration public override event EventHandler<PipelineCompleteEventArgs> OnComplete Event Type Type Description EventHandler < PipelineCompleteEventArgs > Overrides PipelineBinding.OnComplete View Source OnError An event that signals an error in the binding. Declaration public override event EventHandler<PipelineErrorEventArgs> OnError Event Type Type Description EventHandler < PipelineErrorEventArgs > Overrides PipelineBinding.OnError"
  },
  "reference/Microsoft.Health.Fhir.Proxy.Bindings.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Bindings.html",
    "title": "Namespace Microsoft.Health.Fhir.Proxy.Bindings | Title",
    "keywords": "Namespace Microsoft.Health.Fhir.Proxy.Bindings Classes CoupledPipelineBinding A binding that does no work, but couples an input to output pipeline or acts as a terminator for an input pipeline. FhirPipelineBinding A binding used to call the FHIR server and couples input/output pipelines or acts as terminator for an input pipeline. PipelineBinding Abstract binding used to couple pipelines or act as pipeline termination."
  },
  "reference/Microsoft.Health.Fhir.Proxy.Bindings.PipelineBinding.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Bindings.PipelineBinding.html",
    "title": "Class PipelineBinding | Title",
    "keywords": "Class PipelineBinding Abstract binding used to couple pipelines or act as pipeline termination. Inheritance Object PipelineBinding CoupledPipelineBinding FhirPipelineBinding Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Microsoft.Health.Fhir.Proxy.Bindings Assembly : Microsoft.Health.Fhir.Proxy.dll Syntax public abstract class PipelineBinding Properties View Source Id Gets the unique id on the binding instance. Declaration public abstract string Id { get; } Property Value Type Description String View Source Name Gets the name of the binding. Declaration public abstract string Name { get; } Property Value Type Description String Methods View Source ExecuteAsync(OperationContext) Executes binding. Declaration public abstract Task<OperationContext> ExecuteAsync(OperationContext context) Parameters Type Name Description OperationContext context Operation context. Returns Type Description Task < OperationContext > Operation context. Events View Source OnComplete An event that signals an error in the binding. Declaration public abstract event EventHandler<PipelineCompleteEventArgs> OnComplete Event Type Type Description EventHandler < PipelineCompleteEventArgs > View Source OnError An event that signals an error in the binding. Declaration public abstract event EventHandler<PipelineErrorEventArgs> OnError Event Type Type Description EventHandler < PipelineErrorEventArgs >"
  },
  "reference/Microsoft.Health.Fhir.Proxy.Channels.ChannelCloseEventArgs.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Channels.ChannelCloseEventArgs.html",
    "title": "Class ChannelCloseEventArgs | Title",
    "keywords": "Class ChannelCloseEventArgs Event args for Channel close event. Inheritance Object EventArgs ChannelCloseEventArgs Inherited Members EventArgs.Empty Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Microsoft.Health.Fhir.Proxy.Channels Assembly : Microsoft.Health.Fhir.Proxy.dll Syntax public class ChannelCloseEventArgs : EventArgs Constructors View Source ChannelCloseEventArgs(String, String) Creates an instance of ChannelCloseEventArgs. Declaration public ChannelCloseEventArgs(string id, string name) Parameters Type Name Description String id Channel instance ID. String name Name of the channel. Properties View Source Id Gets the channel instance ID. Declaration public string Id { get; } Property Value Type Description String View Source Name Gets the name of the channel. Declaration public string Name { get; } Property Value Type Description String"
  },
  "reference/Microsoft.Health.Fhir.Proxy.Channels.ChannelCollection.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Channels.ChannelCollection.html",
    "title": "Class ChannelCollection | Title",
    "keywords": "Class ChannelCollection A collection of channels. Inheritance Object ChannelCollection Implements IList < IChannel > ICollection < IChannel > IEnumerable < IChannel > IEnumerable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Microsoft.Health.Fhir.Proxy.Channels Assembly : Microsoft.Health.Fhir.Proxy.dll Syntax public class ChannelCollection : IList<IChannel>, ICollection<IChannel>, IEnumerable<IChannel>, IEnumerable Constructors View Source ChannelCollection() Creates an instance of the channel collection. Declaration public ChannelCollection() Properties View Source Count Gets the number of channels in the collection. Declaration public int Count { get; } Property Value Type Description Int32 View Source IsReadOnly Gets an indicator of whether the channel is read-only. Declaration public bool IsReadOnly { get; } Property Value Type Description Boolean View Source Item[Int32] Gets a channel in the collection by its index. Declaration public IChannel this[int index] { get; set; } Parameters Type Name Description Int32 index Index of channel to return. Property Value Type Description IChannel IChannel Methods View Source Add(IChannel) Adds a channel to the collection. Declaration public void Add(IChannel item) Parameters Type Name Description IChannel item Channel to add to the collection. View Source Clear() Clears the channel collections. Declaration public void Clear() View Source Contains(IChannel) Indicates whether a channel is contained in the collection. Declaration public bool Contains(IChannel item) Parameters Type Name Description IChannel item Channel used to determined if it is in the collection. Returns Type Description Boolean True is channel in is the collection; otherwise false. View Source CopyTo(IChannel[], Int32) Copies the channel collection into an array starting at the index. Declaration public void CopyTo(IChannel[] array, int arrayIndex) Parameters Type Name Description IChannel [] array Array to fill with channel collection. Int32 arrayIndex Starting index to fill the array. View Source GetEnumerator() Gets an enumerator for the channels in the collection. Declaration public IEnumerator<IChannel> GetEnumerator() Returns Type Description IEnumerator < IChannel > Enumerator of channels. View Source IndexOf(IChannel) Finds the index of a channel. Declaration public int IndexOf(IChannel item) Parameters Type Name Description IChannel item The channel to return the index. Returns Type Description Int32 Index of the input channel in the collection. View Source Insert(Int32, IChannel) Inserts a channel into the collection. Declaration public void Insert(int index, IChannel item) Parameters Type Name Description Int32 index Index of the channel insertion. IChannel item Channel to insert. View Source Remove(IChannel) Removes a channel from the collection. Declaration public bool Remove(IChannel item) Parameters Type Name Description IChannel item Channel to remove. Returns Type Description Boolean True is the channel is removed; otherwise false. View Source RemoveAt(Int32) Remove a channel from the collection by its index. Declaration public void RemoveAt(int index) Parameters Type Name Description Int32 index Index of channel to remove. Explicit Interface Implementations View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "reference/Microsoft.Health.Fhir.Proxy.Channels.ChannelErrorEventArgs.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Channels.ChannelErrorEventArgs.html",
    "title": "Class ChannelErrorEventArgs | Title",
    "keywords": "Class ChannelErrorEventArgs Events args for channel error events. Inheritance Object EventArgs ChannelErrorEventArgs Inherited Members EventArgs.Empty Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Microsoft.Health.Fhir.Proxy.Channels Assembly : Microsoft.Health.Fhir.Proxy.dll Syntax public class ChannelErrorEventArgs : EventArgs Constructors View Source ChannelErrorEventArgs(String, String, Exception) Creates an instance of ChannelErrorEventArgs. Declaration public ChannelErrorEventArgs(string id, string name, Exception error) Parameters Type Name Description String id Unique ID of the channel instance. String name Name of the channel. Exception error Exception that occurred in the channel. Properties View Source Error Gets error that occurred in the channel. Declaration public Exception Error { get; } Property Value Type Description Exception View Source Id Gets channel instance ID. Declaration public string Id { get; } Property Value Type Description String View Source Name Gets name of the channel. Declaration public string Name { get; } Property Value Type Description String"
  },
  "reference/Microsoft.Health.Fhir.Proxy.Channels.ChannelFactory.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Channels.ChannelFactory.html",
    "title": "Class ChannelFactory | Title",
    "keywords": "Class ChannelFactory A factory of channels. Inheritance Object ChannelFactory Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Microsoft.Health.Fhir.Proxy.Channels Assembly : Microsoft.Health.Fhir.Proxy.dll Syntax public abstract class ChannelFactory Methods View Source Clear() Clears the channel factory. Declaration public static void Clear() View Source Create(String) Create a channel from the factory by its name. Declaration public static IChannel Create(string name) Parameters Type Name Description String name Name of the channel in the factory to create. Returns Type Description IChannel IChannel View Source GetNames() Gets an array of channel names. Declaration public static string[] GetNames() Returns Type Description String [] Array string names. View Source Register(String, Type, Object[]) Registers a channel in the factory. Declaration public static void Register(string name, Type type, object[] args) Parameters Type Name Description String name Channel name that matches the name property of the channel. Type type Type of channel. Object [] args Arguments used in the constructor of the channel type."
  },
  "reference/Microsoft.Health.Fhir.Proxy.Channels.ChannelOpenEventArgs.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Channels.ChannelOpenEventArgs.html",
    "title": "Class ChannelOpenEventArgs | Title",
    "keywords": "Class ChannelOpenEventArgs Events args for channel open events. Inheritance Object EventArgs ChannelOpenEventArgs Inherited Members EventArgs.Empty Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Microsoft.Health.Fhir.Proxy.Channels Assembly : Microsoft.Health.Fhir.Proxy.dll Syntax public class ChannelOpenEventArgs : EventArgs Constructors View Source ChannelOpenEventArgs(String, String, Object) Creates an instance of ChannelOpenEventArgs. Declaration public ChannelOpenEventArgs(string id, string name, dynamic message) Parameters Type Name Description String id Channel instance ID. String name Channel name. Object message Message received when opening the channel. Properties View Source Id Gets the channel instance ID. Declaration public string Id { get; } Property Value Type Description String View Source Message Gets the message (optional) when the channel is opened. Declaration public dynamic Message { get; } Property Value Type Description Object View Source Name Gets the channel name. Declaration public string Name { get; } Property Value Type Description String"
  },
  "reference/Microsoft.Health.Fhir.Proxy.Channels.ChannelReceivedEventArgs.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Channels.ChannelReceivedEventArgs.html",
    "title": "Class ChannelReceivedEventArgs | Title",
    "keywords": "Class ChannelReceivedEventArgs Events args for channel receive events. Inheritance Object EventArgs ChannelReceivedEventArgs Inherited Members EventArgs.Empty Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Microsoft.Health.Fhir.Proxy.Channels Assembly : Microsoft.Health.Fhir.Proxy.dll Syntax public class ChannelReceivedEventArgs : EventArgs Constructors View Source ChannelReceivedEventArgs(String, String, Byte[]) Creates an instance of ChannelReceivedEventArgs. Declaration public ChannelReceivedEventArgs(string id, string name, byte[] message) Parameters Type Name Description String id Channel instance ID. String name Channel name. Byte [] message Message received by the channel. View Source ChannelReceivedEventArgs(String, String, Byte[], IEnumerable<KeyValuePair<String, String>>) Creates an instance of ChannelReceivedEventArgs. Declaration public ChannelReceivedEventArgs(string id, string name, byte[] message, IEnumerable<KeyValuePair<string, string>> properties) Parameters Type Name Description String id Channel instance ID. String name Channel name. Byte [] message Message received by the channel. IEnumerable < KeyValuePair < String , String >> properties Additional properties to be passed. Properties View Source Id Gets channel instance ID. Declaration public string Id { get; } Property Value Type Description String View Source Message Message received by the channel. Declaration public byte[] Message { get; } Property Value Type Description Byte [] View Source Name Gets channel name. Declaration public string Name { get; } Property Value Type Description String View Source Properties Gets additional properties passed on the channel receive. Declaration public IEnumerable<KeyValuePair<string, string>> Properties { get; } Property Value Type Description IEnumerable < KeyValuePair < String , String >>"
  },
  "reference/Microsoft.Health.Fhir.Proxy.Channels.ChannelState.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Channels.ChannelState.html",
    "title": "Enum ChannelState | Title",
    "keywords": "Enum ChannelState An enumeration of channel states. Namespace : Microsoft.Health.Fhir.Proxy.Channels Assembly : Microsoft.Health.Fhir.Proxy.dll Syntax public enum ChannelState Fields Name Description Aborted Closed ClosedReceived CloseSent Connecting None Open"
  },
  "reference/Microsoft.Health.Fhir.Proxy.Channels.ChannelStateEventArgs.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Channels.ChannelStateEventArgs.html",
    "title": "Class ChannelStateEventArgs | Title",
    "keywords": "Class ChannelStateEventArgs Events args for channel state change events. Inheritance Object EventArgs ChannelStateEventArgs Inherited Members EventArgs.Empty Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Microsoft.Health.Fhir.Proxy.Channels Assembly : Microsoft.Health.Fhir.Proxy.dll Syntax public class ChannelStateEventArgs : EventArgs Constructors View Source ChannelStateEventArgs(String, ChannelState) Creates an instance of ChannelStateEventArgs. Declaration public ChannelStateEventArgs(string id, ChannelState state) Parameters Type Name Description String id The channel instance ID. ChannelState state The state of the channel. Properties View Source Id Gets the ID of the channel instance. Declaration public string Id { get; } Property Value Type Description String View Source State Gets the state of the channel. Declaration public ChannelState State { get; } Property Value Type Description ChannelState"
  },
  "reference/Microsoft.Health.Fhir.Proxy.Channels.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Channels.html",
    "title": "Namespace Microsoft.Health.Fhir.Proxy.Channels | Title",
    "keywords": "Namespace Microsoft.Health.Fhir.Proxy.Channels Classes ChannelCloseEventArgs Event args for Channel close event. ChannelCollection A collection of channels. ChannelErrorEventArgs Events args for channel error events. ChannelFactory A factory of channels. ChannelOpenEventArgs Events args for channel open events. ChannelReceivedEventArgs Events args for channel receive events. ChannelStateEventArgs Events args for channel state change events. Interfaces IChannel Interface for channels. Enums ChannelState An enumeration of channel states."
  },
  "reference/Microsoft.Health.Fhir.Proxy.Channels.IChannel.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Channels.IChannel.html",
    "title": "Interface IChannel | Title",
    "keywords": "Interface IChannel Interface for channels. Inherited Members IDisposable.Dispose() Namespace : Microsoft.Health.Fhir.Proxy.Channels Assembly : Microsoft.Health.Fhir.Proxy.dll Syntax public interface IChannel : IDisposable Properties View Source Id Gets a unique id for the channel instance. Declaration string Id { get; } Property Value Type Description String View Source IsAuthenticated Gets an indicator of whether the identity that received the channel connection is authenticated. Declaration bool IsAuthenticated { get; } Property Value Type Description Boolean View Source IsEncrypted Gets an indicateor of whether the channel is encrypted. Declaration bool IsEncrypted { get; } Property Value Type Description Boolean View Source Name Gets a name for the type of channel. Declaration string Name { get; } Property Value Type Description String View Source Port Gets the port opened by the channel. Declaration int Port { get; } Property Value Type Description Int32 View Source State Gets the state of the channel. Declaration ChannelState State { get; } Property Value Type Description ChannelState Methods View Source AddMessageAsync(Byte[]) Injects a message into the channel. Useful with connectionless layer-2 protocols. Declaration Task AddMessageAsync(byte[] message) Parameters Type Name Description Byte [] message Messages to add when needing auxiliary access to channel. Returns Type Description Task Task View Source CloseAsync() Closes the channel. Declaration Task CloseAsync() Returns Type Description Task Task View Source OpenAsync() Opens the channel. Declaration Task OpenAsync() Returns Type Description Task Task View Source ReceiveAsync() Starts the receive process for the channel. Declaration Task ReceiveAsync() Returns Type Description Task Task View Source SendAsync(Byte[], Object[]) Sends a message on the channel. Declaration Task SendAsync(byte[] message, params object[] items) Parameters Type Name Description Byte [] message Message to send. Object [] items Optional parameters to use when sending. Returns Type Description Task Task Events View Source OnClose Event signals the close on the channel. Declaration event EventHandler<ChannelCloseEventArgs> OnClose Event Type Type Description EventHandler < ChannelCloseEventArgs > View Source OnError Event signals an error in the channel. Declaration event EventHandler<ChannelErrorEventArgs> OnError Event Type Type Description EventHandler < ChannelErrorEventArgs > View Source OnOpen Event signals the channel is open and connected. Declaration event EventHandler<ChannelOpenEventArgs> OnOpen Event Type Type Description EventHandler < ChannelOpenEventArgs > View Source OnReceive Event signals a message received by the channel. Declaration event EventHandler<ChannelReceivedEventArgs> OnReceive Event Type Type Description EventHandler < ChannelReceivedEventArgs > View Source OnStateChange Event signals a change in the state of the channel. Declaration event EventHandler<ChannelStateEventArgs> OnStateChange Event Type Type Description EventHandler < ChannelStateEventArgs >"
  },
  "reference/Microsoft.Health.Fhir.Proxy.Clients.Constants.ContentTypes.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Clients.Constants.ContentTypes.html",
    "title": "Class Constants.ContentTypes | Title",
    "keywords": "Class Constants.ContentTypes Inheritance Object Constants.ContentTypes Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Microsoft.Health.Fhir.Proxy.Clients Assembly : Microsoft.Health.Fhir.Proxy.dll Syntax public class ContentTypes Fields View Source Json Declaration public const string Json = \"application/json\" Field Value Type Description String"
  },
  "reference/Microsoft.Health.Fhir.Proxy.Clients.Constants.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Clients.Constants.html",
    "title": "Class Constants | Title",
    "keywords": "Class Constants Inheritance Object Constants Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Microsoft.Health.Fhir.Proxy.Clients Assembly : Microsoft.Health.Fhir.Proxy.dll Syntax public class Constants"
  },
  "reference/Microsoft.Health.Fhir.Proxy.Clients.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Clients.html",
    "title": "Namespace Microsoft.Health.Fhir.Proxy.Clients | Title",
    "keywords": "Namespace Microsoft.Health.Fhir.Proxy.Clients Classes Constants Constants.ContentTypes HttpRequestMessageExtensions Extensions for HttpRequestMessage. RestRequest Makes an HTTP request to a web server. RestRequestBuilder Builder pattern for REST requests. Retry Async http request retry logic. RetryException Retry exception."
  },
  "reference/Microsoft.Health.Fhir.Proxy.Clients.HttpRequestMessageExtensions.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Clients.HttpRequestMessageExtensions.html",
    "title": "Class HttpRequestMessageExtensions | Title",
    "keywords": "Class HttpRequestMessageExtensions Extensions for HttpRequestMessage. Inheritance Object HttpRequestMessageExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Microsoft.Health.Fhir.Proxy.Clients Assembly : Microsoft.Health.Fhir.Proxy.dll Syntax public static class HttpRequestMessageExtensions Methods View Source GetHeaders(HttpRequestMessage) Converts HttpRequestMessage headers into a NameValueCollection. Declaration public static NameValueCollection GetHeaders(this HttpRequestMessage request) Parameters Type Name Description HttpRequestMessage request Request message. Returns Type Description NameValueCollection NameValueCollection of http headers."
  },
  "reference/Microsoft.Health.Fhir.Proxy.Clients.RestRequest.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Clients.RestRequest.html",
    "title": "Class RestRequest | Title",
    "keywords": "Class RestRequest Makes an HTTP request to a web server. Inheritance Object RestRequest Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Microsoft.Health.Fhir.Proxy.Clients Assembly : Microsoft.Health.Fhir.Proxy.dll Syntax public class RestRequest Constructors View Source RestRequest(RestRequestBuilder, Int32, ILogger) Creates an instance of the RestRequest. Declaration public RestRequest(RestRequestBuilder builder, int blockSize = 16384, ILogger logger = null) Parameters Type Name Description RestRequestBuilder builder REST request builder that creates the HttpWebRequest object. Int32 blockSize The number of bytes to be read in block; default is 16384. ILogger logger Optional logger. View Source RestRequest(Int32, ILogger) Declaration protected RestRequest(int blockSize = 16384, ILogger logger = null) Parameters Type Name Description Int32 blockSize ILogger logger Methods View Source SendAsync() Sends and http request and returns a response. Declaration public virtual async Task<HttpResponseMessage> SendAsync() Returns Type Description Task < HttpResponseMessage > HttpResponseMessage"
  },
  "reference/Microsoft.Health.Fhir.Proxy.Clients.RestRequestBuilder.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Clients.RestRequestBuilder.html",
    "title": "Class RestRequestBuilder | Title",
    "keywords": "Class RestRequestBuilder Builder pattern for REST requests. Inheritance Object RestRequestBuilder Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Microsoft.Health.Fhir.Proxy.Clients Assembly : Microsoft.Health.Fhir.Proxy.dll Syntax public class RestRequestBuilder Constructors View Source RestRequestBuilder(String, String, X509Certificate2, String, String, NameValueCollection, Byte[], String) Creates an instance of RestRequestBuilder. Declaration public RestRequestBuilder(string method, string baseUrl, X509Certificate2 certificate, string path, string query, NameValueCollection headers, byte[] content, string contentType = \"application/json\") Parameters Type Name Description String method Http Method. String baseUrl Base URL for http request, i.e., scheme and authority. X509Certificate2 certificate X509 certificate to use as a security token. String path Path of the http request, i.e., scheme://authority/path String query Query string for http request. NameValueCollection headers Http headers to add to request. Byte [] content Body content of the http request. String contentType Content type of the http request. View Source RestRequestBuilder(String, String, String, String, String, NameValueCollection, Byte[], String) Creates an instance of RestRequestBuilder. Declaration public RestRequestBuilder(string method, string baseUrl, string securityToken, string path, string query, NameValueCollection headers, byte[] content, string contentType = \"application/json\") Parameters Type Name Description String method Http Method. String baseUrl Base URL for http request, i.e., scheme and authority. String securityToken Security token for http request. String path Path of the http request, i.e., scheme://authority/path String query Query string for http request. NameValueCollection headers Http headers to add to request. Byte [] content Body content of the http request. String contentType Content type of the http request. Properties View Source BaseUrl Gets the base url of the request. Declaration public string BaseUrl { get; } Property Value Type Description String View Source Certificate Get a client certificate if used in the request. Declaration public X509Certificate2 Certificate { get; } Property Value Type Description X509Certificate2 View Source Content Gets the content of the request. Declaration public byte[] Content { get; } Property Value Type Description Byte [] View Source ContentType Gets the content type of the request. Declaration public string ContentType { get; } Property Value Type Description String View Source Headers Gets a collection of HTTP headers of the request. Declaration public NameValueCollection Headers { get; } Property Value Type Description NameValueCollection View Source Method Gets the HTTP method of the request. Declaration public string Method { get; } Property Value Type Description String View Source Path Gets the path of the request. Declaration public string Path { get; } Property Value Type Description String View Source QueryString Gets the query string of the request. Declaration public string QueryString { get; } Property Value Type Description String View Source SecurityToken Gets a security token (JWT) if used in the request. Declaration public string SecurityToken { get; } Property Value Type Description String Methods View Source Build() Builds an Http Web Request. Declaration public HttpWebRequest Build() Returns Type Description HttpWebRequest HttpWebRequest"
  },
  "reference/Microsoft.Health.Fhir.Proxy.Clients.Retry.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Clients.Retry.html",
    "title": "Class Retry | Title",
    "keywords": "Class Retry Async http request retry logic. Inheritance Object Retry Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Microsoft.Health.Fhir.Proxy.Clients Assembly : Microsoft.Health.Fhir.Proxy.dll Syntax public static class Retry Methods View Source Execute<T>(Func<Task<T>>, TimeSpan, Int32, ILogger) Executes an http request with retry logic. Declaration public static async Task<T> Execute<T>(Func<Task<T>> func, TimeSpan deltaBackoff, int maxRetries, ILogger logger = null) Parameters Type Name Description Func < Task <T>> func Function that executes the rest request. TimeSpan deltaBackoff Time to wait for retry if request fails. Int32 maxRetries Maxiumum number of times to retry failed requests. ILogger logger ILogger Returns Type Description Task <T> Type returned by the executing function. Type Parameters Name Description T The type return by the executing function. View Source ExecuteRequest(RestRequest, TimeSpan, Int32, ILogger) Executes an http request with retry logic. Declaration public static async Task<HttpResponseMessage> ExecuteRequest(RestRequest request, TimeSpan deltaBackoff, int maxRetries, ILogger logger = null) Parameters Type Name Description RestRequest request Rest request to send. TimeSpan deltaBackoff Time to wait for retry if request fails. Int32 maxRetries Maxiumum number of times to retry failed requests. ILogger logger ILogger Returns Type Description Task < HttpResponseMessage > HttpResponseMessage"
  },
  "reference/Microsoft.Health.Fhir.Proxy.Clients.RetryException.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Clients.RetryException.html",
    "title": "Class RetryException | Title",
    "keywords": "Class RetryException Retry exception. Inheritance Object Exception RetryException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Microsoft.Health.Fhir.Proxy.Clients Assembly : Microsoft.Health.Fhir.Proxy.dll Syntax public class RetryException : Exception, ISerializable Constructors View Source RetryException() Creates an instance of RetryException. Declaration public RetryException() View Source RetryException(SerializationInfo, StreamingContext) Declaration protected RetryException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info StreamingContext context View Source RetryException(String) Creates an instance of RetryException. Declaration public RetryException(string message) Parameters Type Name Description String message Exception message. View Source RetryException(String, Exception) Creates an instance of RetryException. Declaration public RetryException(string message, Exception innerException) Parameters Type Name Description String message Exception message. Exception innerException Inner exception. Implements System.Runtime.Serialization.ISerializable"
  },
  "reference/Microsoft.Health.Fhir.Proxy.Commands.CommandException.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Commands.CommandException.html",
    "title": "Class CommandException | Title",
    "keywords": "Class CommandException Command exception. Inheritance Object Exception CommandException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Microsoft.Health.Fhir.Proxy.Commands Assembly : Microsoft.Health.Fhir.Proxy.dll Syntax public class CommandException : Exception, ISerializable Constructors View Source CommandException() Creates an instance of CommandException. Declaration public CommandException() View Source CommandException(SerializationInfo, StreamingContext) Declaration protected CommandException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info StreamingContext context View Source CommandException(String) Creates an instance of CommandException. Declaration public CommandException(string message) Parameters Type Name Description String message Exception message. View Source CommandException(String, Exception) Creates an instance of CommandException. Declaration public CommandException(string message, Exception innerException) Parameters Type Name Description String message Exception message. Exception innerException Inner exception. Implements System.Runtime.Serialization.ISerializable"
  },
  "reference/Microsoft.Health.Fhir.Proxy.Commands.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Commands.html",
    "title": "Namespace Microsoft.Health.Fhir.Proxy.Commands | Title",
    "keywords": "Namespace Microsoft.Health.Fhir.Proxy.Commands Classes CommandException Command exception. IsArrayCommand Command the verifies a JToken with Json path terminates at a JArray. IsMatchCommand<T> Command the verifies a JToken property value from Json path matches the supplied value. IsNotNullOrEmptyCommand Command the verifies a JToken with Json path has to non-null or non-empty value. IsNullOrEmptyCommand Command the verifies a JToken with Json path is null or empty value. TokenExistsCommand Command the verifies a JToken exists for Json path in a parent JToken. Interfaces IExceptionCommand Interface for commands."
  },
  "reference/Microsoft.Health.Fhir.Proxy.Commands.IExceptionCommand.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Commands.IExceptionCommand.html",
    "title": "Interface IExceptionCommand | Title",
    "keywords": "Interface IExceptionCommand Interface for commands. Namespace : Microsoft.Health.Fhir.Proxy.Commands Assembly : Microsoft.Health.Fhir.Proxy.dll Syntax public interface IExceptionCommand Methods View Source Execute() Executes the command. Declaration void Execute()"
  },
  "reference/Microsoft.Health.Fhir.Proxy.Commands.IsArrayCommand.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Commands.IsArrayCommand.html",
    "title": "Class IsArrayCommand | Title",
    "keywords": "Class IsArrayCommand Command the verifies a JToken with Json path terminates at a JArray. Inheritance Object IsArrayCommand Implements IExceptionCommand Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Microsoft.Health.Fhir.Proxy.Commands Assembly : Microsoft.Health.Fhir.Proxy.dll Syntax public class IsArrayCommand : IExceptionCommand Constructors View Source IsArrayCommand(JToken, String) Creates an instance of IsArrayCommand. Declaration public IsArrayCommand(JToken token, string jpath) Parameters Type Name Description Newtonsoft.Json.Linq.JToken token JToken to test. String jpath Json path in JToken to excepted JArray. Methods View Source Execute() Executes without exception if Json path for JToken is JArray. Declaration public void Execute() Implements IExceptionCommand"
  },
  "reference/Microsoft.Health.Fhir.Proxy.Commands.IsMatchCommand-1.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Commands.IsMatchCommand-1.html",
    "title": "Class IsMatchCommand<T> | Title",
    "keywords": "Class IsMatchCommand<T> Command the verifies a JToken property value from Json path matches the supplied value. Inheritance Object IsMatchCommand<T> Implements IExceptionCommand Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Microsoft.Health.Fhir.Proxy.Commands Assembly : Microsoft.Health.Fhir.Proxy.dll Syntax public class IsMatchCommand<T> : IExceptionCommand Type Parameters Name Description T Constructors View Source IsMatchCommand(JToken, String, T) Creates an instance of IsMatchCommand. Declaration public IsMatchCommand(JToken token, string jpath, T value) Parameters Type Name Description Newtonsoft.Json.Linq.JToken token JToken to test. String jpath Json path in JToken to leads to property to test value. T value Value to test for match. Methods View Source Execute() Executes without exception if Json path for JToken has a property value that matches supplied value. Declaration public void Execute() Implements IExceptionCommand"
  },
  "reference/Microsoft.Health.Fhir.Proxy.Commands.IsNotNullOrEmptyCommand.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Commands.IsNotNullOrEmptyCommand.html",
    "title": "Class IsNotNullOrEmptyCommand | Title",
    "keywords": "Class IsNotNullOrEmptyCommand Command the verifies a JToken with Json path has to non-null or non-empty value. Inheritance Object IsNotNullOrEmptyCommand Implements IExceptionCommand Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Microsoft.Health.Fhir.Proxy.Commands Assembly : Microsoft.Health.Fhir.Proxy.dll Syntax public class IsNotNullOrEmptyCommand : IExceptionCommand Constructors View Source IsNotNullOrEmptyCommand(JToken, String) Creates an instance of IsNotNullOrEmptyCommand. Declaration public IsNotNullOrEmptyCommand(JToken token, string jpath) Parameters Type Name Description Newtonsoft.Json.Linq.JToken token JToken to test. String jpath Json path to test for not null or empty in JToken. Methods View Source Execute() Executes without exception if Json path for JToken is non-null or non-empty. Declaration public void Execute() Implements IExceptionCommand"
  },
  "reference/Microsoft.Health.Fhir.Proxy.Commands.IsNullOrEmptyCommand.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Commands.IsNullOrEmptyCommand.html",
    "title": "Class IsNullOrEmptyCommand | Title",
    "keywords": "Class IsNullOrEmptyCommand Command the verifies a JToken with Json path is null or empty value. Inheritance Object IsNullOrEmptyCommand Implements IExceptionCommand Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Microsoft.Health.Fhir.Proxy.Commands Assembly : Microsoft.Health.Fhir.Proxy.dll Syntax public class IsNullOrEmptyCommand : IExceptionCommand Constructors View Source IsNullOrEmptyCommand(JToken, String) Creates an instance of IsNotNullOrEmptyCommand. Declaration public IsNullOrEmptyCommand(JToken token, string jpath) Parameters Type Name Description Newtonsoft.Json.Linq.JToken token JToken to test. String jpath Json path to test for null or empty in JToken. Methods View Source Execute() Executes without exception if Json path for JToken is null or empty. Declaration public void Execute() Implements IExceptionCommand"
  },
  "reference/Microsoft.Health.Fhir.Proxy.Commands.TokenExistsCommand.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Commands.TokenExistsCommand.html",
    "title": "Class TokenExistsCommand | Title",
    "keywords": "Class TokenExistsCommand Command the verifies a JToken exists for Json path in a parent JToken. Inheritance Object TokenExistsCommand Implements IExceptionCommand Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Microsoft.Health.Fhir.Proxy.Commands Assembly : Microsoft.Health.Fhir.Proxy.dll Syntax public class TokenExistsCommand : IExceptionCommand Constructors View Source TokenExistsCommand(JToken, String) Creates an instance of TokenExistsCommand. Declaration public TokenExistsCommand(JToken token, string jpath) Parameters Type Name Description Newtonsoft.Json.Linq.JToken token JToken to test. String jpath Json path to test for exists. Methods View Source Execute() Executes without exception if JToken exists in the Json path. Declaration public void Execute() Implements IExceptionCommand"
  },
  "reference/Microsoft.Health.Fhir.Proxy.Configuration.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Configuration.html",
    "title": "Namespace Microsoft.Health.Fhir.Proxy.Configuration | Title",
    "keywords": "Namespace Microsoft.Health.Fhir.Proxy.Configuration Classes PipelineSettings Settings for pipelines. ServiceConfig Service configuration for pipelines. UriExtensions Extensions for URIs."
  },
  "reference/Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Configuration.PipelineSettings.html",
    "title": "Class PipelineSettings | Title",
    "keywords": "Class PipelineSettings Settings for pipelines. Inheritance Object PipelineSettings Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Microsoft.Health.Fhir.Proxy.Configuration Assembly : Microsoft.Health.Fhir.Proxy.dll Syntax public class PipelineSettings Constructors View Source PipelineSettings() Creates a new instance of PipelineSettings. Declaration public PipelineSettings() View Source PipelineSettings(String, IEnumerable<String>, IEnumerable<String>) Creates a new instance of PipelineSettings. Declaration public PipelineSettings(string pipelineName, IEnumerable<string> filterNames, IEnumerable<string> channelNames) Parameters Type Name Description String pipelineName Name of pipeline to execute. IEnumerable < String > filterNames Names of filters implemented by pipeline. IEnumerable < String > channelNames Names of channels implemented by pipeline. Properties View Source ChannelNames Gets or sets a list of channels implemented by the pipeline. Declaration [JsonProperty(\"channels\")] public virtual List<string> ChannelNames { get; set; } Property Value Type Description List < String > View Source Default Default PipelineSettings instance. Declaration public static PipelineSettings Default { get; } Property Value Type Description PipelineSettings View Source FilterNames Gets or sets a list of filters implemented by the pipeline. Declaration [JsonProperty(\"filters\")] public virtual List<string> FilterNames { get; set; } Property Value Type Description List < String > View Source Name Gets or stes the name of the pipeline implemented. Declaration [JsonProperty(\"name\")] public virtual string Name { get; set; } Property Value Type Description String"
  },
  "reference/Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Configuration.ServiceConfig.html",
    "title": "Class ServiceConfig | Title",
    "keywords": "Class ServiceConfig Service configuration for pipelines. Inheritance Object ServiceConfig Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Microsoft.Health.Fhir.Proxy.Configuration Assembly : Microsoft.Health.Fhir.Proxy.dll Syntax [JsonObject] [Serializable] public class ServiceConfig Constructors View Source ServiceConfig() Declaration public ServiceConfig() Properties View Source Certficate Declaration [JsonIgnore] public X509Certificate2 Certficate { get; } Property Value Type Description X509Certificate2 View Source ClientId AAD client id for authentication. Declaration [JsonProperty(\"clientId\")] public string ClientId { get; set; } Property Value Type Description String Remarks Property can be omitted with using either (i) MSI or (ii) X509 certificate for authentication View Source ClientSecret AAD client secret for authentication. Declaration [JsonProperty(\"clientSecret\")] public string ClientSecret { get; set; } Property Value Type Description String Remarks Property can be omitted with using either (i) MSI or (ii) X509 certificate for authentication View Source FhirServerUrl Gets or sets the FHIR server URL. Declaration [JsonProperty(\"fhirServiceUrl\")] public string FhirServerUrl { get; set; } Property Value Type Description String View Source InstrumentationKey Gets or sets the instrumentation key used for app insights. Declaration [JsonProperty(\"instrumentationKey\")] public string InstrumentationKey { get; set; } Property Value Type Description String View Source KeyVaultCertificateName Name of the certificate to retreive from key vault. Declaration [JsonProperty(\"keyVaultCertificateName\")] public string KeyVaultCertificateName { get; set; } Property Value Type Description String Remarks Property can be omitted with using either (i) MSI or (ii) client_id and client_secret for authentication View Source KeyVaultUri Key vault URI required obtaining a certificate for AAD authentication. Declaration [JsonProperty(\"keyVaultUri\")] public string KeyVaultUri { get; set; } Property Value Type Description String Remarks Property can be omitted with using either (i) MSI or (ii) client_id and client_secret for authentication View Source LoggingLevel Gets or sets the log level used for app insights. Declaration [JsonProperty(\"logLevel\")] public LogLevel LoggingLevel { get; set; } Property Value Type Description LogLevel View Source SystemManagedIdentity Gets an indicators that is true when MSI is used; otherwise false. Declaration [JsonIgnore] public bool SystemManagedIdentity { get; } Property Value Type Description Boolean View Source TenantId Gets or sets Tenant ID used for AAD authentication. Declaration [JsonProperty(\"tenantId\")] public string TenantId { get; set; } Property Value Type Description String"
  },
  "reference/Microsoft.Health.Fhir.Proxy.Configuration.UriExtensions.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Configuration.UriExtensions.html",
    "title": "Class UriExtensions | Title",
    "keywords": "Class UriExtensions Extensions for URIs. Inheritance Object UriExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Microsoft.Health.Fhir.Proxy.Configuration Assembly : Microsoft.Health.Fhir.Proxy.dll Syntax public static class UriExtensions Methods View Source RemoveRoutePrefix(Uri, String) Removes a route prefix in a URI. Declaration public static Uri RemoveRoutePrefix(this Uri uri, string routePrefix) Parameters Type Name Description Uri uri URI to remove route prefix. String routePrefix Route prefix to remove. Returns Type Description Uri"
  },
  "reference/Microsoft.Health.Fhir.Proxy.Extensions.Channels.BlobStorageChannel.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Extensions.Channels.BlobStorageChannel.html",
    "title": "Class BlobStorageChannel | Title",
    "keywords": "Class BlobStorageChannel Channel that sends events to Azure blob storage. Inheritance Object BlobStorageChannel Implements IChannel IDisposable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Microsoft.Health.Fhir.Proxy.Extensions.Channels Assembly : Microsoft.Health.Fhir.Proxy.Extensions.Channels.dll Syntax public class BlobStorageChannel : IChannel, IDisposable Constructors View Source BlobStorageChannel(BlobStorageConfig, ILogger) Creates an instance of BlobStorageChannel. Declaration public BlobStorageChannel(BlobStorageConfig config, ILogger logger = null) Parameters Type Name Description BlobStorageConfig config Channel configuration. ILogger logger Optional ILogger Properties View Source Id Gets the instance ID of the channel. Declaration public string Id { get; } Property Value Type Description String View Source IsAuthenticated Gets and indicator to whether the channel has authenticated the user, which by default always false. Declaration public bool IsAuthenticated { get; } Property Value Type Description Boolean View Source IsEncrypted Indicates whether the channel is encrypted, which is always true. Declaration public bool IsEncrypted { get; } Property Value Type Description Boolean View Source Name Gets the name of the channel, i.e., \"BlobStorageChannel\". Declaration public string Name { get; } Property Value Type Description String View Source Port Gets the port used, which by default always 0. Declaration public int Port { get; } Property Value Type Description Int32 View Source State Gets or sets the channel state. Declaration public ChannelState State { get; set; } Property Value Type Description ChannelState Methods View Source AddMessageAsync(Byte[]) Add a message to the channel which is surface by the OnReceive event. Declaration public async Task AddMessageAsync(byte[] message) Parameters Type Name Description Byte [] message Message to add. Returns Type Description Task Task View Source CloseAsync() Closes the channel. Declaration public async Task CloseAsync() Returns Type Description Task Task View Source Dispose() Disposes the channel. Declaration public void Dispose() View Source Dispose(Boolean) Declaration protected void Dispose(bool disposing) Parameters Type Name Description Boolean disposing View Source OpenAsync() Opens the channel. Declaration public async Task OpenAsync() Returns Type Description Task Task View Source ReceiveAsync() Starts the recieve operation for the channel. Declaration public async Task ReceiveAsync() Returns Type Description Task Task Remarks Receive operation is omitted without error for BlobStorageChannel. View Source SendAsync(Byte[], Object[]) Declaration public async Task SendAsync(byte[] message, params object[] items) Parameters Type Name Description Byte [] message Object [] items Returns Type Description Task Events View Source OnClose Event that signals the channel has closed. Declaration public event EventHandler<ChannelCloseEventArgs> OnClose Event Type Type Description EventHandler < ChannelCloseEventArgs > View Source OnError Event that signals the channel has errored. Declaration public event EventHandler<ChannelErrorEventArgs> OnError Event Type Type Description EventHandler < ChannelErrorEventArgs > View Source OnOpen Event that signals the channel has opened. Declaration public event EventHandler<ChannelOpenEventArgs> OnOpen Event Type Type Description EventHandler < ChannelOpenEventArgs > View Source OnReceive Event that signals the channel as received a message. Declaration public event EventHandler<ChannelReceivedEventArgs> OnReceive Event Type Type Description EventHandler < ChannelReceivedEventArgs > View Source OnStateChange Event that signals the channel state has changed. Declaration public event EventHandler<ChannelStateEventArgs> OnStateChange Event Type Type Description EventHandler < ChannelStateEventArgs > Implements IChannel System.IDisposable"
  },
  "reference/Microsoft.Health.Fhir.Proxy.Extensions.Channels.BlobType.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Extensions.Channels.BlobType.html",
    "title": "Enum BlobType | Title",
    "keywords": "Enum BlobType Type of Azure storage blob. Namespace : Microsoft.Health.Fhir.Proxy.Extensions.Channels Assembly : Microsoft.Health.Fhir.Proxy.Extensions.Channels.dll Syntax public enum BlobType Fields Name Description Append Block"
  },
  "reference/Microsoft.Health.Fhir.Proxy.Extensions.Channels.Configuration.BlobStorageConfig.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Extensions.Channels.Configuration.BlobStorageConfig.html",
    "title": "Class BlobStorageConfig | Title",
    "keywords": "Class BlobStorageConfig Configuration of Azure blob storage channel. Inheritance Object BlobStorageConfig Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Microsoft.Health.Fhir.Proxy.Extensions.Channels.Configuration Assembly : Microsoft.Health.Fhir.Proxy.Extensions.Channels.dll Syntax public class BlobStorageConfig Constructors View Source BlobStorageConfig() Creates an instance of BlobStorageConfig Declaration public BlobStorageConfig() View Source BlobStorageConfig(String, String, Nullable<Int64>, Nullable<Int32>, Nullable<Int32>) Creates an instance of BlobStorageConfig. Declaration public BlobStorageConfig(string connectionString, string container, long? initialTransferSize = null, int? maxConcurrency = null, int? maxTransferSize = null) Parameters Type Name Description String connectionString Azure storage connection string. String container Blob container where files will be stored. Nullable < Int64 > initialTransferSize Optional initial transfer size in bytes. Nullable < Int32 > maxConcurrency Optional maximum concurrency. Nullable < Int32 > maxTransferSize Optional maximum transfer size in bytes. Properties View Source BlobStorageChannelConnectionString Gets or sets the Azure storage connection string. Declaration [JsonProperty(\"blobStorageChannelConnectionString\")] public string BlobStorageChannelConnectionString { get; set; } Property Value Type Description String View Source BlobStorageChannelContainer Gets or sets the blob storage container name where files are stored. Declaration [JsonProperty(\"blobStorageChannelContainer\")] public string BlobStorageChannelContainer { get; set; } Property Value Type Description String View Source InitialTransferSize Gets or sets the optional initial transfer size in bytes. Declaration [JsonProperty(\"initialTransferSize\")] public long? InitialTransferSize { get; set; } Property Value Type Description Nullable < Int64 > View Source MaxConcurrency Gets or sets the optional maximum concurrency size. Declaration [JsonProperty(\"maxConcurrency\")] public int? MaxConcurrency { get; set; } Property Value Type Description Nullable < Int32 > View Source MaxTransferSize Gets or sets the optional maximum transfer size in bytes. Declaration [JsonProperty(\"maxTransferSize\")] public int? MaxTransferSize { get; set; } Property Value Type Description Nullable < Int32 >"
  },
  "reference/Microsoft.Health.Fhir.Proxy.Extensions.Channels.Configuration.EventGridConfig.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Extensions.Channels.Configuration.EventGridConfig.html",
    "title": "Class EventGridConfig | Title",
    "keywords": "Class EventGridConfig Configuration for Event Grid channel. Inheritance Object EventGridConfig Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Microsoft.Health.Fhir.Proxy.Extensions.Channels.Configuration Assembly : Microsoft.Health.Fhir.Proxy.Extensions.Channels.dll Syntax [Serializable] [JsonObject] public class EventGridConfig Constructors View Source EventGridConfig() Creates an instance of EventGridConfig. Declaration public EventGridConfig() View Source EventGridConfig(String, String, String, String, String) Creates an instance of EventGridConfig. Declaration public EventGridConfig(string topicUriString, string topicAccessKey, string subject, string eventType, string dataVersion) Parameters Type Name Description String topicUriString Event Grid topic URI string. String topicAccessKey Event Grid topic access key. String subject Event Grid subject. String eventType Event Grid event type. String dataVersion Event Grid data version. Properties View Source EventGridBlobConnectionString Gets or sets Azure storage connection string for managing large files. Declaration [JsonProperty(\"eventGridBlobConnectionString\")] public string EventGridBlobConnectionString { get; set; } Property Value Type Description String View Source EventGridBlobContainer Gets or sets Azure blob storage container name for managing large files. Declaration [JsonProperty(\"eventGridBlobContainer\")] public string EventGridBlobContainer { get; set; } Property Value Type Description String View Source EventGridDataVersion Gets or sets Event Grid data version. Declaration [JsonProperty(\"dataVersion\")] public string EventGridDataVersion { get; set; } Property Value Type Description String View Source EventGridEventType Gets or sets Event Grid event type. Declaration [JsonProperty(\"eventType\")] public string EventGridEventType { get; set; } Property Value Type Description String View Source EventGridSubject Declaration [JsonProperty(\"subject\")] public string EventGridSubject { get; set; } Property Value Type Description String View Source EventGridTopicAccessKey Gets or sets Event Grid topic access key. Declaration [JsonProperty(\"topicAccessKey\")] public string EventGridTopicAccessKey { get; set; } Property Value Type Description String View Source EventGridTopicUriString Gets or sets Event Grid topic URI string. Declaration [JsonProperty(\"topicUriString\")] public string EventGridTopicUriString { get; set; } Property Value Type Description String"
  },
  "reference/Microsoft.Health.Fhir.Proxy.Extensions.Channels.Configuration.EventHubConfig.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Extensions.Channels.Configuration.EventHubConfig.html",
    "title": "Class EventHubConfig | Title",
    "keywords": "Class EventHubConfig Configuration for Event Hub channel. Inheritance Object EventHubConfig Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Microsoft.Health.Fhir.Proxy.Extensions.Channels.Configuration Assembly : Microsoft.Health.Fhir.Proxy.Extensions.Channels.dll Syntax [Serializable] [JsonObject] public class EventHubConfig Constructors View Source EventHubConfig() Creates an instance of EventHubConfig. Declaration public EventHubConfig() View Source EventHubConfig(EventHubSkuType, String, String, String, String, String) Creates in instance of EventHubConfig. Declaration public EventHubConfig(EventHubSkuType eventhubSku, string eventhubConnectionString, string eventhubName, string blobConnectionString, string blobContainer, string eventhubProcessorContainer) Parameters Type Name Description EventHubSkuType eventhubSku Event Hub SKU used. String eventhubConnectionString Connection string for Event Hub. String eventhubName Name of Event Hub used. String blobConnectionString Connection string to Blob storage. String blobContainer Blob container used to output messages that exceed Event Hub size. String eventhubProcessorContainer Event Hub processor container in Blob storage used to track Event Hub receive operations. Properties View Source EventHubBlobConnectionString Gets or sets Azure storage connection string for managing large files. Declaration [JsonProperty(\"eventHubBlobConnectionString\")] public string EventHubBlobConnectionString { get; set; } Property Value Type Description String View Source EventHubBlobContainer Gets or sets blob storage container name for managing large files. Declaration [JsonProperty(\"eventHubBlobContainer\")] public string EventHubBlobContainer { get; set; } Property Value Type Description String View Source EventHubConnectionString Gets or sets Event Hub connection string. Declaration [JsonProperty(\"eventhubConnectionString\")] public string EventHubConnectionString { get; set; } Property Value Type Description String View Source EventHubName Gets or sets Event Hub name. Declaration [JsonProperty(\"eventhubName\")] public string EventHubName { get; set; } Property Value Type Description String View Source EventHubProcessorContainer Gets or sets Event Hub processor container name in blob storage. Declaration [JsonProperty(\"eventhubProcessorContainer\")] public string EventHubProcessorContainer { get; set; } Property Value Type Description String Remarks Used only when reading an event hub. View Source EventHubSku Gets or sets Event Hub SKU. Declaration [JsonProperty(\"eventhubSku\")] public EventHubSkuType EventHubSku { get; set; } Property Value Type Description EventHubSkuType"
  },
  "reference/Microsoft.Health.Fhir.Proxy.Extensions.Channels.Configuration.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Extensions.Channels.Configuration.html",
    "title": "Namespace Microsoft.Health.Fhir.Proxy.Extensions.Channels.Configuration | Title",
    "keywords": "Namespace Microsoft.Health.Fhir.Proxy.Extensions.Channels.Configuration Classes BlobStorageConfig Configuration of Azure blob storage channel. EventGridConfig Configuration for Event Grid channel. EventHubConfig Configuration for Event Hub channel. ServiceBusConfig Configuration for Service Bus channel."
  },
  "reference/Microsoft.Health.Fhir.Proxy.Extensions.Channels.Configuration.ServiceBusConfig.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Extensions.Channels.Configuration.ServiceBusConfig.html",
    "title": "Class ServiceBusConfig | Title",
    "keywords": "Class ServiceBusConfig Configuration for Service Bus channel. Inheritance Object ServiceBusConfig Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Microsoft.Health.Fhir.Proxy.Extensions.Channels.Configuration Assembly : Microsoft.Health.Fhir.Proxy.Extensions.Channels.dll Syntax [Serializable] [JsonObject] public class ServiceBusConfig Constructors View Source ServiceBusConfig() Creates an instance of ServiceBusConfig. Declaration public ServiceBusConfig() Properties View Source ServiceBusBlobConnectionString Gets or sets Azure storage connection string for managing large files. Declaration [JsonProperty(\"serviceBusBlobConnectionString\")] public string ServiceBusBlobConnectionString { get; set; } Property Value Type Description String View Source ServiceBusBlobContainer Gets or sets blob storage container name for managing large files. Declaration [JsonProperty(\"serviceBusBlobContainer\")] public string ServiceBusBlobContainer { get; set; } Property Value Type Description String View Source ServiceBusConnectionString Gets or sets Service Bus connection string. Declaration [JsonProperty(\"servicebusConnectionString\")] public string ServiceBusConnectionString { get; set; } Property Value Type Description String View Source ServiceBusSku Gets or sets Service Bus SKU. Declaration [JsonProperty(\"servicebusSku\")] public ServiceBusSkuType ServiceBusSku { get; set; } Property Value Type Description ServiceBusSkuType View Source ServiceBusSubscription Gets or sets Service Bus subscription. Declaration [JsonProperty(\"serviceBusSubscription\")] public string ServiceBusSubscription { get; set; } Property Value Type Description String Remarks Used only when reading from Service Bus. View Source ServiceBusTopic Gets or sets Service Bus topic. Declaration [JsonProperty(\"serviceBustopic\")] public string ServiceBusTopic { get; set; } Property Value Type Description String"
  },
  "reference/Microsoft.Health.Fhir.Proxy.Extensions.Channels.EventDataByReference.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Extensions.Channels.EventDataByReference.html",
    "title": "Class EventDataByReference | Title",
    "keywords": "Class EventDataByReference A reference to a message stored as a file in blob storage. Inheritance Object EventDataByReference Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Microsoft.Health.Fhir.Proxy.Extensions.Channels Assembly : Microsoft.Health.Fhir.Proxy.Extensions.Channels.dll Syntax [Serializable] [JsonObject] public class EventDataByReference Remarks This channel provides a reference to a message when using when the primary channel cannot accept a message by value due to its large size. Constructors View Source EventDataByReference() Creates an instance of EventDataByReference. Declaration public EventDataByReference() View Source EventDataByReference(String, String, String) Creates an instance of EventDataByReference. Declaration public EventDataByReference(string container, string blob, string contentType) Parameters Type Name Description String container Blob container name where the file is stored. String blob Filename containing the message. String contentType Content type of the message. Properties View Source Blob Gets or sets the filename of the message. Declaration [JsonProperty(\"blob\")] public string Blob { get; set; } Property Value Type Description String View Source Container Gets or sets the blob storage container name where the file is stored. Declaration [JsonProperty(\"container\")] public string Container { get; set; } Property Value Type Description String View Source ContentType Gets or sets the content type of the message. Declaration [JsonProperty(\"contentType\")] public string ContentType { get; set; } Property Value Type Description String"
  },
  "reference/Microsoft.Health.Fhir.Proxy.Extensions.Channels.EventGridChannel.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Extensions.Channels.EventGridChannel.html",
    "title": "Class EventGridChannel | Title",
    "keywords": "Class EventGridChannel Channel that sends events to an Azure Event Grid. Inheritance Object EventGridChannel Implements IChannel IDisposable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Microsoft.Health.Fhir.Proxy.Extensions.Channels Assembly : Microsoft.Health.Fhir.Proxy.Extensions.Channels.dll Syntax public class EventGridChannel : IChannel, IDisposable Constructors View Source EventGridChannel(EventGridConfig, ILogger) Creates an instance of EventGridChannel. Declaration public EventGridChannel(EventGridConfig config, ILogger logger = null) Parameters Type Name Description EventGridConfig config Channel configuration. ILogger logger Optional ILogger. Properties View Source Id Gets the instance ID of the channel. Declaration public string Id { get; } Property Value Type Description String View Source IsAuthenticated Gets and indicator to whether the channel has authenticated the user, which is by default always false. Declaration public bool IsAuthenticated { get; } Property Value Type Description Boolean View Source IsEncrypted Indicates whether the channel is encrypted, which is always true. Declaration public bool IsEncrypted { get; } Property Value Type Description Boolean View Source Name Gets the name of the channel, i.e., \"EventGridChannel\". Declaration public string Name { get; } Property Value Type Description String View Source Port Gets the port used, which by default always 0. Declaration public int Port { get; } Property Value Type Description Int32 View Source State Gets or sets the channel state. Declaration public ChannelState State { get; set; } Property Value Type Description ChannelState Methods View Source AddMessageAsync(Byte[]) Add a message to the channel which is surface by the OnReceive event. Declaration public async Task AddMessageAsync(byte[] message) Parameters Type Name Description Byte [] message Message to add. Returns Type Description Task Task View Source CloseAsync() Closes the channel. Declaration public async Task CloseAsync() Returns Type Description Task Task View Source Dispose() Disposes the channel. Declaration public void Dispose() View Source Dispose(Boolean) Declaration protected void Dispose(bool disposing) Parameters Type Name Description Boolean disposing View Source OpenAsync() Opens the channel. Declaration public async Task OpenAsync() Returns Type Description Task Task View Source ReceiveAsync() Starts the recieve operation for the channel. Declaration public async Task ReceiveAsync() Returns Type Description Task Task Remarks Receive operation is omitted without error for an EventGridChannel. View Source SendAsync(Byte[], Object[]) Sends a message to an Event Grid if size < SKU constraint; otherwise uses blob storage. Declaration public async Task SendAsync(byte[] message, params object[] items) Parameters Type Name Description Byte [] message Message to send. Object [] items Additional optional parameters. Returns Type Description Task Task Remarks Items argument is not used in EventGridChannel. Events View Source OnClose Event that signals the channel has closed. Declaration public event EventHandler<ChannelCloseEventArgs> OnClose Event Type Type Description EventHandler < ChannelCloseEventArgs > View Source OnError Event that signals the channel has errored. Declaration public event EventHandler<ChannelErrorEventArgs> OnError Event Type Type Description EventHandler < ChannelErrorEventArgs > View Source OnOpen Event that signals the channel has opened. Declaration public event EventHandler<ChannelOpenEventArgs> OnOpen Event Type Type Description EventHandler < ChannelOpenEventArgs > View Source OnReceive Event that signals the channel as received a message. Declaration public event EventHandler<ChannelReceivedEventArgs> OnReceive Event Type Type Description EventHandler < ChannelReceivedEventArgs > View Source OnStateChange Event that signals the channel state has changed. Declaration public event EventHandler<ChannelStateEventArgs> OnStateChange Event Type Type Description EventHandler < ChannelStateEventArgs > Implements IChannel System.IDisposable"
  },
  "reference/Microsoft.Health.Fhir.Proxy.Extensions.Channels.EventHubChannel.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Extensions.Channels.EventHubChannel.html",
    "title": "Class EventHubChannel | Title",
    "keywords": "Class EventHubChannel Channel that sends events to an Azure Event Hub. Inheritance Object EventHubChannel Implements IChannel IDisposable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Microsoft.Health.Fhir.Proxy.Extensions.Channels Assembly : Microsoft.Health.Fhir.Proxy.Extensions.Channels.dll Syntax public class EventHubChannel : IChannel, IDisposable Constructors View Source EventHubChannel(EventHubConfig, ILogger) Creates an instance of EventHubChannel. Declaration public EventHubChannel(EventHubConfig config, ILogger logger = null) Parameters Type Name Description EventHubConfig config Channel configuration. ILogger logger Optional ILogger. Properties View Source Id Gets the instance ID of the channel. Declaration public string Id { get; } Property Value Type Description String View Source IsAuthenticated Gets and indicator to whether the channel has authenticated the user, which by default always false. Declaration public bool IsAuthenticated { get; } Property Value Type Description Boolean View Source IsEncrypted Indicates whether the channel is encrypted, which is always true. Declaration public bool IsEncrypted { get; } Property Value Type Description Boolean View Source Name Gets the name of the channel, i.e., \"EventHubChannel\". Declaration public string Name { get; } Property Value Type Description String View Source Port Gets the port used, which by default always 0. Declaration public int Port { get; } Property Value Type Description Int32 View Source State Gets or sets the channel state. Declaration public ChannelState State { get; set; } Property Value Type Description ChannelState Methods View Source AddMessageAsync(Byte[]) Add a message to the channel which is surface by the OnReceive event. Declaration public async Task AddMessageAsync(byte[] message) Parameters Type Name Description Byte [] message Message to add. Returns Type Description Task Task View Source CloseAsync() Closes the channel. Declaration public async Task CloseAsync() Returns Type Description Task Task View Source Dispose() Disposes the channel. Declaration public void Dispose() View Source Dispose(Boolean) Declaration protected async void Dispose(bool disposing) Parameters Type Name Description Boolean disposing View Source OpenAsync() Opens the channel. Declaration public async Task OpenAsync() Returns Type Description Task Task View Source ReceiveAsync() Starts the recieve operation for the channel. Declaration public async Task ReceiveAsync() Returns Type Description Task Task Remarks Receive operation uses the EventHubProcessor. View Source SendAsync(Byte[], Object[]) Sends a message to an Event Hub if size < SKU constraint; otherwise uses blob storage. Declaration public async Task SendAsync(byte[] message, params object[] items) Parameters Type Name Description Byte [] message Message to send. Object [] items Additional optional parameters, where required is the content type. Returns Type Description Task Task Events View Source OnClose Event that signals the channel has closed. Declaration public event EventHandler<ChannelCloseEventArgs> OnClose Event Type Type Description EventHandler < ChannelCloseEventArgs > View Source OnError Event that signals the channel has errored. Declaration public event EventHandler<ChannelErrorEventArgs> OnError Event Type Type Description EventHandler < ChannelErrorEventArgs > View Source OnOpen Event that signals the channel has opened. Declaration public event EventHandler<ChannelOpenEventArgs> OnOpen Event Type Type Description EventHandler < ChannelOpenEventArgs > View Source OnReceive Event that signals the channel as received a message. Declaration public event EventHandler<ChannelReceivedEventArgs> OnReceive Event Type Type Description EventHandler < ChannelReceivedEventArgs > View Source OnStateChange Event that signals the channel state has changed. Declaration public event EventHandler<ChannelStateEventArgs> OnStateChange Event Type Type Description EventHandler < ChannelStateEventArgs > Implements IChannel System.IDisposable"
  },
  "reference/Microsoft.Health.Fhir.Proxy.Extensions.Channels.EventHubSkuType.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Extensions.Channels.EventHubSkuType.html",
    "title": "Enum EventHubSkuType | Title",
    "keywords": "Enum EventHubSkuType Event Hub SKU type. Namespace : Microsoft.Health.Fhir.Proxy.Extensions.Channels Assembly : Microsoft.Health.Fhir.Proxy.Extensions.Channels.dll Syntax [Serializable] public enum EventHubSkuType Fields Name Description Basic Dedicated Premium Standard"
  },
  "reference/Microsoft.Health.Fhir.Proxy.Extensions.Channels.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Extensions.Channels.html",
    "title": "Namespace Microsoft.Health.Fhir.Proxy.Extensions.Channels | Title",
    "keywords": "Namespace Microsoft.Health.Fhir.Proxy.Extensions.Channels Classes BlobStorageChannel Channel that sends events to Azure blob storage. EventDataByReference A reference to a message stored as a file in blob storage. EventGridChannel Channel that sends events to an Azure Event Grid. EventHubChannel Channel that sends events to an Azure Event Hub. ServiceBusChannel Channel that sends or receives events to/from Service Bus. Enums BlobType Type of Azure storage blob. EventHubSkuType Event Hub SKU type. ServiceBusSkuType Type of Service Bus SKU."
  },
  "reference/Microsoft.Health.Fhir.Proxy.Extensions.Channels.ServiceBusChannel.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Extensions.Channels.ServiceBusChannel.html",
    "title": "Class ServiceBusChannel | Title",
    "keywords": "Class ServiceBusChannel Channel that sends or receives events to/from Service Bus. Inheritance Object ServiceBusChannel Implements IChannel IDisposable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Microsoft.Health.Fhir.Proxy.Extensions.Channels Assembly : Microsoft.Health.Fhir.Proxy.Extensions.Channels.dll Syntax public class ServiceBusChannel : IChannel, IDisposable Constructors View Source ServiceBusChannel(ServiceBusConfig, ILogger) Creates an instance of Service Bus channel. Declaration public ServiceBusChannel(ServiceBusConfig config, ILogger logger = null) Parameters Type Name Description ServiceBusConfig config Channel configuration. ILogger logger Optional ILogger. Properties View Source Id Gets the instance ID of the channel. Declaration public string Id { get; } Property Value Type Description String View Source IsAuthenticated Gets and indicator to whether the channel has authenticated the user, which by default always false. Declaration public bool IsAuthenticated { get; } Property Value Type Description Boolean View Source IsEncrypted Indicates whether the channel is encrypted, which is always true. Declaration public bool IsEncrypted { get; } Property Value Type Description Boolean View Source Name Gets the name of the channel, i.e., \"ServiceBusChannel\". Declaration public string Name { get; } Property Value Type Description String View Source Port Gets the port used, which by default always 0. Declaration public int Port { get; } Property Value Type Description Int32 View Source State Gets or sets the channel state. Declaration public ChannelState State { get; set; } Property Value Type Description ChannelState Methods View Source AddMessageAsync(Byte[]) Add a message to the channel which is surface by the OnReceive event. Declaration public async Task AddMessageAsync(byte[] message) Parameters Type Name Description Byte [] message Message to add. Returns Type Description Task Task View Source CloseAsync() Closes the channel. Declaration public async Task CloseAsync() Returns Type Description Task Task View Source Dispose() Disposes the channel. Declaration public void Dispose() View Source Dispose(Boolean) Declaration protected async void Dispose(bool disposing) Parameters Type Name Description Boolean disposing View Source OpenAsync() Opens the channel. Declaration public async Task OpenAsync() Returns Type Description Task Task View Source ReceiveAsync() Starts the recieve operation for the channel. Declaration public async Task ReceiveAsync() Returns Type Description Task Task Remarks Receive operation and subscription in Service Bus. View Source SendAsync(Byte[], Object[]) Sends a message to a Service Bus topic if size < SKU constraint; otherwise uses blob storage. Declaration public async Task SendAsync(byte[] message, params object[] items) Parameters Type Name Description Byte [] message Message to send. Object [] items Additional optional parameters, where required is the content type. Returns Type Description Task Events View Source OnClose Event that signals the channel has closed. Declaration public event EventHandler<ChannelCloseEventArgs> OnClose Event Type Type Description EventHandler < ChannelCloseEventArgs > View Source OnError Event that signals the channel has errored. Declaration public event EventHandler<ChannelErrorEventArgs> OnError Event Type Type Description EventHandler < ChannelErrorEventArgs > View Source OnOpen Event that signals the channel has opened. Declaration public event EventHandler<ChannelOpenEventArgs> OnOpen Event Type Type Description EventHandler < ChannelOpenEventArgs > View Source OnReceive Event that signals the channel as received a message. Declaration public event EventHandler<ChannelReceivedEventArgs> OnReceive Event Type Type Description EventHandler < ChannelReceivedEventArgs > View Source OnStateChange Event that signals the channel state has changed. Declaration public event EventHandler<ChannelStateEventArgs> OnStateChange Event Type Type Description EventHandler < ChannelStateEventArgs > Implements IChannel System.IDisposable"
  },
  "reference/Microsoft.Health.Fhir.Proxy.Extensions.Channels.ServiceBusSkuType.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Extensions.Channels.ServiceBusSkuType.html",
    "title": "Enum ServiceBusSkuType | Title",
    "keywords": "Enum ServiceBusSkuType Type of Service Bus SKU. Namespace : Microsoft.Health.Fhir.Proxy.Extensions.Channels Assembly : Microsoft.Health.Fhir.Proxy.Extensions.Channels.dll Syntax public enum ServiceBusSkuType Fields Name Description Premium Standard"
  },
  "reference/Microsoft.Health.Fhir.Proxy.Filters.FilterCollection.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Filters.FilterCollection.html",
    "title": "Class FilterCollection | Title",
    "keywords": "Class FilterCollection A collection of filters. Inheritance Object FilterCollection Implements IList < IFilter > ICollection < IFilter > IEnumerable < IFilter > IEnumerable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Microsoft.Health.Fhir.Proxy.Filters Assembly : Microsoft.Health.Fhir.Proxy.dll Syntax public class FilterCollection : IList<IFilter>, ICollection<IFilter>, IEnumerable<IFilter>, IEnumerable Constructors View Source FilterCollection() Creates an instance of the FilterCollection. Declaration public FilterCollection() Properties View Source Count Gets the number of filters in the collection. Declaration public int Count { get; } Property Value Type Description Int32 View Source IsReadOnly Gets an indicator of whether the filter is read-only. Declaration public bool IsReadOnly { get; } Property Value Type Description Boolean View Source Item[Int32] Gets a filter in the collection by its index. Declaration public IFilter this[int index] { get; set; } Parameters Type Name Description Int32 index Index of filter to return. Property Value Type Description IFilter IFilter Methods View Source Add(IFilter) Adds a filter to the collection. Declaration public void Add(IFilter item) Parameters Type Name Description IFilter item Filter to add to the collection. View Source Clear() Clears the filter collections. Declaration public void Clear() View Source Contains(IFilter) Indicates whether a filter is contained in the collection. Declaration public bool Contains(IFilter item) Parameters Type Name Description IFilter item Fitler used to determined if it is in the collection. Returns Type Description Boolean True is filter in is the collection; otherwise false. View Source CopyTo(IFilter[], Int32) Copies the filter collection into an array starting at the index. Declaration public void CopyTo(IFilter[] array, int arrayIndex) Parameters Type Name Description IFilter [] array Array to fill with filter collection. Int32 arrayIndex Starting index to fill the array. View Source GetEnumerator() Gets an enumerator for the filters in the collection. Declaration public IEnumerator<IFilter> GetEnumerator() Returns Type Description IEnumerator < IFilter > Enumerator of filters. View Source IndexOf(IFilter) Finds the index of a filter. Declaration public int IndexOf(IFilter item) Parameters Type Name Description IFilter item The filter to return the index. Returns Type Description Int32 Index of the input filter in the collection. View Source Insert(Int32, IFilter) Inserts a filter into the collection. Declaration public void Insert(int index, IFilter item) Parameters Type Name Description Int32 index Index of the filter insertion. IFilter item Fitler to insert. View Source Remove(IFilter) Removes a filter from the collection. Declaration public bool Remove(IFilter item) Parameters Type Name Description IFilter item Filter to remove. Returns Type Description Boolean True is the filter is removed; otherwise false. View Source RemoveAt(Int32) Remove a filter from the collection by its index. Declaration public void RemoveAt(int index) Parameters Type Name Description Int32 index Index of filter to remove. Explicit Interface Implementations View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "reference/Microsoft.Health.Fhir.Proxy.Filters.FilterErrorEventArgs.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Filters.FilterErrorEventArgs.html",
    "title": "Class FilterErrorEventArgs | Title",
    "keywords": "Class FilterErrorEventArgs Filter error event arguments used when filters signal an error. Inheritance Object EventArgs FilterErrorEventArgs Inherited Members EventArgs.Empty Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Microsoft.Health.Fhir.Proxy.Filters Assembly : Microsoft.Health.Fhir.Proxy.dll Syntax public class FilterErrorEventArgs : EventArgs Constructors View Source FilterErrorEventArgs(String, String, Boolean, Exception, Nullable<HttpStatusCode>, String) Creates an instance of FilterErrorEventArgs Declaration public FilterErrorEventArgs(string name, string id, bool fatal = false, Exception error = null, HttpStatusCode? code = null, string responseBody = null) Parameters Type Name Description String name Name of the filter. String id Instance id of the filter. Boolean fatal Indicator as to whether the filter has caught a fatal error. Exception error An error caught by a filter. Nullable < HttpStatusCode > code Http response code, if applicable. String responseBody Http response body, if applicable. Properties View Source Code Get the http status code for a response; otherwise null. Declaration public HttpStatusCode? Code { get; } Property Value Type Description Nullable < HttpStatusCode > View Source Error Gets an exception thrown by the filter; otherwise null. Declaration public Exception Error { get; } Property Value Type Description Exception View Source Id Gets the instance id of the filter. Declaration public string Id { get; } Property Value Type Description String View Source IsFatal Gets an indicator that determines if the filter has a fatal error. Declaration public bool IsFatal { get; } Property Value Type Description Boolean View Source Name Gets the name of the filter. Declaration public string Name { get; } Property Value Type Description String View Source ResponseBody Gets a response body from a request; otherwise null. Declaration public string ResponseBody { get; } Property Value Type Description String"
  },
  "reference/Microsoft.Health.Fhir.Proxy.Filters.FilterFactory.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Filters.FilterFactory.html",
    "title": "Class FilterFactory | Title",
    "keywords": "Class FilterFactory A factory of filters. Inheritance Object FilterFactory Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Microsoft.Health.Fhir.Proxy.Filters Assembly : Microsoft.Health.Fhir.Proxy.dll Syntax public abstract class FilterFactory Properties View Source Container Declaration public static Dictionary<string, Tuple<Type, object[]>> Container { get; } Property Value Type Description Dictionary < String , Tuple < Type , Object []>> Methods View Source Clear() Clears the filter factory. Declaration public static void Clear() View Source Create(String) Create a filter from the factory by its name. Declaration public static IFilter Create(string name) Parameters Type Name Description String name Name of the filter in the factory to create. Returns Type Description IFilter IFilter View Source GetNames() Gets an array of filter names. Declaration public static string[] GetNames() Returns Type Description String [] Array string names. View Source Register(String, Type, Object[]) Registers a filter in the factory. Declaration public static void Register(string name, Type type, object[] args = null) Parameters Type Name Description String name Filter name that matches the name property of the filter. Type type Type of filter. Object [] args Arguments used in the constructor of the filter type."
  },
  "reference/Microsoft.Health.Fhir.Proxy.Filters.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Filters.html",
    "title": "Namespace Microsoft.Health.Fhir.Proxy.Filters | Title",
    "keywords": "Namespace Microsoft.Health.Fhir.Proxy.Filters Classes FilterCollection A collection of filters. FilterErrorEventArgs Filter error event arguments used when filters signal an error. FilterFactory A factory of filters. Interfaces IFilter IFilter interface to be implemented by filters."
  },
  "reference/Microsoft.Health.Fhir.Proxy.Filters.IFilter.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Filters.IFilter.html",
    "title": "Interface IFilter | Title",
    "keywords": "Interface IFilter IFilter interface to be implemented by filters. Namespace : Microsoft.Health.Fhir.Proxy.Filters Assembly : Microsoft.Health.Fhir.Proxy.dll Syntax public interface IFilter Properties View Source Id Gets the unique id on the filter instance. Declaration string Id { get; } Property Value Type Description String View Source Name Get the name of the filter. Declaration string Name { get; } Property Value Type Description String Methods View Source ExecuteAsync(OperationContext) Executes the filter operation. Declaration Task<OperationContext> ExecuteAsync(OperationContext context) Parameters Type Name Description OperationContext context Context of the input for filter execution. Returns Type Description Task < OperationContext > Context for input to next filter or output for http response. Events View Source OnFilterError Event signals the filter caught an error. Declaration event EventHandler<FilterErrorEventArgs> OnFilterError Event Type Type Description EventHandler < FilterErrorEventArgs >"
  },
  "reference/Microsoft.Health.Fhir.Proxy.Json.BundleEnumerator.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Json.BundleEnumerator.html",
    "title": "Class BundleEnumerator | Title",
    "keywords": "Class BundleEnumerator Enumerator for FHIR bundle. Inheritance Object BundleEnumerator Implements IEnumerator < Newtonsoft.Json.Linq.JToken > IEnumerator IDisposable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Microsoft.Health.Fhir.Proxy.Json Assembly : Microsoft.Health.Fhir.Proxy.dll Syntax public class BundleEnumerator : IEnumerator<JToken>, IEnumerator, IDisposable Constructors View Source BundleEnumerator(JArray, Boolean) Creates an instance of BundleEnumerator. Declaration public BundleEnumerator(JArray array, bool ifNoneExist) Parameters Type Name Description Newtonsoft.Json.Linq.JArray array JArray containing items in the bundle. Boolean ifNoneExist FHIR ifNoneExists flag omits if false. Properties View Source Current Gets the current JToken for the enumerator. Declaration public JToken Current { get; } Property Value Type Description Newtonsoft.Json.Linq.JToken Methods View Source Dispose() Disposes the enumerator. Declaration public void Dispose() View Source Dispose(Boolean) Declaration protected void Dispose(bool dispose) Parameters Type Name Description Boolean dispose View Source MoveNext() Moves the enumerator forward by one. Declaration public bool MoveNext() Returns Type Description Boolean True if item is available; otherwise false. View Source Reset() Resets the enumerator to the beginning. Declaration public void Reset() Explicit Interface Implementations View Source IEnumerator.Current Declaration object IEnumerator.Current { get; } Returns Type Description Object Implements System.Collections.Generic.IEnumerator<T> System.Collections.IEnumerator System.IDisposable"
  },
  "reference/Microsoft.Health.Fhir.Proxy.Json.BundleReader.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Json.BundleReader.html",
    "title": "Class BundleReader | Title",
    "keywords": "Class BundleReader FHIR bundle reader. Inheritance Object JObjectReader BundleReader Inherited Members JObjectReader.root Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Microsoft.Health.Fhir.Proxy.Json Assembly : Microsoft.Health.Fhir.Proxy.dll Syntax public class BundleReader : JObjectReader Constructors View Source BundleReader(JObject, Boolean) Creates a new instance of BundleReader. Declaration public BundleReader(JObject root, bool ifNoneExist) Parameters Type Name Description Newtonsoft.Json.Linq.JObject root The root object to read. Boolean ifNoneExist FHIR ifNoneExists flag omits if false. Methods View Source GetEnumerator() Gets the bundle enumerator. Declaration public override IEnumerator<JToken> GetEnumerator() Returns Type Description IEnumerator < Newtonsoft.Json.Linq.JToken > Enumerator of JToken if exists, otherwise null. Overrides JObjectReader.GetEnumerator()"
  },
  "reference/Microsoft.Health.Fhir.Proxy.Json.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Json.html",
    "title": "Namespace Microsoft.Health.Fhir.Proxy.Json | Title",
    "keywords": "Namespace Microsoft.Health.Fhir.Proxy.Json Classes BundleEnumerator Enumerator for FHIR bundle. BundleReader FHIR bundle reader. JObjectReader Abstract JObject reader JPathException JPath exception. JTokenExtensions Extensions for JToken."
  },
  "reference/Microsoft.Health.Fhir.Proxy.Json.JObjectReader.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Json.JObjectReader.html",
    "title": "Class JObjectReader | Title",
    "keywords": "Class JObjectReader Abstract JObject reader Inheritance Object JObjectReader BundleReader Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Microsoft.Health.Fhir.Proxy.Json Assembly : Microsoft.Health.Fhir.Proxy.dll Syntax public abstract class JObjectReader Constructors View Source JObjectReader(JObject) Declaration protected JObjectReader(JObject root) Parameters Type Name Description Newtonsoft.Json.Linq.JObject root Fields View Source root Declaration protected JObject root Field Value Type Description Newtonsoft.Json.Linq.JObject Methods View Source GetEnumerator() Gets an enumerator. Declaration public abstract IEnumerator<JToken> GetEnumerator() Returns Type Description IEnumerator < Newtonsoft.Json.Linq.JToken > IEnumerator of JToken."
  },
  "reference/Microsoft.Health.Fhir.Proxy.Json.JPathException.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Json.JPathException.html",
    "title": "Class JPathException | Title",
    "keywords": "Class JPathException JPath exception. Inheritance Object Exception JPathException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Microsoft.Health.Fhir.Proxy.Json Assembly : Microsoft.Health.Fhir.Proxy.dll Syntax public class JPathException : Exception, ISerializable Constructors View Source JPathException() Creates an instance of JPathException. Declaration public JPathException() View Source JPathException(SerializationInfo, StreamingContext) Declaration protected JPathException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info StreamingContext context View Source JPathException(String) Creates an instance of JPathException. Declaration public JPathException(string message) Parameters Type Name Description String message Exception message. View Source JPathException(String, Exception) Creates an instance of JPathException. Declaration public JPathException(string message, Exception innerException) Parameters Type Name Description String message Exception message. Exception innerException Inner exception. Implements System.Runtime.Serialization.ISerializable"
  },
  "reference/Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Json.JTokenExtensions.html",
    "title": "Class JTokenExtensions | Title",
    "keywords": "Class JTokenExtensions Extensions for JToken. Inheritance Object JTokenExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Microsoft.Health.Fhir.Proxy.Json Assembly : Microsoft.Health.Fhir.Proxy.dll Syntax public static class JTokenExtensions Methods View Source Exists(JToken, String) Indicates whether a token exists found by JPath. Declaration public static bool Exists(this JToken jtoken, string jpath) Parameters Type Name Description Newtonsoft.Json.Linq.JToken jtoken JToken root. String jpath JPath to test whether the JToken exists. Returns Type Description Boolean View Source GetArray(JToken, String, Boolean) Gets JArray from a JPath from the root JToKen; otherwise null if array not present. Declaration public static JArray GetArray(this JToken token, string jpath, bool throwIfNull = false) Parameters Type Name Description Newtonsoft.Json.Linq.JToken token JToken root. String jpath JPath to array. Boolean throwIfNull If true throws and exception is array not found; otherwise null. Returns Type Description Newtonsoft.Json.Linq.JArray JArray is found by JPath; otherwise if throwIfNull is true throws an exception; otherwise returns null. View Source GetArrayItem<T>(JToken, String, Boolean) Gets the value of an item in a JArray. Declaration public static T GetArrayItem<T>(this JToken token, string jpath, bool throwIfNull = false) Parameters Type Name Description Newtonsoft.Json.Linq.JToken token JToken root. String jpath JPath to array. Boolean throwIfNull Determines whether an exception is throw if the item value cannot be returned; otherwise returns null. Returns Type Description T Type Parameters Name Description T Data type of item value. View Source GetToken(JToken, String, Boolean) Gets a JToken from a JPath. Declaration public static JToken GetToken(this JToken token, string jpath, bool throwIfNull = false) Parameters Type Name Description Newtonsoft.Json.Linq.JToken token JToken root. String jpath JPath to token. Boolean throwIfNull If true throws an exception if a token is not found; otherwise is false returns null. Returns Type Description Newtonsoft.Json.Linq.JToken JToken if found. View Source GetValue<T>(JToken, Boolean) Gets a value from a JToken. Declaration public static T GetValue<T>(this JToken token, bool throwIfNull = false) Parameters Type Name Description Newtonsoft.Json.Linq.JToken token JToken to get value. Boolean throwIfNull Determines whether an exception is throw if the item value cannot be returned; otherwise returns null. Returns Type Description T Type Parameters Name Description T Data type of value. View Source GetValue<T>(JToken, String, Boolean) Gets a value from a JToken root via JPath. Declaration public static T GetValue<T>(this JToken token, string jpath, bool throwIfNull = false) Parameters Type Name Description Newtonsoft.Json.Linq.JToken token String jpath Boolean throwIfNull Returns Type Description T Value of token if found. Type Parameters Name Description T View Source IsArray(JToken) Indicates true when a JToken is an array; otherwise false. Declaration public static bool IsArray(this JToken token) Parameters Type Name Description Newtonsoft.Json.Linq.JToken token JToken to test. Returns Type Description Boolean True is JToken is an array; otherwise false. View Source IsArray(JToken, String) Indicates true when an array is found via JPath. Declaration public static bool IsArray(this JToken token, string jpath) Parameters Type Name Description Newtonsoft.Json.Linq.JToken token JToken root. String jpath JPath to array. Returns Type Description Boolean True if JPath finds an array; otherwise false. View Source IsMatch(JToken, String, String) Indicates whether the value of a token found by JPath is a match. Declaration public static bool IsMatch(this JToken jtoken, string jpath, string value) Parameters Type Name Description Newtonsoft.Json.Linq.JToken jtoken JToken root. String jpath JPath to test for JToken. String value Value to test for JToken in path. Returns Type Description Boolean True is match; otherwise false. View Source IsMatch<T>(JToken, String, T) Indicates whether the value of a token found by JPath is a match. Declaration public static bool IsMatch<T>(this JToken jtoken, string jpath, T value) Parameters Type Name Description Newtonsoft.Json.Linq.JToken jtoken JToken root. String jpath JPath to test for JToken. T value Value to test for JToken in path. Returns Type Description Boolean True is match; otherwise false. Type Parameters Name Description T Type of value. View Source IsNullOrEmpty(JToken) Indicates true when a JToken value is null or empty; otherwise false. Declaration public static bool IsNullOrEmpty(this JToken token) Parameters Type Name Description Newtonsoft.Json.Linq.JToken token Returns Type Description Boolean True is the token is null or empty; otherwise false. View Source IsNullOrEmpty(JToken, String) Indicates true when a value found by a JPath is null or empty; otherwise false. Declaration public static bool IsNullOrEmpty(this JToken token, string jpath) Parameters Type Name Description Newtonsoft.Json.Linq.JToken token String jpath Returns Type Description Boolean True if the token found is null or empty; otherwise false."
  },
  "reference/Microsoft.Health.Fhir.Proxy.Json.Transforms.AddTransform.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Json.Transforms.AddTransform.html",
    "title": "Class AddTransform | Title",
    "keywords": "Class AddTransform Json transform to add a node. Inheritance Object Transform AddTransform Inherited Members Transform.JsonPath Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Microsoft.Health.Fhir.Proxy.Json.Transforms Assembly : Microsoft.Health.Fhir.Proxy.dll Syntax [Serializable] [JsonObject] public class AddTransform : Transform Properties View Source AppendNode Gets or sets the json on the node to add. Declaration [JsonProperty(\"appendNode\")] public string AppendNode { get; set; } Property Value Type Description String View Source Name Gets the name of the transform, i.e., \"add\". Declaration [JsonProperty(\"name\")] public override string Name { get; } Property Value Type Description String Overrides Transform.Name Methods View Source Execute(String) Executes the add transform. Declaration public override JObject Execute(string json) Parameters Type Name Description String json Json document which to add the node based on the Json path. Returns Type Description Newtonsoft.Json.Linq.JObject Overrides Transform.Execute(String)"
  },
  "reference/Microsoft.Health.Fhir.Proxy.Json.Transforms.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Json.Transforms.html",
    "title": "Namespace Microsoft.Health.Fhir.Proxy.Json.Transforms | Title",
    "keywords": "Namespace Microsoft.Health.Fhir.Proxy.Json.Transforms Classes AddTransform Json transform to add a node. JsonTransformConverter<T> JSON.NET transform converter RemoveTransform Json transform to remove a node. ReplaceTransform Json replace transform. Transform Abstract transform. TransformCollection A collection of transforms. TransformConverter JSON.NET transform converter TransformPolicy Json transform policy."
  },
  "reference/Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter-1.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter-1.html",
    "title": "Class JsonTransformConverter<T> | Title",
    "keywords": "Class JsonTransformConverter<T> JSON.NET transform converter Inheritance Object Newtonsoft.Json.JsonConverter JsonTransformConverter<T> TransformConverter Inherited Members Newtonsoft.Json.JsonConverter.CanRead Newtonsoft.Json.JsonConverter.CanWrite Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Microsoft.Health.Fhir.Proxy.Json.Transforms Assembly : Microsoft.Health.Fhir.Proxy.dll Syntax public abstract class JsonTransformConverter<T> : JsonConverter Type Parameters Name Description T Methods View Source CanConvert(Type) Indicates whether the object can be converter. Declaration public override bool CanConvert(Type objectType) Parameters Type Name Description Type objectType Type of object to convert. Returns Type Description Boolean True if can be converted; otherwise false. Overrides Newtonsoft.Json.JsonConverter.CanConvert(System.Type) View Source Create(Type, JObject) Declaration protected abstract T Create(Type objectType, JObject jObject) Parameters Type Name Description Type objectType Newtonsoft.Json.Linq.JObject jObject Returns Type Description T View Source FieldExists(JObject, String, JTokenType) Indicates whether a field exists. Declaration protected static bool FieldExists(JObject jObject, string name, JTokenType type) Parameters Type Name Description Newtonsoft.Json.Linq.JObject jObject JObject to evaluate. String name Name of field. Newtonsoft.Json.Linq.JTokenType type Type of JToken. Returns Type Description Boolean View Source ReadJson(JsonReader, Type, Object, JsonSerializer) Read the json object. Declaration public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonReader reader JsonReader Type objectType Type of object to read. Object existingValue Object to read. Newtonsoft.Json.JsonSerializer serializer JsonSerializer. Returns Type Description Object Overrides Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, System.Object, Newtonsoft.Json.JsonSerializer) View Source WriteJson(JsonWriter, Object, JsonSerializer) Write json transform. Declaration public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonWriter writer JsonWriter Object value Object to write. Newtonsoft.Json.JsonSerializer serializer JsonSerializer Overrides Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, System.Object, Newtonsoft.Json.JsonSerializer)"
  },
  "reference/Microsoft.Health.Fhir.Proxy.Json.Transforms.RemoveTransform.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Json.Transforms.RemoveTransform.html",
    "title": "Class RemoveTransform | Title",
    "keywords": "Class RemoveTransform Json transform to remove a node. Inheritance Object Transform RemoveTransform Inherited Members Transform.JsonPath Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Microsoft.Health.Fhir.Proxy.Json.Transforms Assembly : Microsoft.Health.Fhir.Proxy.dll Syntax [Serializable] [JsonObject] public class RemoveTransform : Transform Properties View Source Name Gets the name of the transform, i.e., \"remove\". Declaration [JsonProperty(\"name\")] public override string Name { get; } Property Value Type Description String Overrides Transform.Name Methods View Source Execute(String) Executes the remove transform. Declaration public override JObject Execute(string json) Parameters Type Name Description String json Json document which to add the node is removed based on the Json path. Returns Type Description Newtonsoft.Json.Linq.JObject Transformed JObject. Overrides Transform.Execute(String)"
  },
  "reference/Microsoft.Health.Fhir.Proxy.Json.Transforms.ReplaceTransform.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Json.Transforms.ReplaceTransform.html",
    "title": "Class ReplaceTransform | Title",
    "keywords": "Class ReplaceTransform Json replace transform. Inheritance Object Transform ReplaceTransform Inherited Members Transform.JsonPath Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Microsoft.Health.Fhir.Proxy.Json.Transforms Assembly : Microsoft.Health.Fhir.Proxy.dll Syntax [Serializable] [JsonObject] public class ReplaceTransform : Transform Properties View Source Name Gets the name of the transform, i.e., \"replace\". Declaration [JsonProperty(\"name\")] public override string Name { get; } Property Value Type Description String Overrides Transform.Name View Source ReplaceNode Gets or sets the json node to replace. Declaration [JsonProperty(\"replaceNode\")] public string ReplaceNode { get; set; } Property Value Type Description String Methods View Source Execute(String) Executes the replace transform. Declaration public override JObject Execute(string json) Parameters Type Name Description String json Json document which a node is replaced based on the Json path and replace node. Returns Type Description Newtonsoft.Json.Linq.JObject Overrides Transform.Execute(String)"
  },
  "reference/Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform.html",
    "title": "Class Transform | Title",
    "keywords": "Class Transform Abstract transform. Inheritance Object Transform AddTransform RemoveTransform ReplaceTransform Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Microsoft.Health.Fhir.Proxy.Json.Transforms Assembly : Microsoft.Health.Fhir.Proxy.dll Syntax [Serializable] [JsonConverter(typeof(TransformConverter))] public abstract class Transform Properties View Source JsonPath Gets or sets the Json path needed to apply the transform to the input json document. Declaration [JsonProperty(\"jsonPath\")] public virtual string JsonPath { get; set; } Property Value Type Description String View Source Name Gets the name of the type of transform. Declaration [JsonProperty(\"name\")] public abstract string Name { get; } Property Value Type Description String Methods View Source Execute(String) Executes the transform. Declaration public abstract JObject Execute(string json) Parameters Type Name Description String json Document json to apply the transform and json path. Returns Type Description Newtonsoft.Json.Linq.JObject Transform json as JObject."
  },
  "reference/Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformCollection.html",
    "title": "Class TransformCollection | Title",
    "keywords": "Class TransformCollection A collection of transforms. Inheritance Object TransformCollection Implements IList < Transform > ICollection < Transform > IEnumerable < Transform > IEnumerable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Microsoft.Health.Fhir.Proxy.Json.Transforms Assembly : Microsoft.Health.Fhir.Proxy.dll Syntax public class TransformCollection : IList<Transform>, ICollection<Transform>, IEnumerable<Transform>, IEnumerable Constructors View Source TransformCollection() Creates an instance of the transform collection. Declaration public TransformCollection() Properties View Source Count Gets the number of transforms in the collection. Declaration public int Count { get; } Property Value Type Description Int32 View Source IsReadOnly Gets an indicator of whether the transform is read-only. Declaration public bool IsReadOnly { get; } Property Value Type Description Boolean View Source Item[Int32] Gets a transform in the collection by its index. Declaration public Transform this[int index] { get; set; } Parameters Type Name Description Int32 index Index of transform to return. Property Value Type Description Transform Transform Methods View Source Add(Transform) Adds a transform to the collection. Declaration public void Add(Transform item) Parameters Type Name Description Transform item Transform to add to the collection. View Source Clear() Clears the transform collections. Declaration public void Clear() View Source Contains(Transform) Indicates whether a transform is contained in the collection. Declaration public bool Contains(Transform item) Parameters Type Name Description Transform item Transform used to determined if it is in the collection. Returns Type Description Boolean True is transform in is the collection; otherwise false. View Source CopyTo(Transform[], Int32) Copies the transform collection into an array starting at the index. Declaration public void CopyTo(Transform[] array, int arrayIndex) Parameters Type Name Description Transform [] array Array to fill with transform collection. Int32 arrayIndex Starting index to fill the array. View Source GetEnumerator() Gets an enumerator for the transforms in the collection. Declaration public IEnumerator<Transform> GetEnumerator() Returns Type Description IEnumerator < Transform > Enumerator of transforms. View Source IndexOf(Transform) Finds the index of a transform. Declaration public int IndexOf(Transform item) Parameters Type Name Description Transform item The transform to return the index. Returns Type Description Int32 Index of the input transform in the collection. View Source Insert(Int32, Transform) Inserts a transform into the collection. Declaration public void Insert(int index, Transform item) Parameters Type Name Description Int32 index Index of the transform insertion. Transform item Transform to insert. View Source Remove(Transform) Removes a transform from the collection. Declaration public bool Remove(Transform item) Parameters Type Name Description Transform item Transform to remove. Returns Type Description Boolean True is the transform is removed; otherwise false. View Source RemoveAt(Int32) Remove a transform from the collection by its index. Declaration public void RemoveAt(int index) Parameters Type Name Description Int32 index Index of transform to remove. Explicit Interface Implementations View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "reference/Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformConverter.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformConverter.html",
    "title": "Class TransformConverter | Title",
    "keywords": "Class TransformConverter JSON.NET transform converter Inheritance Object Newtonsoft.Json.JsonConverter JsonTransformConverter < Transform > TransformConverter Inherited Members JsonTransformConverter<Transform>.CanConvert(Type) JsonTransformConverter<Transform>.ReadJson(JsonReader, Type, Object, JsonSerializer) JsonTransformConverter<Transform>.WriteJson(JsonWriter, Object, JsonSerializer) JsonTransformConverter<Transform>.FieldExists(JObject, String, JTokenType) Newtonsoft.Json.JsonConverter.CanRead Newtonsoft.Json.JsonConverter.CanWrite Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Microsoft.Health.Fhir.Proxy.Json.Transforms Assembly : Microsoft.Health.Fhir.Proxy.dll Syntax public class TransformConverter : JsonTransformConverter<Transform> Methods View Source Create(Type, JObject) Creates a concrete transform and returns as abstract transform type. Declaration protected override Transform Create(Type objectType, JObject jObject) Parameters Type Name Description Type objectType Transform object type. Newtonsoft.Json.Linq.JObject jObject Transform object. Returns Type Description Transform Overrides Microsoft.Health.Fhir.Proxy.Json.Transforms.JsonTransformConverter<Microsoft.Health.Fhir.Proxy.Json.Transforms.Transform>.Create(System.Type, Newtonsoft.Json.Linq.JObject)"
  },
  "reference/Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformPolicy.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Json.Transforms.TransformPolicy.html",
    "title": "Class TransformPolicy | Title",
    "keywords": "Class TransformPolicy Json transform policy. Inheritance Object TransformPolicy Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Microsoft.Health.Fhir.Proxy.Json.Transforms Assembly : Microsoft.Health.Fhir.Proxy.dll Syntax [Serializable] [JsonObject] public class TransformPolicy Constructors View Source TransformPolicy() Creates an instance of TransformPolicy. Declaration public TransformPolicy() View Source TransformPolicy(TransformCollection) Creates an instance of TransformPolicy. Declaration public TransformPolicy(TransformCollection transforms) Parameters Type Name Description TransformCollection transforms Collection of transforms implemented by the policy. View Source TransformPolicy(String, TransformCollection) Creates an instance of TransformPolicy. Declaration public TransformPolicy(string policyId, TransformCollection transforms = null) Parameters Type Name Description String policyId Unique ID of the policy. TransformCollection transforms Collection of transforms implemented by the policy. Properties View Source PolicyId Gets or sets the ID of the policy. Declaration [JsonProperty(\"policyId\")] public string PolicyId { get; set; } Property Value Type Description String View Source Transforms Gets or sets a collection of transforms. Declaration [JsonProperty(\"transforms\")] public TransformCollection Transforms { get; set; } Property Value Type Description TransformCollection Methods View Source Transform(String) Transforms a json document and returns the transformed document. Declaration public string Transform(string json) Parameters Type Name Description String json Json document to transform. Returns Type Description String Json string as transformed document."
  },
  "reference/Microsoft.Health.Fhir.Proxy.Pipelines.AzureFunctionExtensions.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Pipelines.AzureFunctionExtensions.html",
    "title": "Class AzureFunctionExtensions | Title",
    "keywords": "Class AzureFunctionExtensions Helper extensions for Azure Functions Inheritance Object AzureFunctionExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Microsoft.Health.Fhir.Proxy.Pipelines Assembly : Microsoft.Health.Fhir.Proxy.dll Syntax public static class AzureFunctionExtensions Methods View Source ConvertToHttpRequestMesssage(HttpRequestData) Converts HttpRequestData to HttpRequestMessage. Declaration public static HttpRequestMessage ConvertToHttpRequestMesssage(this HttpRequestData req) Parameters Type Name Description HttpRequestData req HttpRequestData Returns Type Description HttpRequestMessage HttpRequestMessage View Source ConvertToHttpResponseData(OperationContext, HttpRequestData) Converts HttpResponseData to HttpResponseData. Declaration public static async Task<HttpResponseData> ConvertToHttpResponseData(this OperationContext context, HttpRequestData request) Parameters Type Name Description OperationContext context OperationContext HttpRequestData request HttpRequestData Returns Type Description Task < HttpResponseData > HttpResponseData View Source GetClaimsPrincipal(HttpRequestData) Gets a ClaimsPrincipal from HttpRequestData. Declaration public static ClaimsPrincipal GetClaimsPrincipal(this HttpRequestData request) Parameters Type Name Description HttpRequestData request HttpRequestData Returns Type Description ClaimsPrincipal ClaimsPrincipal"
  },
  "reference/Microsoft.Health.Fhir.Proxy.Pipelines.AzureFunctionPipelineManager.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Pipelines.AzureFunctionPipelineManager.html",
    "title": "Class AzureFunctionPipelineManager | Title",
    "keywords": "Class AzureFunctionPipelineManager Manages input and output pipelines for Azure Functions. Inheritance Object AzureFunctionPipelineManager Implements IPipelineManager < HttpRequestData , HttpResponseData > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Microsoft.Health.Fhir.Proxy.Pipelines Assembly : Microsoft.Health.Fhir.Proxy.dll Syntax public sealed class AzureFunctionPipelineManager : IPipelineManager<HttpRequestData, HttpResponseData> Constructors View Source AzureFunctionPipelineManager(PipelineSettings, PipelineBinding, PipelineSettings, TelemetryClient, ILogger) Creates an instance of AzureFunctionPipelineManager Declaration public AzureFunctionPipelineManager(PipelineSettings input, PipelineBinding binding, PipelineSettings output, TelemetryClient client = null, ILogger logger = null) Parameters Type Name Description PipelineSettings input Input pipeline settings. PipelineBinding binding Binding between input and output pipelines. PipelineSettings output Output pipeline settings. TelemetryClient client Telemetry cleint. ILogger logger ILogger Properties View Source AfterInput Optional function that executes after the input pipeline. Declaration public Func<OperationContext, OperationContext> AfterInput { get; set; } Property Value Type Description Func < OperationContext , OperationContext > View Source AfterOutput Optional function that executes after the output pipeline. Declaration public Func<OperationContext, OperationContext> AfterOutput { get; set; } Property Value Type Description Func < OperationContext , OperationContext > View Source BeforeInput Optional function that executes prior to the input pipeline. Declaration public Func<OperationContext, OperationContext> BeforeInput { get; set; } Property Value Type Description Func < OperationContext , OperationContext > View Source BeforeOutput Optional function that executes prior to the output pipeline. Declaration public Func<OperationContext, OperationContext> BeforeOutput { get; set; } Property Value Type Description Func < OperationContext , OperationContext > Methods View Source ExecuteAsync(HttpRequestData) Executes the all the configured components. Declaration public async Task<HttpResponseData> ExecuteAsync(HttpRequestData request) Parameters Type Name Description HttpRequestData request HttpRequestData from Azure Function. Returns Type Description Task < HttpResponseData > HttpResponseData to Azure Function. Implements IPipelineManager<TRequest, TResponse>"
  },
  "reference/Microsoft.Health.Fhir.Proxy.Pipelines.BasicPipeline.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Pipelines.BasicPipeline.html",
    "title": "Class BasicPipeline | Title",
    "keywords": "Class BasicPipeline A simple concrete pipeline. Inheritance Object Pipeline BasicPipeline Implements IDisposable Inherited Members Pipeline.Id Pipeline.Channels Pipeline.Filters Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Microsoft.Health.Fhir.Proxy.Pipelines Assembly : Microsoft.Health.Fhir.Proxy.dll Syntax public class BasicPipeline : Pipeline, IDisposable Constructors View Source BasicPipeline(ILogger) Creates an instance of BasicPipeline. Declaration public BasicPipeline(ILogger logger = null) Parameters Type Name Description ILogger logger ILogger View Source BasicPipeline(FilterCollection, ChannelCollection, ILogger) Creates an instance of BasicPipeline. Declaration public BasicPipeline(FilterCollection filters, ChannelCollection channels, ILogger logger = null) Parameters Type Name Description FilterCollection filters Collection of filters. ChannelCollection channels Collection of channels. ILogger logger ILogger Properties View Source Name Get the name of the pipeline, i.e., \"BasicPipeline\". Declaration public override string Name { get; } Property Value Type Description String Overrides Pipeline.Name Methods View Source Dispose() Disposes the pipeline. Declaration public override void Dispose() Overrides Pipeline.Dispose() View Source Dispose(Boolean) Declaration protected void Dispose(bool disposing) Parameters Type Name Description Boolean disposing View Source ExecuteAsync(OperationContext) Executes the pipeline. Declaration public override async Task<OperationContext> ExecuteAsync(OperationContext context) Parameters Type Name Description OperationContext context Operation context to execute. Returns Type Description Task < OperationContext > OperationContext Overrides Pipeline.ExecuteAsync(OperationContext) Events View Source OnComplete An event that signals the pipeline has completed. Declaration public override event EventHandler<PipelineCompleteEventArgs> OnComplete Event Type Type Description EventHandler < PipelineCompleteEventArgs > Overrides Pipeline.OnComplete View Source OnError An event that signals an exception in the pipeline. Declaration public override event EventHandler<PipelineErrorEventArgs> OnError Event Type Type Description EventHandler < PipelineErrorEventArgs > Overrides Pipeline.OnError Implements System.IDisposable"
  },
  "reference/Microsoft.Health.Fhir.Proxy.Pipelines.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Pipelines.html",
    "title": "Namespace Microsoft.Health.Fhir.Proxy.Pipelines | Title",
    "keywords": "Namespace Microsoft.Health.Fhir.Proxy.Pipelines Classes AzureFunctionExtensions Helper extensions for Azure Functions AzureFunctionPipelineManager Manages input and output pipelines for Azure Functions. BasicPipeline A simple concrete pipeline. OperationContext Operation context used for input and output for a filter in a pipeline. Pipeline Abstact pipeline. PipelineBuilder Pipeline builder. PipelineCompleteEventArgs Event args for pipeline complete. PipelineErrorEventArgs Event args for pipeline error events. PipelineFactory A factory of pipelines. WebPipelineManager Manages input and output pipelines for a Web app. Interfaces IPipelineBuilder Interface for pipeline builder. IPipelineManager<TRequest, TResponse> Interface for pipeline manager."
  },
  "reference/Microsoft.Health.Fhir.Proxy.Pipelines.IPipelineBuilder.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Pipelines.IPipelineBuilder.html",
    "title": "Interface IPipelineBuilder | Title",
    "keywords": "Interface IPipelineBuilder Interface for pipeline builder. Namespace : Microsoft.Health.Fhir.Proxy.Pipelines Assembly : Microsoft.Health.Fhir.Proxy.dll Syntax public interface IPipelineBuilder Methods View Source Build() Declaration Pipeline Build() Returns Type Description Pipeline"
  },
  "reference/Microsoft.Health.Fhir.Proxy.Pipelines.IPipelineManager-2.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Pipelines.IPipelineManager-2.html",
    "title": "Interface IPipelineManager<TRequest, TResponse> | Title",
    "keywords": "Interface IPipelineManager<TRequest, TResponse> Interface for pipeline manager. Namespace : Microsoft.Health.Fhir.Proxy.Pipelines Assembly : Microsoft.Health.Fhir.Proxy.dll Syntax public interface IPipelineManager<TRequest, TResponse> Type Parameters Name Description TRequest Type of request for input into the pipeline. TResponse Type of response from output the pipeline. Methods View Source ExecuteAsync(TRequest) Executes request and returns a response. Declaration Task<TResponse> ExecuteAsync(TRequest input) Parameters Type Name Description TRequest input Input request. Returns Type Description Task <TResponse> Output response."
  },
  "reference/Microsoft.Health.Fhir.Proxy.Pipelines.OperationContext.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Pipelines.OperationContext.html",
    "title": "Class OperationContext | Title",
    "keywords": "Class OperationContext Operation context used for input and output for a filter in a pipeline. Inheritance Object OperationContext Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Microsoft.Health.Fhir.Proxy.Pipelines Assembly : Microsoft.Health.Fhir.Proxy.dll Syntax public class OperationContext Constructors View Source OperationContext() Creates an instance of OperationContext Declaration public OperationContext() View Source OperationContext(HttpRequestMessage) Creates an instance of OperationContext Declaration public OperationContext(HttpRequestMessage message) Parameters Type Name Description HttpRequestMessage message Initial http request message Properties View Source Content Gets or sets the body content of an http request or response. Declaration public byte[] Content { get; set; } Property Value Type Description Byte [] View Source ContentString Gets or sets the body content of an http request or response as a string. Declaration public string ContentString { get; set; } Property Value Type Description String View Source Error Gets or sets an exception when a fatal error occurs processing the operation context Declaration public Exception Error { get; set; } Property Value Type Description Exception View Source IsFatal Gets or sets an indicator that processing of the operation context has a fatal error. Declaration public bool IsFatal { get; set; } Property Value Type Description Boolean View Source Request Gets or sets an http request. Declaration public HttpRequestMessage Request { get; set; } Property Value Type Description HttpRequestMessage View Source StatusCode Gets or sets the status code for an http response. Declaration public HttpStatusCode StatusCode { get; set; } Property Value Type Description HttpStatusCode Methods View Source UpdateRequestUri(HttpMethod, String, String, String, String) Updates the request URI and method. Declaration public void UpdateRequestUri(HttpMethod method, string resource, string id = null, string operation = null, string version = null) Parameters Type Name Description HttpMethod method HTTP method, e.g., GET, POST, PUT, DELETE. String resource FHIR resource type. String id Optional FHIR Id String operation Optional FHIR operation String version Optional FHIR version Extension Methods AzureFunctionExtensions.ConvertToHttpResponseData(OperationContext, HttpRequestData)"
  },
  "reference/Microsoft.Health.Fhir.Proxy.Pipelines.Pipeline.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Pipelines.Pipeline.html",
    "title": "Class Pipeline | Title",
    "keywords": "Class Pipeline Abstact pipeline. Inheritance Object Pipeline BasicPipeline Implements IDisposable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Microsoft.Health.Fhir.Proxy.Pipelines Assembly : Microsoft.Health.Fhir.Proxy.dll Syntax public abstract class Pipeline : IDisposable Properties View Source Channels Gets a collection of channels used by the pipeline. Declaration public virtual ChannelCollection Channels { get; } Property Value Type Description ChannelCollection View Source Filters Gets a collection of filters used by the pipeline. Declaration public virtual FilterCollection Filters { get; } Property Value Type Description FilterCollection View Source Id Gets the instance ID of the pipeline. Declaration public virtual string Id { get; } Property Value Type Description String View Source Name Gets the name of the pipeline. Declaration public abstract string Name { get; } Property Value Type Description String Methods View Source Dispose() Disposes the pipeline. Declaration public abstract void Dispose() View Source ExecuteAsync(OperationContext) Executes the pipeline. Declaration public abstract Task<OperationContext> ExecuteAsync(OperationContext context) Parameters Type Name Description OperationContext context The operation context to execute. Returns Type Description Task < OperationContext > OperationContext Events View Source OnComplete An event that signals the pipeline has completed. Declaration public abstract event EventHandler<PipelineCompleteEventArgs> OnComplete Event Type Type Description EventHandler < PipelineCompleteEventArgs > View Source OnError An event that signals an exception in the pipeline. Declaration public abstract event EventHandler<PipelineErrorEventArgs> OnError Event Type Type Description EventHandler < PipelineErrorEventArgs > Implements System.IDisposable"
  },
  "reference/Microsoft.Health.Fhir.Proxy.Pipelines.PipelineBuilder.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Pipelines.PipelineBuilder.html",
    "title": "Class PipelineBuilder | Title",
    "keywords": "Class PipelineBuilder Pipeline builder. Inheritance Object PipelineBuilder Implements IPipelineBuilder Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Microsoft.Health.Fhir.Proxy.Pipelines Assembly : Microsoft.Health.Fhir.Proxy.dll Syntax public class PipelineBuilder : IPipelineBuilder Constructors View Source PipelineBuilder(PipelineSettings) Creates an instance of PipelineBuilder. Declaration public PipelineBuilder(PipelineSettings settings) Parameters Type Name Description PipelineSettings settings Settings for the pipeline. Methods View Source Build() Builds and pipeline and returns it. Declaration public Pipeline Build() Returns Type Description Pipeline Pipeline Operators View Source Implicit(PipelineBuilder to Pipeline) Creates the builder from the pipeline factory. Declaration public static implicit operator Pipeline(PipelineBuilder builder) Parameters Type Name Description PipelineBuilder builder PipelineBuilder Returns Type Description Pipeline Implements IPipelineBuilder"
  },
  "reference/Microsoft.Health.Fhir.Proxy.Pipelines.PipelineCompleteEventArgs.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Pipelines.PipelineCompleteEventArgs.html",
    "title": "Class PipelineCompleteEventArgs | Title",
    "keywords": "Class PipelineCompleteEventArgs Event args for pipeline complete. Inheritance Object EventArgs PipelineCompleteEventArgs Inherited Members EventArgs.Empty Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Microsoft.Health.Fhir.Proxy.Pipelines Assembly : Microsoft.Health.Fhir.Proxy.dll Syntax public class PipelineCompleteEventArgs : EventArgs Constructors View Source PipelineCompleteEventArgs(String, String, OperationContext) Creates an instance of PipelineCompleteEventArgs. Declaration public PipelineCompleteEventArgs(string id, string name, OperationContext context) Parameters Type Name Description String id Instance ID of the pipeline. String name Name of pipeline. OperationContext context OperationContext Properties View Source Context Gets the OperationContext. Declaration public OperationContext Context { get; } Property Value Type Description OperationContext View Source Id Gets the instance ID of the pipeline. Declaration public string Id { get; } Property Value Type Description String View Source Name Gets the name of the pipeline. Declaration public string Name { get; } Property Value Type Description String"
  },
  "reference/Microsoft.Health.Fhir.Proxy.Pipelines.PipelineErrorEventArgs.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Pipelines.PipelineErrorEventArgs.html",
    "title": "Class PipelineErrorEventArgs | Title",
    "keywords": "Class PipelineErrorEventArgs Event args for pipeline error events. Inheritance Object PipelineErrorEventArgs Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Microsoft.Health.Fhir.Proxy.Pipelines Assembly : Microsoft.Health.Fhir.Proxy.dll Syntax public class PipelineErrorEventArgs Constructors View Source PipelineErrorEventArgs(String, String, Exception) Creates an instance of PipelineErrorEventArgs. Declaration public PipelineErrorEventArgs(string id, string name, Exception error) Parameters Type Name Description String id Instance ID of the pipeline. String name Name of the pipeline. Exception error Exception thrown in the pipeline. Properties View Source Error Exception throw in the pipeline. Declaration public Exception Error { get; } Property Value Type Description Exception View Source Id Gets the instance ID of the pipeline. Declaration public string Id { get; } Property Value Type Description String View Source Name Gets the name of the pipeline. Declaration public string Name { get; } Property Value Type Description String"
  },
  "reference/Microsoft.Health.Fhir.Proxy.Pipelines.PipelineFactory.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Pipelines.PipelineFactory.html",
    "title": "Class PipelineFactory | Title",
    "keywords": "Class PipelineFactory A factory of pipelines. Inheritance Object PipelineFactory Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Microsoft.Health.Fhir.Proxy.Pipelines Assembly : Microsoft.Health.Fhir.Proxy.dll Syntax public abstract class PipelineFactory Methods View Source Clear() Clears the pipeline factory. Declaration public static void Clear() View Source Create(PipelineSettings) Creates a pipeline from the factory. Declaration public static Pipeline Create(PipelineSettings settings) Parameters Type Name Description PipelineSettings settings Pipeline settings. Returns Type Description Pipeline Pipeline View Source Create(String) Create a pipeline from the factory by its name. Declaration public static Pipeline Create(string name) Parameters Type Name Description String name Name of the pipeline in the factory to create. Returns Type Description Pipeline Pipeline View Source GetNames() Gets an array of pipeline names. Declaration public static string[] GetNames() Returns Type Description String [] Array string names. View Source Register(Pipeline) Registers a pipeline in the factory. Declaration public static void Register(Pipeline pipeline) Parameters Type Name Description Pipeline pipeline"
  },
  "reference/Microsoft.Health.Fhir.Proxy.Pipelines.WebPipelineManager.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Pipelines.WebPipelineManager.html",
    "title": "Class WebPipelineManager | Title",
    "keywords": "Class WebPipelineManager Manages input and output pipelines for a Web app. Inheritance Object WebPipelineManager Implements IPipelineManager < HttpRequestMessage , HttpResponseMessage > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Microsoft.Health.Fhir.Proxy.Pipelines Assembly : Microsoft.Health.Fhir.Proxy.dll Syntax public sealed class WebPipelineManager : IPipelineManager<HttpRequestMessage, HttpResponseMessage> Constructors View Source WebPipelineManager(PipelineSettings, PipelineBinding, PipelineSettings, TelemetryClient, ILogger) Creates an instance of WebPipelineManager. Declaration public WebPipelineManager(PipelineSettings input, PipelineBinding binding, PipelineSettings output, TelemetryClient client = null, ILogger logger = null) Parameters Type Name Description PipelineSettings input Input pipeline settings. PipelineBinding binding Binding between input and output pipelines. PipelineSettings output Output pipeline settings. TelemetryClient client Telemetry cleint. ILogger logger ILogger Properties View Source AfterInput Optional function that executes after the input pipeline. Declaration public Func<OperationContext, OperationContext> AfterInput { get; set; } Property Value Type Description Func < OperationContext , OperationContext > View Source AfterOutput Optional function that executes after the output pipeline. Declaration public Func<OperationContext, OperationContext> AfterOutput { get; set; } Property Value Type Description Func < OperationContext , OperationContext > View Source BeforeInput Optional function that executes prior to the input pipeline. Declaration public Func<OperationContext, OperationContext> BeforeInput { get; set; } Property Value Type Description Func < OperationContext , OperationContext > View Source BeforeOutput Optional function that executes prior to the output pipeline. Declaration public Func<OperationContext, OperationContext> BeforeOutput { get; set; } Property Value Type Description Func < OperationContext , OperationContext > Methods View Source ExecuteAsync(HttpRequestMessage) Executes the all the configured components. Declaration public async Task<HttpResponseMessage> ExecuteAsync(HttpRequestMessage request) Parameters Type Name Description HttpRequestMessage request HttpRequestMessage from Web app. Returns Type Description Task < HttpResponseMessage > HttpResponseMessage for Web app. Implements IPipelineManager<TRequest, TResponse>"
  },
  "reference/Microsoft.Health.Fhir.Proxy.Protocol.FhirPath.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Protocol.FhirPath.html",
    "title": "Class FhirPath | Title",
    "keywords": "Class FhirPath Inheritance Object Uri FhirPath Implements ISerializable Inherited Members Uri.SchemeDelimiter Uri.UriSchemeFile Uri.UriSchemeFtp Uri.UriSchemeGopher Uri.UriSchemeHttp Uri.UriSchemeHttps Uri.UriSchemeMailto Uri.UriSchemeNetPipe Uri.UriSchemeNetTcp Uri.UriSchemeNews Uri.UriSchemeNntp Uri.Canonicalize() Uri.CheckHostName(String) Uri.CheckSchemeName(String) Uri.CheckSecurity() Uri.Compare(Uri, Uri, UriComponents, UriFormat, StringComparison) Uri.Equals(Object) Uri.Escape() Uri.EscapeDataString(String) Uri.EscapeString(String) Uri.EscapeUriString(String) Uri.FromHex(Char) Uri.GetComponents(UriComponents, UriFormat) Uri.GetHashCode() Uri.GetLeftPart(UriPartial) Uri.GetObjectData(SerializationInfo, StreamingContext) Uri.HexEscape(Char) Uri.HexUnescape(String, Int32) Uri.IsBadFileSystemCharacter(Char) Uri.IsBaseOf(Uri) Uri.IsExcludedCharacter(Char) Uri.IsHexDigit(Char) Uri.IsHexEncoding(String, Int32) Uri.IsReservedCharacter(Char) Uri.IsWellFormedOriginalString() Uri.IsWellFormedUriString(String, UriKind) Uri.MakeRelative(Uri) Uri.MakeRelativeUri(Uri) Uri.Parse() Uri.ISerializable.GetObjectData(SerializationInfo, StreamingContext) Uri.ToString() Uri.TryCreate(String, UriKind, Uri) Uri.TryCreate(Uri, String, Uri) Uri.TryCreate(Uri, Uri, Uri) Uri.Unescape(String) Uri.UnescapeDataString(String) Uri.AbsolutePath Uri.AbsoluteUri Uri.Authority Uri.DnsSafeHost Uri.Fragment Uri.Host Uri.HostNameType Uri.IdnHost Uri.IsAbsoluteUri Uri.IsDefaultPort Uri.IsFile Uri.IsLoopback Uri.IsUnc Uri.LocalPath Uri.OriginalString Uri.PathAndQuery Uri.Port Uri.Query Uri.Scheme Uri.Segments Uri.UserEscaped Uri.UserInfo Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Microsoft.Health.Fhir.Proxy.Protocol Assembly : Microsoft.Health.Fhir.Proxy.dll Syntax public class FhirPath : Uri, ISerializable Constructors View Source FhirPath(String, String, String) Creates an instance of FhirPath. Declaration public FhirPath(string method, string requestUriString, string routePrefix = \"fhir\") Parameters Type Name Description String method HTTP method used in request. String requestUriString The request URI. String routePrefix Optional route prefix; default is 'fhir'. Properties View Source Id Gets or sets the FHIR id in the request URI. Declaration public string Id { get; set; } Property Value Type Description String View Source Method Gets or sets the HTTP method used with the request URI. Declaration public string Method { get; set; } Property Value Type Description String View Source NormalizedPath Gets the path of the request URI exclusive on route prefix. Declaration public string NormalizedPath { get; } Property Value Type Description String View Source Operation Gets or sets the FHIR operation in the request URI. Declaration public string Operation { get; set; } Property Value Type Description String View Source Path Gets the path of the request Uri. Declaration public string Path { get; } Property Value Type Description String View Source Resource Gets or sets the FHIR resource in the request URI. Declaration public string Resource { get; set; } Property Value Type Description String View Source RoutePrefix Gets or sets the route prefix. Declaration public string RoutePrefix { get; set; } Property Value Type Description String View Source Version Gets or sets the FHIR version in the request URI. Declaration public string Version { get; set; } Property Value Type Description String Methods View Source HasQueryParameter(String) Indicates whether a query string parameter is present in the request URI. Declaration public bool HasQueryParameter(string key) Parameters Type Name Description String key Returns Type Description Boolean Implements System.Runtime.Serialization.ISerializable Extension Methods UriExtensions.RemoveRoutePrefix(Uri, String)"
  },
  "reference/Microsoft.Health.Fhir.Proxy.Protocol.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Protocol.html",
    "title": "Namespace Microsoft.Health.Fhir.Proxy.Protocol | Title",
    "keywords": "Namespace Microsoft.Health.Fhir.Proxy.Protocol Classes FhirPath"
  },
  "reference/Microsoft.Health.Fhir.Proxy.Security.Authenticator.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Security.Authenticator.html",
    "title": "Class Authenticator | Title",
    "keywords": "Class Authenticator Authenticator class for Azure Active Directory. Inheritance Object Authenticator Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Microsoft.Health.Fhir.Proxy.Security Assembly : Microsoft.Health.Fhir.Proxy.dll Syntax public class Authenticator Constructors View Source Authenticator(String, ServiceConfig) Creates an instance of authenticator. Declaration public Authenticator(string resource, ServiceConfig config) Parameters Type Name Description String resource ServiceConfig config Properties View Source Certificate Gets X509 certificate. Declaration public X509Certificate2 Certificate { get; } Property Value Type Description X509Certificate2 View Source ClientId Gets the client_id. Declaration public string ClientId { get; } Property Value Type Description String View Source ClientSecret Gets the client_secret. Declaration public string ClientSecret { get; } Property Value Type Description String View Source Resource Gets the resource. Declaration public string Resource { get; } Property Value Type Description String View Source TenantId Gets the tenant_id Declaration public string TenantId { get; } Property Value Type Description String Methods View Source AcquireTokenForClientAsync(String[]) Acquires access token for client. Declaration public async Task<string> AcquireTokenForClientAsync(string[] scopes = null) Parameters Type Name Description String [] scopes Optional scopes. The default is resource/.default Returns Type Description Task < String > View Source AcquireTokenOnBehalfOfAsync(String, String[]) Declaration public async Task<string> AcquireTokenOnBehalfOfAsync(string bearerToken, string[] scopes = null) Parameters Type Name Description String bearerToken String [] scopes Returns Type Description Task < String >"
  },
  "reference/Microsoft.Health.Fhir.Proxy.Security.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Security.html",
    "title": "Namespace Microsoft.Health.Fhir.Proxy.Security | Title",
    "keywords": "Namespace Microsoft.Health.Fhir.Proxy.Security Classes Authenticator Authenticator class for Azure Active Directory."
  },
  "reference/Microsoft.Health.Fhir.Proxy.Storage.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Storage.html",
    "title": "Namespace Microsoft.Health.Fhir.Proxy.Storage | Title",
    "keywords": "Namespace Microsoft.Health.Fhir.Proxy.Storage Classes StorageBlob Allows simple access to Azure Blob Storage. StorageFiles Allows simple access to Azure File Storage. StorageLake Allows simple access to Azure Data Lake. StorageQueue Allows simple access to Azure storage queues. StorageTable Allows simple access to Azure storage tables."
  },
  "reference/Microsoft.Health.Fhir.Proxy.Storage.StorageBlob.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Storage.StorageBlob.html",
    "title": "Class StorageBlob | Title",
    "keywords": "Class StorageBlob Allows simple access to Azure Blob Storage. Inheritance Object StorageBlob Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Microsoft.Health.Fhir.Proxy.Storage Assembly : Microsoft.Health.Fhir.Proxy.Storage.dll Syntax public class StorageBlob Constructors View Source StorageBlob(Nullable<Int64>, Nullable<Int32>, Nullable<Int32>, ILogger) Creates an instance of StorageBlob. Declaration public StorageBlob(long? initialTransferSize, int? maxConcurrency, int? maxTransferSize, ILogger logger = null) Parameters Type Name Description Nullable < Int64 > initialTransferSize Optional size of the first range request in bytes. Blobs smaller than this limit will be downloaded in a single request. Blobs larger than this limit will continue being downloaded in chunks of size maxTransfersize. Nullable < Int32 > maxConcurrency Optional maximum number of workers that may be used in a parallel transfer. Nullable < Int32 > maxTransferSize Optional The maximum length of an transfer in bytes. ILogger logger Optional ILogger. View Source StorageBlob(String, BlobClientOptions, Nullable<Int64>, Nullable<Int32>, Nullable<Int32>, ILogger) Creates an instance of StorageBlob. Declaration public StorageBlob(string connectionString, BlobClientOptions options, long? initialTransferSize = null, int? maxConcurrency = null, int? maxTransferSize = null, ILogger logger = null) Parameters Type Name Description String connectionString Azure storage connection string. BlobClientOptions options Blob client options. Nullable < Int64 > initialTransferSize Optional size of the first range request in bytes. Blobs smaller than this limit will be downloaded in a single request. Blobs larger than this limit will continue being downloaded in chunks of size maxTransfersize. Nullable < Int32 > maxConcurrency Optional maximum number of workers that may be used in a parallel transfer. Nullable < Int32 > maxTransferSize Optional The maximum length of an transfer in bytes. ILogger logger Optional ILogger. View Source StorageBlob(String, Nullable<Int64>, Nullable<Int32>, Nullable<Int32>, ILogger) Creates an instance of StorageBlob Declaration public StorageBlob(string connectionString, long? initialTransferSize = null, int? maxConcurrency = null, int? maxTransferSize = null, ILogger logger = null) Parameters Type Name Description String connectionString Azure storage connection string. Nullable < Int64 > initialTransferSize Optional size of the first range request in bytes. Blobs smaller than this limit will be downloaded in a single request. Blobs larger than this limit will continue being downloaded in chunks of size maxTransfersize. Nullable < Int32 > maxConcurrency Optional maximum number of workers that may be used in a parallel transfer. Nullable < Int32 > maxTransferSize Optional The maximum length of an transfer in bytes. ILogger logger Optional ILogger. View Source StorageBlob(Uri, AzureSasCredential, BlobClientOptions, Nullable<Int64>, Nullable<Int32>, Nullable<Int32>, ILogger) Creates an instance of StorageBlob. Declaration public StorageBlob(Uri serviceUri, AzureSasCredential credential, BlobClientOptions options = null, long? initialTransferSize = null, int? maxConcurrency = null, int? maxTransferSize = null, ILogger logger = null) Parameters Type Name Description Uri serviceUri Service URI AzureSasCredential credential SAS credentials for authentication. BlobClientOptions options Optional blob client options. Nullable < Int64 > initialTransferSize Optional size of the first range request in bytes. Blobs smaller than this limit will be downloaded in a single request. Blobs larger than this limit will continue being downloaded in chunks of size maxTransfersize. Nullable < Int32 > maxConcurrency Optional maximum number of workers that may be used in a parallel transfer. Nullable < Int32 > maxTransferSize Optional The maximum length of an transfer in bytes. ILogger logger Optional ILogger. View Source StorageBlob(Uri, TokenCredential, BlobClientOptions, Nullable<Int64>, Nullable<Int32>, Nullable<Int32>, ILogger) Creates an instance of StorageBlob. Declaration public StorageBlob(Uri serviceUri, TokenCredential credentials, BlobClientOptions options = null, long? initialTransferSize = null, int? maxConcurrency = null, int? maxTransferSize = null, ILogger logger = null) Parameters Type Name Description Uri serviceUri Service URI. TokenCredential credentials Token credentials for authentication. BlobClientOptions options Optional Blob client options. Nullable < Int64 > initialTransferSize Optional size of the first range request in bytes. Blobs smaller than this limit will be downloaded in a single request. Blobs larger than this limit will continue being downloaded in chunks of size maxTransfersize. Nullable < Int32 > maxConcurrency Optional maximum number of workers that may be used in a parallel transfer. Nullable < Int32 > maxTransferSize Optional The maximum length of an transfer in bytes. ILogger logger Optional ILogger. View Source StorageBlob(Uri, BlobClientOptions, Nullable<Int64>, Nullable<Int32>, Nullable<Int32>, ILogger) Creates an instance of StorageBlob. Declaration public StorageBlob(Uri serviceUri, BlobClientOptions options = null, long? initialTransferSize = null, int? maxConcurrency = null, int? maxTransferSize = null, ILogger logger = null) Parameters Type Name Description Uri serviceUri Service URI. BlobClientOptions options Optional blob client options. Nullable < Int64 > initialTransferSize Optional size of the first range request in bytes. Blobs smaller than this limit will be downloaded in a single request. Blobs larger than this limit will continue being downloaded in chunks of size maxTransfersize. Nullable < Int32 > maxConcurrency Optional maximum number of workers that may be used in a parallel transfer. Nullable < Int32 > maxTransferSize Optional The maximum length of an transfer in bytes. ILogger logger Optional ILogger. View Source StorageBlob(Uri, StorageSharedKeyCredential, BlobClientOptions, Nullable<Int64>, Nullable<Int32>, Nullable<Int32>, ILogger) Creates an instance of StorageBlob. Declaration public StorageBlob(Uri serviceUri, StorageSharedKeyCredential credential, BlobClientOptions options = null, long? initialTransferSize = null, int? maxConcurrency = null, int? maxTransferSize = null, ILogger logger = null) Parameters Type Name Description Uri serviceUri Service URI. StorageSharedKeyCredential credential Shared key credential for authentication. BlobClientOptions options Optional blob client options. Nullable < Int64 > initialTransferSize Optional size of the first range request in bytes. Blobs smaller than this limit will be downloaded in a single request. Blobs larger than this limit will continue being downloaded in chunks of size maxTransfersize. Nullable < Int32 > maxConcurrency Optional maximum number of workers that may be used in a parallel transfer. Nullable < Int32 > maxTransferSize Optional The maximum length of an transfer in bytes. ILogger logger Optional ILogger. Methods View Source ContainerExistsAsync(String, CancellationToken) Indicates whether a blob container exists. Declaration public async Task<bool> ContainerExistsAsync(string containerName, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String containerName Name of container. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < Boolean > True if container exists; otherwise false. View Source CreateContainerIfNotExistsAsync(String, PublicAccessType) Creates a blob storage container if it does not already exist. Declaration public async Task<Response<BlobContainerInfo>> CreateContainerIfNotExistsAsync(string containerName, PublicAccessType publicAccess = PublicAccessType.None) Parameters Type Name Description String containerName Name of container to create. PublicAccessType publicAccess Specifies whether data in the container may be accessed publicly and the level of access.; default is \"None\". Returns Type Description Task < Response < BlobContainerInfo >> BlobContainerInfo View Source DeleteBlobAsync(String, String) Deletes a blob from a container in blob storage. Declaration public async Task<bool> DeleteBlobAsync(string containerName, string blobName) Parameters Type Name Description String containerName Name of container where blob is written. String blobName Name of blob to delete. Returns Type Description Task < Boolean > True if blob is deleted; otherwise false. View Source DeleteContainerIfExistsAsync(String, BlobRequestConditions, CancellationToken) Deletes a blob storage container if it exists. Declaration public async Task<bool> DeleteContainerIfExistsAsync(string containerName, BlobRequestConditions conditions = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String containerName Name of container to delete. BlobRequestConditions conditions Optional blob lease access conditions for a container or blob. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < Boolean > True if container deleted or did not exist; otherwise false. View Source DownloadAppendBlobAsync(String, String, BlobRequestConditions, CancellationToken) Downloads an append blob from a container and returns the result. Declaration public async Task<BlobDownloadResult> DownloadAppendBlobAsync(string containerName, string blobName, BlobRequestConditions conditions = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String containerName Name of container where blob exists. String blobName Name of blob to read. BlobRequestConditions conditions Optional blob lease access conditions for a container or blob. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < BlobDownloadResult > BlobDownloadResult View Source DownloadAppendBlobToAsync(String, String, Stream, BlobRequestConditions, CancellationToken) Downloads an append blob from blob storage and returns the response. Declaration public async Task<Response> DownloadAppendBlobToAsync(string containerName, string blobName, Stream destination, BlobRequestConditions conditions = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String containerName Name of container where blob exists. String blobName Name of blob to read. Stream destination Stream to write. BlobRequestConditions conditions Optional blob lease access conditions for a container or blob. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < Response > Response View Source DownloadAppendBlobToAsync(String, String, String, BlobRequestConditions, CancellationToken) Downloads an append blob from a container and returns the result. Declaration public async Task<Response> DownloadAppendBlobToAsync(string containerName, string blobName, string path, BlobRequestConditions conditions = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String containerName Name of container where blob exists. String blobName Name of blob to read. String path Path to write the downloaded blob to the local file system. BlobRequestConditions conditions Optional blob lease access conditions for a container or blob. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < Response > Response View Source DownloadBlockBlobAsync(String, String, BlobRequestConditions, CancellationToken) Downloads a block blob from a container and returns the result. Declaration public async Task<BlobDownloadResult> DownloadBlockBlobAsync(string containerName, string blobName, BlobRequestConditions conditions = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String containerName Name of container where blob exists. String blobName Name of blob to read. BlobRequestConditions conditions Optional blob lease access conditions for a container or blob. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < BlobDownloadResult > BlobDownloadResult View Source DownloadBlockBlobToAsync(String, String, Stream, BlobRequestConditions, CancellationToken) Downloads a block blob from blob storage and returns the response. Declaration public async Task<Response> DownloadBlockBlobToAsync(string containerName, string blobName, Stream destination, BlobRequestConditions conditions = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String containerName Name of container where blob exists. String blobName Name of blob to read. Stream destination Stream to write. BlobRequestConditions conditions Optional blob lease access conditions for a container or blob. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < Response > Response View Source DownloadBlockBlobToAsync(String, String, String, BlobRequestConditions, CancellationToken) Downloads a block blob and writes a file to the local file system. Declaration public async Task<Response> DownloadBlockBlobToAsync(string containerName, string blobName, string path, BlobRequestConditions conditions = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String containerName Name of container where blob exists. String blobName Name of blob to read. String path Path to write the downloaded blob to the local file system. BlobRequestConditions conditions Optional blob lease access conditions for a container or blob. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < Response > Response View Source GetBlobPropertiesAsync(String, String, BlobRequestConditions, CancellationToken) Gets properties of a blob in a container. Declaration public async Task<BlobProperties> GetBlobPropertiesAsync(string containerName, string blobName, BlobRequestConditions conditions = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String containerName Name of container where blob exists. String blobName Name of blob to get properties. BlobRequestConditions conditions Optional blob lease access conditions for a container or blob. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < BlobProperties > BlobProperties View Source ListBlobMetadataInContainerAsync(String, BlobTraits, BlobStates, String, CancellationToken) Gets a list of blob metadata in a container. Declaration public async Task<IDictionary<string, string>[]> ListBlobMetadataInContainerAsync(string containerName, BlobTraits traits = BlobTraits.None, BlobStates states = BlobStates.None, string prefix = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String containerName Name of container to get metadata. BlobTraits traits Optional specifies trait options for shaping the blob containers.; default is \"None\". BlobStates states Optional specifies states options for shaping the blob containers; default is \"None\". String prefix Optional specifies a string that filters the results to return only containers whose name begins with the specified prefix. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < IDictionary < String , String >[]> Array of Dictionary<string,string>[] containing metadata. View Source ListBlobsAsync(String, Nullable<Int32>, BlobTraits, BlobStates, String, CancellationToken) Gets a list of blob names in a storage container. Declaration public async Task<List<string>> ListBlobsAsync(string containerName, int? segmentSize = null, BlobTraits traits = BlobTraits.None, BlobStates states = BlobStates.None, string prefix = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String containerName Name of container to return blob names. Nullable < Int32 > segmentSize Optional maximum number of blob names to be returned. BlobTraits traits Optional specifies trait options for shaping the blob containers.; default is \"None\". BlobStates states Optional specifies states options for shaping the blob containers; default is \"None\". String prefix Optional specifies a string that filters the results to return only containers whose name begins with the specified prefix. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < List < String >> List of blob names in container. View Source ListContainers(BlobContainerTraits, BlobContainerStates, String, CancellationToken) Gets a list of pageable container names. Declaration public AsyncPageable<BlobContainerItem> ListContainers(BlobContainerTraits traits = BlobContainerTraits.None, BlobContainerStates states = BlobContainerStates.None, string prefix = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description BlobContainerTraits traits Optional specifies trait options for shaping the blob containers.; default is \"None\". BlobContainerStates states Optional specifies states options for shaping the blob containers; default is \"None\". String prefix Optional specifies a string that filters the results to return only containers whose name begins with the specified prefix. CancellationToken cancellationToken Optional cancellation token. Returns Type Description AsyncPageable < BlobContainerItem > AsyncPageable<BlobContainerItem> View Source ReadAppendBlobAsync(String, String, BlobOpenReadOptions, CancellationToken) Gets the contents of an append blob and returns as an array of bytes. Declaration public async Task<byte[]> ReadAppendBlobAsync(string containerName, string blobName, BlobOpenReadOptions options = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String containerName Name of container where blob resides. String blobName Name of the blob to read. BlobOpenReadOptions options Optional blob open read options. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < Byte []> Array of bytes of the blob content. View Source ReadBlockBlobAsync(String, String, BlobOpenReadOptions, CancellationToken) Gets the contents of a blob and returns as an array of bytes. Declaration public async Task<byte[]> ReadBlockBlobAsync(string containerName, string blobName, BlobOpenReadOptions options = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String containerName Name of container where blob resides. String blobName Name of the blob to read. BlobOpenReadOptions options Optional blob open read options. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < Byte []> Array of bytes of the blob content. View Source ReadPageBlobAsync(String, String, BlobOpenReadOptions, CancellationToken) Gets the contents of a page blob and returns as an array of bytes. Declaration public async Task<byte[]> ReadPageBlobAsync(string containerName, string blobName, BlobOpenReadOptions options = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String containerName Name of container where blob resides. String blobName Name of the blob to read. BlobOpenReadOptions options Optional blob open read options. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < Byte []> Array of bytes of the blob content. View Source UploadBlobAsync(String, String, String, String, IDictionary<String, String>, BlobRequestConditions, CancellationToken) Uploads a blob from the local file system to a blob storage container. Declaration public async Task UploadBlobAsync(string containerName, string blobName, string contentType, string path, IDictionary<string, string> metadata = null, BlobRequestConditions conditions = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String containerName Name of container where blob is written. String blobName Name of blob to write. String contentType Content type of blob. String path Path to local file to upload. IDictionary < String , String > metadata Optional blob metadata. BlobRequestConditions conditions Optional blob lease access conditions for a container or blob. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task Task View Source WriteAppendBlobAsync(String, String, String, Byte[], AppendBlobOpenWriteOptions, AppendBlobCreateOptions, IDictionary<String, String>, BlobRequestConditions, CancellationToken) Writes an append blob to a storage container. Declaration public async Task WriteAppendBlobAsync(string containerName, string blobName, string contentType, byte[] content, AppendBlobOpenWriteOptions writeOptions = null, AppendBlobCreateOptions createOptions = null, IDictionary<string, string> metadata = null, BlobRequestConditions conditions = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String containerName Name of container where blob is written. String blobName Name of blob to write. String contentType Content type of blob. Byte [] content Content of the blob to write. AppendBlobOpenWriteOptions writeOptions Optional append blob open write options. AppendBlobCreateOptions createOptions Optional append blob create options. IDictionary < String , String > metadata Optional blob metadata. BlobRequestConditions conditions Optional blob lease access conditions for a container or blob. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task Task View Source WriteAppendBlobAsync(String, String, String, Stream, AppendBlobOpenWriteOptions, AppendBlobCreateOptions, IDictionary<String, String>, BlobRequestConditions, CancellationToken) Writes an append blob to a storage container. Declaration public async Task WriteAppendBlobAsync(string containerName, string blobName, string contentType, Stream content, AppendBlobOpenWriteOptions writeOptions = null, AppendBlobCreateOptions createOptions = null, IDictionary<string, string> metadata = null, BlobRequestConditions conditions = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String containerName Name of container where blob is written. String blobName Name of blob to write. String contentType Content type of blob. Stream content Content stream of the blob to write. AppendBlobOpenWriteOptions writeOptions Optional append blob open write options. AppendBlobCreateOptions createOptions Optional append blob create options. IDictionary < String , String > metadata Optional blob metadata. BlobRequestConditions conditions Optional blob lease access conditions for a container or blob. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task Task View Source WriteBlockBlobAsync(String, String, String, Byte[], BlockBlobOpenWriteOptions, IDictionary<String, String>, BlobRequestConditions, CancellationToken) Writes a block blob to a container. Declaration public async Task WriteBlockBlobAsync(string containerName, string blobName, string contentType, byte[] content, BlockBlobOpenWriteOptions options = null, IDictionary<string, string> metadata = null, BlobRequestConditions conditions = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String containerName Name of container where blob is written. String blobName Name of blob to write. String contentType Content type of blob. Byte [] content Content of the blob to write. BlockBlobOpenWriteOptions options Optional block blob open write options. IDictionary < String , String > metadata Optional metadata for the blob. BlobRequestConditions conditions Optional blob lease access conditions for a container or blob. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task Task View Source WriteBlockBlobAsync(String, String, String, Stream, BlockBlobOpenWriteOptions, IDictionary<String, String>, BlobRequestConditions, CancellationToken) Writes a block blob to a container. Declaration public async Task WriteBlockBlobAsync(string containerName, string blobName, string contentType, Stream content, BlockBlobOpenWriteOptions options = null, IDictionary<string, string> metadata = null, BlobRequestConditions conditions = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String containerName Name of container where blob is written. String blobName Name of blob to write. String contentType Content type of blob. Stream content Content stream of the blob to write. BlockBlobOpenWriteOptions options Optional block blob open write options. IDictionary < String , String > metadata Optional metadata for the blob. BlobRequestConditions conditions Optional blob lease access conditions for a container or blob. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task Task"
  },
  "reference/Microsoft.Health.Fhir.Proxy.Storage.StorageFiles.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Storage.StorageFiles.html",
    "title": "Class StorageFiles | Title",
    "keywords": "Class StorageFiles Allows simple access to Azure File Storage. Inheritance Object StorageFiles Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Microsoft.Health.Fhir.Proxy.Storage Assembly : Microsoft.Health.Fhir.Proxy.Storage.dll Syntax public class StorageFiles Constructors View Source StorageFiles(ILogger) Declaration protected StorageFiles(ILogger logger = null) Parameters Type Name Description ILogger logger View Source StorageFiles(String, ShareClientOptions, ILogger) Creates an instance of StorageFiles. Declaration public StorageFiles(string connectionString, ShareClientOptions options, ILogger logger = null) Parameters Type Name Description String connectionString Azure storage connection string. ShareClientOptions options Client options that define the transport pipeline policies for authentication, retries, etc., that are applied to every request. ILogger logger Optional ILogger. View Source StorageFiles(String, ILogger) Creates an instance of StorageFiles. Declaration public StorageFiles(string connectionString, ILogger logger = null) Parameters Type Name Description String connectionString Azure storage connection string. ILogger logger Optional ILogger. View Source StorageFiles(Uri, AzureSasCredential, ShareClientOptions, ILogger) Creates an instance of StorageFiles. Declaration public StorageFiles(Uri serviceUri, AzureSasCredential credentials, ShareClientOptions options, ILogger logger = null) Parameters Type Name Description Uri serviceUri Uri referencing the file service. AzureSasCredential credentials The shared access signature credential used to sign requests. ShareClientOptions options Optional client options that define the transport pipeline policies for authentication, retries, etc., that are applied to every request. ILogger logger Optional ILogger. View Source StorageFiles(Uri, ShareClientOptions, ILogger) Creates an instance of StorageFiles. Declaration public StorageFiles(Uri serviceUri, ShareClientOptions options = null, ILogger logger = null) Parameters Type Name Description Uri serviceUri Uri referencing the file service. ShareClientOptions options Optional client options that define the transport pipeline policies for authentication, retries, etc., that are applied to every request. ILogger logger Optional ILogger. View Source StorageFiles(Uri, StorageSharedKeyCredential, ShareClientOptions, ILogger) Declaration public StorageFiles(Uri serviceUri, StorageSharedKeyCredential credentials, ShareClientOptions options = null, ILogger logger = null) Parameters Type Name Description Uri serviceUri Uri referencing the file service. StorageSharedKeyCredential credentials The shared key credential used to sign requests. ShareClientOptions options Client options that define the transport pipeline policies for authentication, retries, etc., that are applied to every request. ILogger logger Optionak ILogger. Methods View Source CreateDirectoryIfNotExistsAsync(String, String, IDictionary<String, String>, FileSmbProperties, String, CancellationToken) Creates a directory in a share if the directory does not already exist. Declaration public async Task<ShareDirectoryInfo> CreateDirectoryIfNotExistsAsync(string shareName, string directoryName, IDictionary<string, string> metadata = null, FileSmbProperties smbProperties = null, string filePermission = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String shareName Name of share where directory should be created. String directoryName Name of directory to create. IDictionary < String , String > metadata Optional metadata. FileSmbProperties smbProperties Optional SMB properties. String filePermission Optional file permissions. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < ShareDirectoryInfo > ShareDirectoryInfo View Source CreateShareIfNotExistsAsync(String, ShareCreateOptions, CancellationToken) Creates a file share is one does not already exist. Declaration public async Task<ShareInfo> CreateShareIfNotExistsAsync(string shareName, ShareCreateOptions options = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String shareName Name of share to create. ShareCreateOptions options Optional share create options. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < ShareInfo > ShareInfo View Source DeleteDirectoryIfExistsAsync(String, String, CancellationToken) Deletes a directory in a share if the directory already exists. Declaration public async Task<bool> DeleteDirectoryIfExistsAsync(string shareName, string directoryName, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String shareName Name of share where directory exists. String directoryName Name of directory to delete. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < Boolean > True if the directory is deleted or does not exist; otherwise false. View Source DeleteFileIfExistsAsync(String, String, String, ShareFileRequestConditions, CancellationToken) Deletes a file in directory of a share if it already exists. Declaration public async Task<bool> DeleteFileIfExistsAsync(string shareName, string directoryName, string fileName, ShareFileRequestConditions conditions = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String shareName Name of share where directory exists. String directoryName Name of directory that contains the file. String fileName File name to delete. ShareFileRequestConditions conditions Optional share file request options. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < Boolean > True if the file is deleted or does not exist; otherwise false. View Source DeleteShareIfExistsAsync(String, ShareDeleteOptions, CancellationToken) Deletes an Azure file share if exists. Declaration public async Task<bool> DeleteShareIfExistsAsync(string shareName, ShareDeleteOptions options = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String shareName Name of share to delete. ShareDeleteOptions options Optional share delete options. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < Boolean > True if share is deleted; otherwise false. View Source ListDirectoriesAsync(String, String, String, CancellationToken) Gets a list of sub-directories in directory of a share. Declaration public async Task<List<string>> ListDirectoriesAsync(string shareName, string directoryName, string prefix = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String shareName Name of share to read directory names. String directoryName Name of parent directory to read names of sub-directories. String prefix Optional prefix. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < List < String >> Sub-directory names as a list of strings. View Source ListFilesAsync(String, String, String, CancellationToken) Gets a list of file names from a directory in a share. Declaration public async Task<List<string>> ListFilesAsync(string shareName, string directoryName, string prefix = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String shareName Name of share where directory exists. String directoryName Name of directory to read list of files. String prefix Optional prefix. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < List < String >> File names in directory as list of strings. View Source ReadFileAsync(String, String, String, ShareFileOpenReadOptions, CancellationToken) Reads a file from directory in a share and returns the result. Declaration public async Task<byte[]> ReadFileAsync(string shareName, string directoryName, string fileName, ShareFileOpenReadOptions options = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String shareName Name of share where directory exists. String directoryName Name of directory where file exists. String fileName Name of file to read. ShareFileOpenReadOptions options Optional share file open read options. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < Byte []> Array of bytes of the file content. View Source WriteFileAsync(String, String, String, Byte[], ShareFileOpenWriteOptions, CancellationToken) Writes a file to a directory in a share. Declaration public async Task WriteFileAsync(string shareName, string directoryName, string fileName, byte[] content, ShareFileOpenWriteOptions options = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String shareName Name of share where directory exists. String directoryName Name of directory to write the file. String fileName Name of file to write. Byte [] content Content of the file to write. ShareFileOpenWriteOptions options Optional share file open write options. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task Task"
  },
  "reference/Microsoft.Health.Fhir.Proxy.Storage.StorageLake.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Storage.StorageLake.html",
    "title": "Class StorageLake | Title",
    "keywords": "Class StorageLake Allows simple access to Azure Data Lake. Inheritance Object StorageLake Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Microsoft.Health.Fhir.Proxy.Storage Assembly : Microsoft.Health.Fhir.Proxy.Storage.dll Syntax public class StorageLake Constructors View Source StorageLake(ILogger) Declaration protected StorageLake(ILogger logger = null) Parameters Type Name Description ILogger logger View Source StorageLake(String, DataLakeClientOptions, ILogger) Creates an instance of StorageLake. Declaration public StorageLake(string connectionString, DataLakeClientOptions options, ILogger logger = null) Parameters Type Name Description String connectionString A connection string includes the authentication information required for your application to access data in an Azure Storage account at runtime. DataLakeClientOptions options Client options that define the transport pipeline policies for authentication, retries, etc., that are applied to every request. ILogger logger Optional ILogger. View Source StorageLake(String, ILogger) Creates an instance of StorageLake. Declaration public StorageLake(string connectionString, ILogger logger = null) Parameters Type Name Description String connectionString A connection string includes the authentication information required for your application to access data in an Azure Storage account at runtime. ILogger logger Optional ILogger. View Source StorageLake(Uri, AzureSasCredential, DataLakeClientOptions, ILogger) Creates an instance of StorageLake. Declaration public StorageLake(Uri serviceUri, AzureSasCredential credential, DataLakeClientOptions options, ILogger logger = null) Parameters Type Name Description Uri serviceUri A Uri referencing the Data Lake service AzureSasCredential credential The shared access signature credential used to sign requests. DataLakeClientOptions options Client options that define the transport pipeline policies for authentication, retries, etc., that are applied to every request. ILogger logger Optional ILogger. View Source StorageLake(Uri, AzureSasCredential, ILogger) Creates an instance of StorageLake. Declaration public StorageLake(Uri serviceUri, AzureSasCredential credential, ILogger logger = null) Parameters Type Name Description Uri serviceUri A Uri referencing the Data Lake service AzureSasCredential credential The shared access signature credential used to sign requests. ILogger logger Optional ILogger. View Source StorageLake(Uri, TokenCredential, DataLakeClientOptions, ILogger) Creates an instance of StorageLake. Declaration public StorageLake(Uri serviceUri, TokenCredential credential, DataLakeClientOptions options, ILogger logger = null) Parameters Type Name Description Uri serviceUri A Uri referencing the Data Lake service TokenCredential credential The token credential used to sign requests. DataLakeClientOptions options Client options that define the transport pipeline policies for authentication, retries, etc., that are applied to every request. ILogger logger Optional ILogger. View Source StorageLake(Uri, TokenCredential, ILogger) Creates an instance of StorageLake. Declaration public StorageLake(Uri serviceUri, TokenCredential credential, ILogger logger = null) Parameters Type Name Description Uri serviceUri A Uri referencing the Data Lake service TokenCredential credential The token credential used to sign requests. ILogger logger Optional ILogger. View Source StorageLake(Uri, DataLakeClientOptions, ILogger) Creates an instance of StorageLake. Declaration public StorageLake(Uri serviceUri, DataLakeClientOptions options, ILogger logger = null) Parameters Type Name Description Uri serviceUri A Uri referencing the Data Lake service DataLakeClientOptions options Client options that define the transport pipeline policies for authentication, retries, etc., that are applied to every request. ILogger logger Optional ILogger. View Source StorageLake(Uri, StorageSharedKeyCredential, DataLakeClientOptions, ILogger) Creates an instance of StorageLake. Declaration public StorageLake(Uri serviceUri, StorageSharedKeyCredential credential, DataLakeClientOptions options, ILogger logger = null) Parameters Type Name Description Uri serviceUri A Uri referencing the Data Lake service StorageSharedKeyCredential credential The shared key credential used to sign requests. DataLakeClientOptions options Client options that define the transport pipeline policies for authentication, retries, etc., that are applied to every request. ILogger logger Optional ILogger. View Source StorageLake(Uri, StorageSharedKeyCredential, ILogger) Creates an instance of StorageLake. Declaration public StorageLake(Uri serviceUri, StorageSharedKeyCredential credential, ILogger logger = null) Parameters Type Name Description Uri serviceUri A Uri referencing the Data Lake service StorageSharedKeyCredential credential The shared key credential used to sign requests. ILogger logger Optional ILogger. View Source StorageLake(Uri, ILogger) Creates an instance of StorageLake. Declaration public StorageLake(Uri serviceUri, ILogger logger = null) Parameters Type Name Description Uri serviceUri A Uri referencing the Data Lake service ILogger logger Optional ILogger. Methods View Source CreateDirectoryAsync(String, String, PathHttpHeaders, IDictionary<String, String>, String, String, DataLakeRequestConditions, CancellationToken) Creates a directory within an existing file system. Declaration public async Task CreateDirectoryAsync(string fileSystemName, string path, PathHttpHeaders httpHeaders = null, IDictionary<string, string> metadata = null, string permissions = null, string unmask = null, DataLakeRequestConditions conditions = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String fileSystemName Name of file system where the directory will be created. String path Path to directory to create. PathHttpHeaders httpHeaders Optional standard HTTP header properties that can be set for the new file or directory.. IDictionary < String , String > metadata Optional custom metadata to set for this file or directory. String permissions Optional and only valid if Hierarchical Namespace is enabled for the account. Sets POSIX access permissions for the file owner, the file owning group, and others. Each class may be granted read, write, or execute permission. The sticky bit is also supported. Both symbolic (rwxrw-rw-) and 4-digit octal notation (e.g. 0766) are supported. String unmask Optional and only valid if Hierarchical Namespace is enabled for the account. When creating a file or directory and the parent folder does not have a default ACL, the umask restricts the permissions of the file or directory to be created. The resulting permission is given by p bitwise-and ^u, where p is the permission and u is the umask. For example, if p is 0777 and u is 0057, then the resulting permission is 0720. The default permission is 0777 for a directory and 0666 for a file. The default umask is 0027. The umask must be specified in 4-digit octal notation (e.g. 0766). DataLakeRequestConditions conditions Optional DataLakeRequestConditions to add conditions on the creation of this file or directory. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task Task View Source CreateFileSystemAsync(String, PublicAccessType, IDictionary<String, String>, CancellationToken) Creates a new file system in data lake. Declaration public async Task CreateFileSystemAsync(string fileSystemName, PublicAccessType publicAccess = PublicAccessType.None, IDictionary<string, string> metadata = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String fileSystemName Name of file system to create. PublicAccessType publicAccess Optionally specifies whether data in the file system may be accessed publicly and the level of access; defualt in \"None\", i.e., no public access. IDictionary < String , String > metadata Optional file system metadata. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task View Source DeleteDirectoryAsync(String, String, DataLakeRequestConditions, CancellationToken) Deletes a directory from a file system. Declaration public async Task DeleteDirectoryAsync(string fileSystemName, string path, DataLakeRequestConditions conditions = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String fileSystemName Name of file system that contains the directory to delete. String path Path to the directory. DataLakeRequestConditions conditions Optional DataLakeRequestConditions to add conditions on the creation of this file or directory. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task Task View Source DeleteFileAsync(String, String, String, CancellationToken) Deletes a file from data lake. Declaration public async Task<bool> DeleteFileAsync(string fileSystemName, string directoryName, string filename, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String fileSystemName Name of file system. String directoryName Name of directory in file system. String filename Name of file to delete. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < Boolean > True if file is deleted; otherwise false. View Source DeleteFileSystemAsnyc(String, DataLakeRequestConditions, CancellationToken) Deletes an existing file system. Declaration public async Task DeleteFileSystemAsnyc(string fileSystemName, DataLakeRequestConditions conditions = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String fileSystemName Name of file system to delete. DataLakeRequestConditions conditions Optional DataLakeRequestConditions to add conditions on the deletion of this file system. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task Task View Source DirectoryExistsAsync(String, String) Indicates whether a directory exists within a file system. Declaration public async Task<bool> DirectoryExistsAsync(string fileSystemName, string path) Parameters Type Name Description String fileSystemName Name of file system to check. String path Path to directory to check. Returns Type Description Task < Boolean > True if directory exists; otherwise false. View Source FileSystemExistsAsync(String) Indicates whether a file system exists. Declaration public async Task<bool> FileSystemExistsAsync(string fileSystemName) Parameters Type Name Description String fileSystemName Name of file system to check for existence. Returns Type Description Task < Boolean > True if file system exists; otherwise false. View Source ReadFileAsync(String, String, String, DataLakeOpenReadOptions, CancellationToken) Reads a file from data lake storage. Declaration public async Task<byte[]> ReadFileAsync(string fileSystemName, string directoryName, string filename, DataLakeOpenReadOptions options = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String fileSystemName Name of file system. String directoryName Name of directory in file system as the destination read. String filename Name of file to read. DataLakeOpenReadOptions options Data lake read options. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < Byte []> Array of byte of the content of the file read. View Source UploadFileAsync(String, String, String, Boolean, Stream, CancellationToken) Uploads content to a file in data lake. Declaration public async Task UploadFileAsync(string fileSystemName, string directoryName, string filename, bool overwrite, Stream content, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String fileSystemName Name of file system. String directoryName Name of directory in file system to write. String filename Name of file to write. Boolean overwrite Indicators whether the file should be overwritten if exists. Stream content File content as stream. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task Task View Source UploadFileAsync(String, String, String, Stream, DataLakeFileUploadOptions, CancellationToken) Uploads a local file to data lake storage. Declaration public async Task UploadFileAsync(string fileSystemName, string directoryName, string filename, Stream content, DataLakeFileUploadOptions options, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String fileSystemName Name of file system. String directoryName Name of directory in file system as destination for upload. String filename File name to create in the directory for the upload. Stream content Content stream to upload. DataLakeFileUploadOptions options DataLake file upload options CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task Task View Source WriteFileAsync(String, String, String, Byte[], DataLakeFileOpenWriteOptions, CancellationToken) Uploads a local file to data lake storage. Declaration public async Task WriteFileAsync(string fileSystemName, string directoryName, string filename, byte[] content, DataLakeFileOpenWriteOptions options = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String fileSystemName Name of file system. String directoryName Name of directory in file system as destination for upload. String filename File name to create in the directory for the upload. Byte [] content Content array of bytes to upload. DataLakeFileOpenWriteOptions options DataLake file open write options. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task Task"
  },
  "reference/Microsoft.Health.Fhir.Proxy.Storage.StorageQueue.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Storage.StorageQueue.html",
    "title": "Class StorageQueue | Title",
    "keywords": "Class StorageQueue Allows simple access to Azure storage queues. Inheritance Object StorageQueue Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Microsoft.Health.Fhir.Proxy.Storage Assembly : Microsoft.Health.Fhir.Proxy.Storage.dll Syntax public class StorageQueue Constructors View Source StorageQueue(ILogger) Declaration protected StorageQueue(ILogger logger = null) Parameters Type Name Description ILogger logger View Source StorageQueue(String, QueueClientOptions, ILogger) Creates an instance of StorageQueue. Declaration public StorageQueue(string connectionString, QueueClientOptions options = null, ILogger logger = null) Parameters Type Name Description String connectionString A connection string includes the authentication information required for your application to access data in an Azure Storage account at runtime. QueueClientOptions options Optional client options that define the transport pipeline policies for authentication, retries, etc., that are applied to every request. ILogger logger Optional ILogger. View Source StorageQueue(String, ILogger) Creates an instance of StorageQueue. Declaration public StorageQueue(string connectionString, ILogger logger = null) Parameters Type Name Description String connectionString A connection string includes the authentication information required for your application to access data in an Azure Storage account at runtime. ILogger logger Optional ILogger. View Source StorageQueue(Uri, AzureSasCredential, QueueClientOptions, ILogger) Creates an instance of StorageQueue. Declaration public StorageQueue(Uri serviceUri, AzureSasCredential credential, QueueClientOptions options = null, ILogger logger = null) Parameters Type Name Description Uri serviceUri A Uri referencing the queue service. AzureSasCredential credential The shared access signature credential used to sign requests. QueueClientOptions options Optional client options that define the transport pipeline policies for authentication, retries, etc., that are applied to every request. ILogger logger Optional ILogger. View Source StorageQueue(Uri, TokenCredential, QueueClientOptions, ILogger) Creates an instance of StorageQueue. Declaration public StorageQueue(Uri serviceUri, TokenCredential credential, QueueClientOptions options = null, ILogger logger = null) Parameters Type Name Description Uri serviceUri A Uri referencing the queue service. TokenCredential credential The token credential used to sign requests. QueueClientOptions options Optional client options that define the transport pipeline policies for authentication, retries, etc., that are applied to every request. ILogger logger Optional ILogger. View Source StorageQueue(Uri, QueueClientOptions, ILogger) Creates an instance of StorageQueue. Declaration public StorageQueue(Uri serviceUri, QueueClientOptions options = null, ILogger logger = null) Parameters Type Name Description Uri serviceUri A Uri referencing the queue service. QueueClientOptions options Optional client options that define the transport pipeline policies for authentication, retries, etc., that are applied to every request. ILogger logger Optional ILogger. View Source StorageQueue(Uri, StorageSharedKeyCredential, QueueClientOptions, ILogger) Creates an instance of StorageQueue. Declaration public StorageQueue(Uri serviceUri, StorageSharedKeyCredential credential, QueueClientOptions options = null, ILogger logger = null) Parameters Type Name Description Uri serviceUri A Uri referencing the queue service. StorageSharedKeyCredential credential The shared key credential used to sign requests. QueueClientOptions options Optional client options that define the transport pipeline policies for authentication, retries, etc., that are applied to every request. ILogger logger Optional ILogger. Methods View Source ClearMessagesAsync(String, CancellationToken) Clears messages from a queue. Declaration public async Task ClearMessagesAsync(string queueName, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String queueName Name of queue to clear messages. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task Task View Source CreateQueueIfNotExistsAsync(String, IDictionary<String, String>, CancellationToken) Creates queue if it not does already exist. Declaration public async Task<bool> CreateQueueIfNotExistsAsync(string queueName, IDictionary<string, string> metadata = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String queueName Nmme of queue to create. IDictionary < String , String > metadata Optional queue metadata. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < Boolean > True if queue created or exists; otherwise false. View Source DeleteQueueIfExistsAsync(String, CancellationToken) Deletes a queue if it exists. Declaration public async Task<bool> DeleteQueueIfExistsAsync(string queueName, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String queueName Name of queue to delete. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < Boolean > True if queue deleted or not exists; otherwise false. View Source DequeueAsync(String, Nullable<TimeSpan>, CancellationToken) Dequeues a message from a queue. Declaration public async Task<QueueMessage> DequeueAsync(string queueName, TimeSpan? visibilityTimeout, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String queueName Name of queue to dequeue message. Nullable < TimeSpan > visibilityTimeout Visibility timeout. Optional with a default value of 0. Cannot be larger than 7 days. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < QueueMessage > QueueMessage View Source DequeueBatchAsync(String, Nullable<Int32>, Nullable<TimeSpan>, CancellationToken) Dequeues a batch of message from a queue. Declaration public async Task<QueueMessage[]> DequeueBatchAsync(string queueName, int? maxMessages, TimeSpan? visibilityTimeout, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String queueName Name of queue to dequeue message. Nullable < Int32 > maxMessages Maximum number of messages to dequeue in batch. Nullable < TimeSpan > visibilityTimeout Visibility timeout. Optional with a default value of 0. Cannot be larger than 7 days. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < QueueMessage []> View Source EnqueueAsync(String, Byte[], Nullable<TimeSpan>, Nullable<TimeSpan>, CancellationToken) Enqueues a message into a queue. Declaration public async Task<SendReceipt> EnqueueAsync(string queueName, byte[] message, TimeSpan? visibilityTimeout, TimeSpan? ttl, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String queueName Name of queue to enqueue message. Byte [] message Message to enqueue. Nullable < TimeSpan > visibilityTimeout Visibility timeout. Optional with a default value of 0. Cannot be larger than 7 days. Nullable < TimeSpan > ttl Optional. Specifies the time-to-live interval for the message. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < SendReceipt > SendReceipt View Source EnqueueAsync(String, String, Nullable<TimeSpan>, Nullable<TimeSpan>, CancellationToken) Enqueues a message into a queue. Declaration public async Task<SendReceipt> EnqueueAsync(string queueName, string message, TimeSpan? visibilityTimeout, TimeSpan? ttl, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String queueName Name of queue to enqueue message. String message Message to enqueue. Nullable < TimeSpan > visibilityTimeout Visibility timeout. Optional with a default value of 0. Cannot be larger than 7 days. Nullable < TimeSpan > ttl Optional. Specifies the time-to-live interval for the message. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < SendReceipt > SendReceipt View Source ListQueuesAync(QueueTraits, String, CancellationToken) Gets a list of queue names. Declaration public async Task<List<string>> ListQueuesAync(QueueTraits traits = QueueTraits.None, string prefix = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description QueueTraits traits Optional trait options for shaping the queues; default is \"None\". String prefix Optional string that filters the results to return only queues whose name begins with the specified prefix. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < List < String >> Queue names as list of string. View Source PeekMessageAsync(String, CancellationToken) Peeks a message from a queue. Declaration public async Task<PeekedMessage> PeekMessageAsync(string queueName, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String queueName Name of queue to peek message. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < PeekedMessage > PeekedMessage View Source PeekMessagesAsync(String, Nullable<Int32>, CancellationToken) Peeks a batch of messages from a queue. Declaration public async Task<PeekedMessage[]> PeekMessagesAsync(string queueName, int? maxMessages, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String queueName Name of queue to peek a batch of messages. Nullable < Int32 > maxMessages Maximum number of messages to peek in queue. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < PeekedMessage []> Array of PeekedMessage."
  },
  "reference/Microsoft.Health.Fhir.Proxy.Storage.StorageTable.html": {
    "href": "reference/Microsoft.Health.Fhir.Proxy.Storage.StorageTable.html",
    "title": "Class StorageTable | Title",
    "keywords": "Class StorageTable Allows simple access to Azure storage tables. Inheritance Object StorageTable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Microsoft.Health.Fhir.Proxy.Storage Assembly : Microsoft.Health.Fhir.Proxy.Storage.dll Syntax public class StorageTable Constructors View Source StorageTable(StorageUri, StorageCredentials, TableClientConfiguration, ILogger) Creates an instance of StorageTable. Declaration public StorageTable(StorageUri storageUri, StorageCredentials credentials, TableClientConfiguration config = null, ILogger logger = null) Parameters Type Name Description StorageUri storageUri A StorageUri object containing the Table service endpoint to use to create the client. StorageCredentials credentials A StorageCredentials object. TableClientConfiguration config The configuration for the table client. If none is passed, the default is used depending on service type. ILogger logger Optional ILogger. View Source StorageTable(StorageUri, StorageCredentials, ILogger) Creates an instance of StorageTable. Declaration public StorageTable(StorageUri storageUri, StorageCredentials credentials, ILogger logger = null) Parameters Type Name Description StorageUri storageUri A StorageUri object containing the Table service endpoint to use to create the client. StorageCredentials credentials A StorageCredentials object. ILogger logger Optional ILogger. View Source StorageTable(ILogger) Declaration protected StorageTable(ILogger logger = null) Parameters Type Name Description ILogger logger View Source StorageTable(String, TableClientConfiguration, ILogger) Creates an instance of StorageTable. Declaration public StorageTable(string connectionString, TableClientConfiguration config = null, ILogger logger = null) Parameters Type Name Description String connectionString A connection string includes the authentication information required for your application to access data in an Azure Storage account at runtime. TableClientConfiguration config The configuration for the table client. If none is passed, the default is used depending on service type. ILogger logger Optional ILogger. View Source StorageTable(String, ILogger) Creates an instance of StorageTable. Declaration public StorageTable(string connectionString, ILogger logger = null) Parameters Type Name Description String connectionString A connection string includes the authentication information required for your application to access data in an Azure Storage account at runtime. ILogger logger Optional ILogger. View Source StorageTable(Uri, StorageCredentials, TableClientConfiguration, ILogger) Creates an instance of StorageTable. Declaration public StorageTable(Uri baseUri, StorageCredentials credentials, TableClientConfiguration config = null, ILogger logger = null) Parameters Type Name Description Uri baseUri A Uri object containing the Table service endpoint to use to create the client. StorageCredentials credentials A StorageCredentials object. TableClientConfiguration config The configuration for the table client. If none is passed, the default is used depending on service type. ILogger logger Optional ILogger. Methods View Source CreateTableIsNotExistsAsync(String, CancellationToken) Creates a table if it does not already exist. Declaration public async Task<bool> CreateTableIsNotExistsAsync(string tableName, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String tableName Name of table to create. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < Boolean > True if table created or exists; otherwise false. View Source DeleteEntityAsync(String, TableEntity, CancellationToken) Creates a new table operation that deletes the given entity from a table. Declaration public async Task<TableResult> DeleteEntityAsync(string tableName, TableEntity entity, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String tableName Name of table. TableEntity entity Entity to delete. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < TableResult > TableResult View Source DeleteTableIfExistsAsync(String, CancellationToken) Deletes a table if already exists. Declaration public async Task<bool> DeleteTableIfExistsAsync(string tableName, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String tableName Name of table to delete. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < Boolean > True if table deleted or not exists; otherwise false. View Source InsertEntityAsync(String, TableEntity, CancellationToken) Inserts a new entity into a table. Declaration public async Task<TableResult> InsertEntityAsync(string tableName, TableEntity entity, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String tableName Name of table to insert entity. TableEntity entity Entity to insert. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < TableResult > TableResult View Source InsertOrMergeEntityAsync(String, TableEntity, CancellationToken) Creates a new table operation that inserts the given entity into a table if the entity does not exist; if the entity does exist then its contents are merged with the provided entity. Declaration public async Task<TableResult> InsertOrMergeEntityAsync(string tableName, TableEntity entity, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String tableName Name of table. TableEntity entity Entity to insert or merge. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < TableResult > TableResult View Source InsertOrReplaceEntityAsync(String, TableEntity, CancellationToken) Creates a new table operation that inserts the given entity into a table if the entity does not exist; if the entity does exist then its contents are replaced with the provided entity. Declaration public async Task<TableResult> InsertOrReplaceEntityAsync(string tableName, TableEntity entity, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String tableName Name of table. TableEntity entity Entity to insert or replace. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < TableResult > TableResult View Source ListTables() Declaration public IEnumerable<CloudTable> ListTables() Returns Type Description IEnumerable < CloudTable > View Source ListTablesAsync(String, Nullable<Int32>, TableContinuationToken, CancellationToken) Gets a list of pageable table in table storage. Declaration public async Task<TableResultSegment> ListTablesAsync(string prefix = null, int? maxResults = null, TableContinuationToken token = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String prefix A string containing the table name prefix. Nullable < Int32 > maxResults A non-negative integer value that indicates the maximum number of results to be returned at a time, up to the per-operation limit of 5000. If this value is null, the maximum possible number of results will be returned, up to 5000. TableContinuationToken token A TableContinuationToken returned by a previous listing operation. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < TableResultSegment > TableResultSegment View Source MergeEntityAsync(String, TableEntity, CancellationToken) Creates a new table operation that merges the contents of the given entity with the existing entity in a table. Declaration public async Task<TableResult> MergeEntityAsync(string tableName, TableEntity entity, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String tableName Name of table. TableEntity entity Entity to merage. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < TableResult > TableResult View Source QueryTableAsync<T>(String, TableQuery<T>, TableContinuationToken, CancellationToken) Declaration public async Task<TableQuerySegment<T>> QueryTableAsync<T>(string tableName, TableQuery<T> query, TableContinuationToken token = null, CancellationToken cancellationToken = default(CancellationToken)) where T : ITableEntity, new() Parameters Type Name Description String tableName TableQuery <T> query TableContinuationToken token CancellationToken cancellationToken Returns Type Description Task < TableQuerySegment <T>> Type Parameters Name Description T View Source QueryTableAsync<T>(String, String, String, TableContinuationToken, CancellationToken) Declaration public async Task<TableQuerySegment<T>> QueryTableAsync<T>(string tableName, string partitionKey = null, string rowKey = null, TableContinuationToken token = null, CancellationToken cancellationToken = default(CancellationToken)) where T : ITableEntity, new() Parameters Type Name Description String tableName String partitionKey String rowKey TableContinuationToken token CancellationToken cancellationToken Returns Type Description Task < TableQuerySegment <T>> Type Parameters Name Description T View Source ReplaceEntityAsync(String, TableEntity, CancellationToken) Creates a new table operation that replaces the contents of the given entity in a table. Declaration public async Task<TableResult> ReplaceEntityAsync(string tableName, TableEntity entity, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String tableName Name of table. TableEntity entity Entity that will replace the current entity. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < TableResult > TableResult View Source RetrieveEntity<T>(String, String, String, EntityResolver<T>, List<String>, CancellationToken) Declaration public async Task<TableResult> RetrieveEntity<T>(string tableName, string partitionKey, string rowKey, EntityResolver<T> resolver, List<string> columns = null, CancellationToken cancellationToken = default(CancellationToken)) where T : ITableEntity, new() Parameters Type Name Description String tableName String partitionKey String rowKey EntityResolver <T> resolver List < String > columns CancellationToken cancellationToken Returns Type Description Task < TableResult > Type Parameters Name Description T View Source RetrieveEntityAsync(String, String, String, List<String>, CancellationToken) Creates a new table operation that retrieves the contents of the given entity in a table. Declaration public async Task<TableResult> RetrieveEntityAsync(string tableName, string partitionKey, string rowKey, List<string> columns = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String tableName Name of table. String partitionKey A string containing the partition key of the entity to retrieve. String rowKey A string containing the row key of the entity to retrieve. List < String > columns Optional list of column names for projection. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < TableResult > TableResult"
  }
}