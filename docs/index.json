{
  "CODE_OF_CONDUCT.html": {
    "href": "CODE_OF_CONDUCT.html",
    "title": "Microsoft Open Source Code of Conduct | Title",
    "keywords": "Microsoft Open Source Code of Conduct This project has adopted the Microsoft Open Source Code of Conduct . Resources: Microsoft Open Source Code of Conduct Microsoft Code of Conduct FAQ Contact opencode@microsoft.com with questions or concerns"
  },
  "README.html": {
    "href": "README.html",
    "title": "Overview | Title",
    "keywords": "Overview The Microsoft Health Data Services SDK is intended to be used to build solutions with Azure Healthcare APIs where FHIR requests and/or responses need to be intercepted in transit. The SDK provides the building blocks for these custom operations as well as integration with other services. We have also provided a prescriptive architecture for deployment Azure Healthcare APIs and integration with other services, such that you can reliably create secure and scalable solutions. You can find documentation of the API here , and sample code here . NuGet Packages Microsoft.Health.Fhir.Proxy Microsoft.Health.Fhir.Proxy.Extensions.Channels Microsoft.Health.Fhir.Proxy.Storage Microsoft.Health.Fhir.Proxy.Caching Pipelines Pipelines are used to build the custom operation and can be used to (i) modify information, (ii) acquire additional information to make decisions, and (iii) output information to our services. The first two are performed through a chain of 0 or more filters where each filter in the chain performs some operation. The latter is performed through channels , which simply output information 0 or more desired services. Input and output pipelines are connected through a binding, which either (i) call the FHIR server and returns the response to the output pipeline (RestBinding), or (ii) is omitted and directly calls the output pipeline if present or returns the result of the input pipleine. Pipeline Pipeline Management Infrastructure Architecture The infrastructure makes use of Azure Application Gatway, Azure API Management (APIM), a private Virtual Network, and private endpoints. We use APIM to route specific request to custom operations and all others route directly to the FHIR server. Contributing This project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.opensource.microsoft.com . When you submit a pull request, a CLA bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA. This project has adopted the Microsoft Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments. Trademarks This project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft trademarks or logos is subject to and must follow Microsoft's Trademark & Brand Guidelines . Use of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship. Any use of third-party trademarks or logos are subject to those third-party's policies."
  },
  "reference/DataServices.Bindings.BindingCompleteEventArgs.html": {
    "href": "reference/DataServices.Bindings.BindingCompleteEventArgs.html",
    "title": "Class BindingCompleteEventArgs | Title",
    "keywords": "Class BindingCompleteEventArgs Event args for binding complete. Inheritance Object EventArgs BindingCompleteEventArgs Inherited Members EventArgs.Empty Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Bindings Assembly : DataServices.dll Syntax public class BindingCompleteEventArgs : EventArgs Constructors View Source BindingCompleteEventArgs(String, String, OperationContext) Creates an instance of BindingCompleteEventArgs. Declaration public BindingCompleteEventArgs(string id, string name, OperationContext context) Parameters Type Name Description String id Instance ID of the binding. String name Name of binding. OperationContext context OperationContext Properties View Source Context Gets the OperationContext. Declaration public OperationContext Context { get; } Property Value Type Description OperationContext View Source Id Gets the instance ID of the binding. Declaration public string Id { get; } Property Value Type Description String View Source Name Gets the name of the binding. Declaration public string Name { get; } Property Value Type Description String"
  },
  "reference/DataServices.Bindings.BindingErrorEventArgs.html": {
    "href": "reference/DataServices.Bindings.BindingErrorEventArgs.html",
    "title": "Class BindingErrorEventArgs | Title",
    "keywords": "Class BindingErrorEventArgs Event args for binding error events. Inheritance Object EventArgs BindingErrorEventArgs Inherited Members EventArgs.Empty Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Bindings Assembly : DataServices.dll Syntax public class BindingErrorEventArgs : EventArgs Constructors View Source BindingErrorEventArgs(String, String, Exception) Creates an instance of BindingErrorEventArgs. Declaration public BindingErrorEventArgs(string id, string name, Exception error) Parameters Type Name Description String id Instance ID of the binding. String name Name of the binding. Exception error Exception thrown in the binding. Properties View Source Error Exception throw in the binding. Declaration public Exception Error { get; } Property Value Type Description Exception View Source Id Gets the instance ID of the binding. Declaration public string Id { get; } Property Value Type Description String View Source Name Gets the name of the binding. Declaration public string Name { get; } Property Value Type Description String"
  },
  "reference/DataServices.Bindings.html": {
    "href": "reference/DataServices.Bindings.html",
    "title": "Namespace DataServices.Bindings | Title",
    "keywords": "Namespace DataServices.Bindings Classes BindingCompleteEventArgs Event args for binding complete. BindingErrorEventArgs Event args for binding error events. RestBinding A binding used to call the server and couples input/output pipelines or acts as terminator for an input pipeline. RestBindingOptions Options for REST binding. Interfaces IBinding Interface to be implemented by a Binding."
  },
  "reference/DataServices.Bindings.IBinding.html": {
    "href": "reference/DataServices.Bindings.IBinding.html",
    "title": "Interface IBinding | Title",
    "keywords": "Interface IBinding Interface to be implemented by a Binding. Namespace : DataServices.Bindings Assembly : DataServices.dll Syntax public interface IBinding Properties View Source Id Gets the unique id on the binding instance. Declaration string Id { get; } Property Value Type Description String View Source Name Gets the name of the binding. Declaration string Name { get; } Property Value Type Description String Methods View Source ExecuteAsync(OperationContext) Executes binding. Declaration Task<OperationContext> ExecuteAsync(OperationContext context) Parameters Type Name Description OperationContext context Operation context. Returns Type Description Task < OperationContext > Operation context. Events View Source OnComplete An event that signals an error in the binding. Declaration event EventHandler<BindingCompleteEventArgs> OnComplete Event Type Type Description EventHandler < BindingCompleteEventArgs > View Source OnError An event that signals an error in the binding. Declaration event EventHandler<BindingErrorEventArgs> OnError Event Type Type Description EventHandler < BindingErrorEventArgs >"
  },
  "reference/DataServices.Bindings.RestBinding.html": {
    "href": "reference/DataServices.Bindings.RestBinding.html",
    "title": "Class RestBinding | Title",
    "keywords": "Class RestBinding A binding used to call the server and couples input/output pipelines or acts as terminator for an input pipeline. Inheritance Object RestBinding Implements IBinding Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Bindings Assembly : DataServices.dll Syntax public class RestBinding : IBinding Constructors View Source RestBinding(IOptions<RestBindingOptions>, IAuthenticator, IHttpCustomHeaderCollection, ILogger<RestBinding>) Creates an instance of RestBinding. Declaration public RestBinding(IOptions<RestBindingOptions> options, IAuthenticator authenticator = null, IHttpCustomHeaderCollection customHeaders = null, ILogger<RestBinding> logger = null) Parameters Type Name Description IOptions < RestBindingOptions > options Rest binding options. IAuthenticator authenticator Optional authenticator to acquire security token. IHttpCustomHeaderCollection customHeaders Optional custom headers. ILogger < RestBinding > logger Optional logger. Properties View Source Id Gets a unique ID of the binding instance. Declaration public string Id { get; } Property Value Type Description String View Source Name Gets the name of the binding \"RestBinding\". Declaration public string Name { get; } Property Value Type Description String Methods View Source ExecuteAsync(OperationContext) Executes the binding. Declaration public async Task<OperationContext> ExecuteAsync(OperationContext context) Parameters Type Name Description OperationContext context Operation context. Returns Type Description Task < OperationContext > Operation context. Events View Source OnComplete An event that signals the binding has completed. Declaration public event EventHandler<BindingCompleteEventArgs> OnComplete Event Type Type Description EventHandler < BindingCompleteEventArgs > View Source OnError An event that signals an error in the binding. Declaration public event EventHandler<BindingErrorEventArgs> OnError Event Type Type Description EventHandler < BindingErrorEventArgs > Implements IBinding"
  },
  "reference/DataServices.Bindings.RestBindingOptions.html": {
    "href": "reference/DataServices.Bindings.RestBindingOptions.html",
    "title": "Class RestBindingOptions | Title",
    "keywords": "Class RestBindingOptions Options for REST binding. Inheritance Object RestBindingOptions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Bindings Assembly : DataServices.dll Syntax public class RestBindingOptions Properties View Source Scopes Gets or sets the scopes required to call the server. This is purely optional and used with non-default scopes are required. Declaration public string[] Scopes { get; set; } Property Value Type Description String [] View Source ServerUrl Gets or sets the server URL to call. Declaration public string ServerUrl { get; set; } Property Value Type Description String"
  },
  "reference/DataServices.Caching.Extensions.html": {
    "href": "reference/DataServices.Caching.Extensions.html",
    "title": "Class Extensions | Title",
    "keywords": "Class Extensions Inheritance Object Extensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Caching Assembly : DataServices.Caching.dll Syntax public static class Extensions Methods View Source AddAzureBlobCacheBackingStore(IServiceCollection, Action<AzureBlobStorageCacheOptions>) Declaration public static IServiceCollection AddAzureBlobCacheBackingStore(this IServiceCollection services, Action<AzureBlobStorageCacheOptions> options) Parameters Type Name Description IServiceCollection services Action < AzureBlobStorageCacheOptions > options Returns Type Description IServiceCollection View Source AddJsonObjectMemoryCache(IServiceCollection, Action<JsonCacheOptions>) Declaration public static IServiceCollection AddJsonObjectMemoryCache(this IServiceCollection services, Action<JsonCacheOptions> options) Parameters Type Name Description IServiceCollection services Action < JsonCacheOptions > options Returns Type Description IServiceCollection View Source AddRedisCacheBackingStore(IServiceCollection, Action<RedisCacheOptions>) Declaration public static IServiceCollection AddRedisCacheBackingStore(this IServiceCollection services, Action<RedisCacheOptions> options) Parameters Type Name Description IServiceCollection services Action < RedisCacheOptions > options Returns Type Description IServiceCollection"
  },
  "reference/DataServices.Caching.html": {
    "href": "reference/DataServices.Caching.html",
    "title": "Namespace DataServices.Caching | Title",
    "keywords": "Namespace DataServices.Caching Classes Extensions JsonCacheOptions Json cache options for IMemoryCache. JsonObjectCache In-memory cache with persistent backing store for JSON objects. Interfaces IJsonObjectCache namespace DataServices.Caching Interface for JSON enabled cache."
  },
  "reference/DataServices.Caching.IJsonObjectCache.html": {
    "href": "reference/DataServices.Caching.IJsonObjectCache.html",
    "title": "Interface IJsonObjectCache | Title",
    "keywords": "Interface IJsonObjectCache namespace DataServices.Caching Interface for JSON enabled cache. Namespace : DataServices.Caching Assembly : DataServices.Caching.dll Syntax public interface IJsonObjectCache Methods View Source AddAsync(String, Object) Adds an object to the cache. Declaration Task AddAsync(string key, object value) Parameters Type Name Description String key Cache key. Object value Item to cache. Returns Type Description Task Task. View Source AddAsync<T>(String, T) Adds an object to the cache. Declaration Task AddAsync<T>(string key, T value) Parameters Type Name Description String key Cache key. T value Item to cache. Returns Type Description Task Task. Type Parameters Name Description T Type of object. View Source GetAsync(String) Gets an object from the cache. Declaration Task<string> GetAsync(string key) Parameters Type Name Description String key Cache key. Returns Type Description Task < String > Cached object as a json string. View Source GetAsync<T>(String) Gets an item from the cache. Declaration Task<T> GetAsync<T>(string key) Parameters Type Name Description String key Cache key. Returns Type Description Task <T> Type Parameters Name Description T Type of item to return from cache. View Source RemoveAsync(String) Removes an item from the cache. Declaration Task<bool> RemoveAsync(string key) Parameters Type Name Description String key Cache key. Returns Type Description Task < Boolean > True if removed otherwise false."
  },
  "reference/DataServices.Caching.JsonCacheOptions.html": {
    "href": "reference/DataServices.Caching.JsonCacheOptions.html",
    "title": "Class JsonCacheOptions | Title",
    "keywords": "Class JsonCacheOptions Json cache options for IMemoryCache. Inheritance Object JsonCacheOptions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Caching Assembly : DataServices.Caching.dll Syntax public class JsonCacheOptions Properties View Source CacheItemExpiry Gets or sets the expiration time of a cached item. Declaration public TimeSpan CacheItemExpiry { get; set; } Property Value Type Description TimeSpan"
  },
  "reference/DataServices.Caching.JsonObjectCache.html": {
    "href": "reference/DataServices.Caching.JsonObjectCache.html",
    "title": "Class JsonObjectCache | Title",
    "keywords": "Class JsonObjectCache In-memory cache with persistent backing store for JSON objects. Inheritance Object JsonObjectCache Implements IJsonObjectCache Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Caching Assembly : DataServices.Caching.dll Syntax public class JsonObjectCache : IJsonObjectCache Constructors View Source JsonObjectCache(IOptions<JsonCacheOptions>, IMemoryCache, ICacheBackingStoreProvider, ILogger<JsonObjectCache>) Creates an instance of JsonObjectCache. Declaration public JsonObjectCache(IOptions<JsonCacheOptions> options, IMemoryCache cache, ICacheBackingStoreProvider provider, ILogger<JsonObjectCache> logger = null) Parameters Type Name Description IOptions < JsonCacheOptions > options Options for cache. IMemoryCache cache In-memory cache. ICacheBackingStoreProvider provider Cache persistence provider. ILogger < JsonObjectCache > logger ILogger Methods View Source AddAsync(String, Object) Adds an item to the cache. Declaration public async Task AddAsync(string key, object value) Parameters Type Name Description String key Cache key. Object value Item to add to cache. Returns Type Description Task Task. View Source AddAsync<T>(String, T) Adds an item to the cache. Declaration public async Task AddAsync<T>(string key, T value) Parameters Type Name Description String key Cache key. T value Item to add to cache. Returns Type Description Task Task. Type Parameters Name Description T Type of item to add. View Source GetAsync(String) Gets an item from the cache. Declaration public async Task<string> GetAsync(string key) Parameters Type Name Description String key Cache key. Returns Type Description Task < String > An item from cache otherwise null. View Source GetAsync<T>(String) Gets an item from the cache. Declaration public async Task<T> GetAsync<T>(string key) Parameters Type Name Description String key Cache key. Returns Type Description Task <T> Item from cache otherwise null. Type Parameters Name Description T Type of item to get from cache. View Source RemoveAsync(String) Removes an item from the cache and persistence provider. Declaration public async Task<bool> RemoveAsync(string key) Parameters Type Name Description String key Cache key. Returns Type Description Task < Boolean > True is remove otherwise false. Implements IJsonObjectCache"
  },
  "reference/DataServices.Caching.StorageProviders.AzureBlobStorageCacheOptions.html": {
    "href": "reference/DataServices.Caching.StorageProviders.AzureBlobStorageCacheOptions.html",
    "title": "Class AzureBlobStorageCacheOptions | Title",
    "keywords": "Class AzureBlobStorageCacheOptions Options for Azure Blob Storage cache backing store. Inheritance Object AzureBlobStorageCacheOptions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Caching.StorageProviders Assembly : DataServices.Caching.dll Syntax public class AzureBlobStorageCacheOptions Properties View Source BlobServiceEndpoint Gets or sets the Azure Blob service endpoint used when you choose to use MSI versus a connection string. Declaration public string BlobServiceEndpoint { get; set; } Property Value Type Description String View Source ConnectionString Gets or sets the Azure Blob Storage connection string. Declaration public string ConnectionString { get; set; } Property Value Type Description String View Source Container Gets or sets the Azure Blob Storage container for the data. Declaration public string Container { get; set; } Property Value Type Description String"
  },
  "reference/DataServices.Caching.StorageProviders.AzureJsonBlobStorageProvider.html": {
    "href": "reference/DataServices.Caching.StorageProviders.AzureJsonBlobStorageProvider.html",
    "title": "Class AzureJsonBlobStorageProvider | Title",
    "keywords": "Class AzureJsonBlobStorageProvider A cache provider for json objects that uses Azure Blob storage as a backing store. Inheritance Object AzureJsonBlobStorageProvider Implements ICacheBackingStoreProvider Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Caching.StorageProviders Assembly : DataServices.Caching.dll Syntax public class AzureJsonBlobStorageProvider : ICacheBackingStoreProvider Constructors View Source AzureJsonBlobStorageProvider(IOptions<AzureBlobStorageCacheOptions>) Creates an instance of AzureJsonBlobStorageProvider. Declaration public AzureJsonBlobStorageProvider(IOptions<AzureBlobStorageCacheOptions> options) Parameters Type Name Description IOptions < AzureBlobStorageCacheOptions > options Options for caching. Methods View Source AddAsync(String, Object) Adds an item to the cache. Declaration public async Task AddAsync(string key, object value) Parameters Type Name Description String key Cache key. Object value Item to add. Returns Type Description Task Task View Source AddAsync<T>(String, T) Adds an object to cache. Declaration public async Task AddAsync<T>(string key, T value) Parameters Type Name Description String key Cache key. T value Object to cache. Returns Type Description Task Task Type Parameters Name Description T Type of object to cache. View Source GetAsync(String) Gets an item from the cache as a JSON string. Declaration public async Task<string> GetAsync(string key) Parameters Type Name Description String key Cache key. Returns Type Description Task < String > Item from cache as a JSON string. View Source GetAsync<T>(String) Gets an object from cache. Declaration public async Task<T> GetAsync<T>(string key) Parameters Type Name Description String key Cache key. Returns Type Description Task <T> Object from cache. Type Parameters Name Description T Type of object to get from cache. View Source RemoveAsync(String) Removes an object from cache. Declaration public async Task<bool> RemoveAsync(string key) Parameters Type Name Description String key Cache key. Returns Type Description Task < Boolean > True if object remove otherwise false. Implements ICacheBackingStoreProvider"
  },
  "reference/DataServices.Caching.StorageProviders.html": {
    "href": "reference/DataServices.Caching.StorageProviders.html",
    "title": "Namespace DataServices.Caching.StorageProviders | Title",
    "keywords": "Namespace DataServices.Caching.StorageProviders Classes AzureBlobStorageCacheOptions Options for Azure Blob Storage cache backing store. AzureJsonBlobStorageProvider A cache provider for json objects that uses Azure Blob storage as a backing store. RedisCacheOptions Options for redis cache backing store. RedisJsonStorageProvider A cache provider for json objects that uses redis as a backing store. Interfaces ICacheBackingStoreProvider Interface implemented by cache provider."
  },
  "reference/DataServices.Caching.StorageProviders.ICacheBackingStoreProvider.html": {
    "href": "reference/DataServices.Caching.StorageProviders.ICacheBackingStoreProvider.html",
    "title": "Interface ICacheBackingStoreProvider | Title",
    "keywords": "Interface ICacheBackingStoreProvider Interface implemented by cache provider. Namespace : DataServices.Caching.StorageProviders Assembly : DataServices.Caching.dll Syntax public interface ICacheBackingStoreProvider Methods View Source AddAsync(String, Object) Declaration Task AddAsync(string key, object value) Parameters Type Name Description String key Object value Returns Type Description Task View Source AddAsync<T>(String, T) Adds an object to the cache. Declaration Task AddAsync<T>(string key, T value) Parameters Type Name Description String key Cache key. T value Object to cache. Returns Type Description Task Task Type Parameters Name Description T Type of object to cache. View Source GetAsync(String) Declaration Task<string> GetAsync(string key) Parameters Type Name Description String key Returns Type Description Task < String > View Source GetAsync<T>(String) Gets an object from the cache. Declaration Task<T> GetAsync<T>(string key) Parameters Type Name Description String key Cache key. Returns Type Description Task <T> Cached object. Type Parameters Name Description T Type of object to cache. View Source RemoveAsync(String) Removes and object from the cache. Declaration Task<bool> RemoveAsync(string key) Parameters Type Name Description String key Cache key. Returns Type Description Task < Boolean > True is removed otherwise false."
  },
  "reference/DataServices.Caching.StorageProviders.RedisCacheOptions.html": {
    "href": "reference/DataServices.Caching.StorageProviders.RedisCacheOptions.html",
    "title": "Class RedisCacheOptions | Title",
    "keywords": "Class RedisCacheOptions Options for redis cache backing store. Inheritance Object RedisCacheOptions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Caching.StorageProviders Assembly : DataServices.Caching.dll Syntax public class RedisCacheOptions Properties View Source ConnectionString Redis connection string Declaration public string ConnectionString { get; set; } Property Value Type Description String View Source InstanceName Optional instance name Declaration public string InstanceName { get; set; } Property Value Type Description String"
  },
  "reference/DataServices.Caching.StorageProviders.RedisJsonStorageProvider.html": {
    "href": "reference/DataServices.Caching.StorageProviders.RedisJsonStorageProvider.html",
    "title": "Class RedisJsonStorageProvider | Title",
    "keywords": "Class RedisJsonStorageProvider A cache provider for json objects that uses redis as a backing store. Inheritance Object RedisJsonStorageProvider Implements ICacheBackingStoreProvider Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Caching.StorageProviders Assembly : DataServices.Caching.dll Syntax public class RedisJsonStorageProvider : ICacheBackingStoreProvider Constructors View Source RedisJsonStorageProvider(IOptions<RedisCacheOptions>) Creates an instance of RedisJsonStorageProvider. Declaration public RedisJsonStorageProvider(IOptions<RedisCacheOptions> options) Parameters Type Name Description IOptions < RedisCacheOptions > options Redis cache options. Methods View Source AddAsync(String, Object) Adds a item to the cache. Declaration public async Task AddAsync(string key, object value) Parameters Type Name Description String key Cache key. Object value Item to add. Returns Type Description Task Task View Source AddAsync<T>(String, T) Adds an object to the cache. Declaration public async Task AddAsync<T>(string key, T value) Parameters Type Name Description String key Cache key. T value Object to cache. Returns Type Description Task Task Type Parameters Name Description T Type of object to cache. View Source GetAsync(String) Gets an item from the cache as a JSON string. Declaration public async Task<string> GetAsync(string key) Parameters Type Name Description String key Cache key. Returns Type Description Task < String > Item from cache as a JSON string. View Source GetAsync<T>(String) Gets an object from the cache. Declaration public async Task<T> GetAsync<T>(string key) Parameters Type Name Description String key Cache key. Returns Type Description Task <T> Object from cache. Type Parameters Name Description T Type of object to get from cache. View Source RemoveAsync(String) Removes an object from the cache. Declaration public async Task<bool> RemoveAsync(string key) Parameters Type Name Description String key Cache key. Returns Type Description Task < Boolean > True if object removed otherwise false. Implements ICacheBackingStoreProvider"
  },
  "reference/DataServices.Channels.BlobStorageChannel.html": {
    "href": "reference/DataServices.Channels.BlobStorageChannel.html",
    "title": "Class BlobStorageChannel | Title",
    "keywords": "Class BlobStorageChannel Channel that sends events to Azure blob storage. Inheritance Object BlobStorageChannel Implements IInputChannel IOutputChannel IChannel IDisposable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Channels Assembly : DataServices.Channels.dll Syntax public class BlobStorageChannel : IInputChannel, IOutputChannel, IChannel, IDisposable Constructors View Source BlobStorageChannel(IOptions<BlobStorageChannelOptions>, ILogger<BlobStorageChannel>) Creates and instance of BlobStorageChannel. Declaration public BlobStorageChannel(IOptions<BlobStorageChannelOptions> options, ILogger<BlobStorageChannel> logger = null) Parameters Type Name Description IOptions < BlobStorageChannelOptions > options Options for sending to blob storage. ILogger < BlobStorageChannel > logger ILogger Properties View Source ExecutionStatusType Gets the requirement for executing the channel. Declaration public StatusType ExecutionStatusType { get; } Property Value Type Description StatusType View Source Id Gets the instance ID of the channel. Declaration public string Id { get; } Property Value Type Description String View Source IsAuthenticated Gets and indicator to whether the channel has authenticated the user, which by default always false. Declaration public bool IsAuthenticated { get; } Property Value Type Description Boolean View Source IsEncrypted Indicates whether the channel is encrypted, which is always true. Declaration public bool IsEncrypted { get; } Property Value Type Description Boolean View Source Name Gets the name of the channel, i.e., \"BlobStorageChannel\". Declaration public string Name { get; } Property Value Type Description String View Source Port Gets the port used, which by default always 0. Declaration public int Port { get; } Property Value Type Description Int32 View Source State Gets or sets the channel state. Declaration public ChannelState State { get; set; } Property Value Type Description ChannelState Methods View Source AddMessageAsync(Byte[]) Add a message to the channel which is surface by the OnReceive event. Declaration public async Task AddMessageAsync(byte[] message) Parameters Type Name Description Byte [] message Message to add. Returns Type Description Task Task View Source CloseAsync() Closes the channel. Declaration public async Task CloseAsync() Returns Type Description Task Task View Source Dispose() Disposes the channel. Declaration public void Dispose() View Source Dispose(Boolean) Declaration protected void Dispose(bool disposing) Parameters Type Name Description Boolean disposing View Source OpenAsync() Opens the channel. Declaration public async Task OpenAsync() Returns Type Description Task Task View Source ReceiveAsync() Starts the recieve operation for the channel. Declaration public async Task ReceiveAsync() Returns Type Description Task Task Remarks Receive operation is omitted without error for BlobStorageChannel. View Source SendAsync(Byte[], Object[]) Send a message to the channel and uploads a blob. Declaration public async Task SendAsync(byte[] message, params object[] items) Parameters Type Name Description Byte [] message Message to send. Object [] items Additional optional parameters. Returns Type Description Task Task Remarks The params object must be in the following order string content type if omitted the default is json. string blob name if omitted a random name is used with json extension. string container name if omitted default is container from BlobConfig Blob Type; if omitted the default is Block. IDictionary<string,string> metadata, which can be null to omit. AccessTier tier, which can be null to use default. BlobRequestConditions conditions, which can be null to omit. CancellationToken Events View Source OnClose Event that signals the channel has closed. Declaration public event EventHandler<ChannelCloseEventArgs> OnClose Event Type Type Description EventHandler < ChannelCloseEventArgs > View Source OnError Event that signals the channel has errored. Declaration public event EventHandler<ChannelErrorEventArgs> OnError Event Type Type Description EventHandler < ChannelErrorEventArgs > View Source OnOpen Event that signals the channel has opened. Declaration public event EventHandler<ChannelOpenEventArgs> OnOpen Event Type Type Description EventHandler < ChannelOpenEventArgs > View Source OnReceive Event that signals the channel as received a message. Declaration public event EventHandler<ChannelReceivedEventArgs> OnReceive Event Type Type Description EventHandler < ChannelReceivedEventArgs > View Source OnStateChange Event that signals the channel state has changed. Declaration public event EventHandler<ChannelStateEventArgs> OnStateChange Event Type Type Description EventHandler < ChannelStateEventArgs > Implements IInputChannel IOutputChannel IChannel System.IDisposable"
  },
  "reference/DataServices.Channels.BlobStorageChannelOptions.html": {
    "href": "reference/DataServices.Channels.BlobStorageChannelOptions.html",
    "title": "Class BlobStorageChannelOptions | Title",
    "keywords": "Class BlobStorageChannelOptions Azure Blob Storage channel options used to send data to storage. Inheritance Object BlobStorageChannelOptions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Channels Assembly : DataServices.Channels.dll Syntax public class BlobStorageChannelOptions Remarks The AzureBlobStorageChannel can only send, not receive events with blob storage. Properties View Source ConnectionString Gets or sets the Azure Blob Storage connection string. Declaration public string ConnectionString { get; set; } Property Value Type Description String View Source Container Gets or sets the Azure Blob Storage container to read or write data. Declaration public string Container { get; set; } Property Value Type Description String View Source ExecutionStatusType Gets or sets the requirement for execution of the channel. Declaration public StatusType ExecutionStatusType { get; set; } Property Value Type Description StatusType View Source InitialTransferSize Gets or sets the size of the first range request in bytes. Blobs smaller than this limit will be downloaded in a single request. Blobs larger than this limit will continue being downloaded in chunks of size MaximumTransferSize. Declaration public long? InitialTransferSize { get; set; } Property Value Type Description Nullable < Int64 > View Source MaxConcurrency Gets or sets the maximum number of workers that may be used in a parallel transfer. Declaration public int? MaxConcurrency { get; set; } Property Value Type Description Nullable < Int32 > View Source MaxTransferSize Gets or sets the maximum length of an transfer in bytes. Declaration public int? MaxTransferSize { get; set; } Property Value Type Description Nullable < Int32 >"
  },
  "reference/DataServices.Channels.BlobType.html": {
    "href": "reference/DataServices.Channels.BlobType.html",
    "title": "Enum BlobType | Title",
    "keywords": "Enum BlobType Type of Azure storage blob. Namespace : DataServices.Channels Assembly : DataServices.Channels.dll Syntax public enum BlobType Fields Name Description Append Block"
  },
  "reference/DataServices.Channels.ChannelCloseEventArgs.html": {
    "href": "reference/DataServices.Channels.ChannelCloseEventArgs.html",
    "title": "Class ChannelCloseEventArgs | Title",
    "keywords": "Class ChannelCloseEventArgs Event args for Channel close event. Inheritance Object EventArgs ChannelCloseEventArgs Inherited Members EventArgs.Empty Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Channels Assembly : DataServices.dll Syntax public class ChannelCloseEventArgs : EventArgs Constructors View Source ChannelCloseEventArgs(String, String) Creates an instance of ChannelCloseEventArgs. Declaration public ChannelCloseEventArgs(string id, string name) Parameters Type Name Description String id Channel instance ID. String name Name of the channel. Properties View Source Id Gets the channel instance ID. Declaration public string Id { get; } Property Value Type Description String View Source Name Gets the name of the channel. Declaration public string Name { get; } Property Value Type Description String"
  },
  "reference/DataServices.Channels.ChannelErrorEventArgs.html": {
    "href": "reference/DataServices.Channels.ChannelErrorEventArgs.html",
    "title": "Class ChannelErrorEventArgs | Title",
    "keywords": "Class ChannelErrorEventArgs Events args for channel error events. Inheritance Object EventArgs ChannelErrorEventArgs Inherited Members EventArgs.Empty Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Channels Assembly : DataServices.dll Syntax public class ChannelErrorEventArgs : EventArgs Constructors View Source ChannelErrorEventArgs(String, String, Exception) Creates an instance of ChannelErrorEventArgs. Declaration public ChannelErrorEventArgs(string id, string name, Exception error) Parameters Type Name Description String id Unique ID of the channel instance. String name Name of the channel. Exception error Exception that occurred in the channel. Properties View Source Error Gets error that occurred in the channel. Declaration public Exception Error { get; } Property Value Type Description Exception View Source Id Gets channel instance ID. Declaration public string Id { get; } Property Value Type Description String View Source Name Gets name of the channel. Declaration public string Name { get; } Property Value Type Description String"
  },
  "reference/DataServices.Channels.ChannelOpenEventArgs.html": {
    "href": "reference/DataServices.Channels.ChannelOpenEventArgs.html",
    "title": "Class ChannelOpenEventArgs | Title",
    "keywords": "Class ChannelOpenEventArgs Events args for channel open events. Inheritance Object EventArgs ChannelOpenEventArgs Inherited Members EventArgs.Empty Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Channels Assembly : DataServices.dll Syntax public class ChannelOpenEventArgs : EventArgs Constructors View Source ChannelOpenEventArgs(String, String, Object) Creates an instance of ChannelOpenEventArgs. Declaration public ChannelOpenEventArgs(string id, string name, dynamic message) Parameters Type Name Description String id Channel instance ID. String name Channel name. Object message Message received when opening the channel. Properties View Source Id Gets the channel instance ID. Declaration public string Id { get; } Property Value Type Description String View Source Message Gets the message (optional) when the channel is opened. Declaration public dynamic Message { get; } Property Value Type Description Object View Source Name Gets the channel name. Declaration public string Name { get; } Property Value Type Description String"
  },
  "reference/DataServices.Channels.ChannelReceivedEventArgs.html": {
    "href": "reference/DataServices.Channels.ChannelReceivedEventArgs.html",
    "title": "Class ChannelReceivedEventArgs | Title",
    "keywords": "Class ChannelReceivedEventArgs Events args for channel receive events. Inheritance Object EventArgs ChannelReceivedEventArgs Inherited Members EventArgs.Empty Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Channels Assembly : DataServices.dll Syntax public class ChannelReceivedEventArgs : EventArgs Constructors View Source ChannelReceivedEventArgs(String, String, Byte[]) Creates an instance of ChannelReceivedEventArgs. Declaration public ChannelReceivedEventArgs(string id, string name, byte[] message) Parameters Type Name Description String id Channel instance ID. String name Channel name. Byte [] message Message received by the channel. View Source ChannelReceivedEventArgs(String, String, Byte[], IEnumerable<KeyValuePair<String, String>>) Creates an instance of ChannelReceivedEventArgs. Declaration public ChannelReceivedEventArgs(string id, string name, byte[] message, IEnumerable<KeyValuePair<string, string>> properties) Parameters Type Name Description String id Channel instance ID. String name Channel name. Byte [] message Message received by the channel. IEnumerable < KeyValuePair < String , String >> properties Additional properties to be passed. Properties View Source Id Gets channel instance ID. Declaration public string Id { get; } Property Value Type Description String View Source Message Message received by the channel. Declaration public byte[] Message { get; } Property Value Type Description Byte [] View Source Name Gets channel name. Declaration public string Name { get; } Property Value Type Description String View Source Properties Gets additional properties passed on the channel receive. Declaration public IEnumerable<KeyValuePair<string, string>> Properties { get; } Property Value Type Description IEnumerable < KeyValuePair < String , String >>"
  },
  "reference/DataServices.Channels.ChannelState.html": {
    "href": "reference/DataServices.Channels.ChannelState.html",
    "title": "Enum ChannelState | Title",
    "keywords": "Enum ChannelState An enumeration of channel states. Namespace : DataServices.Channels Assembly : DataServices.dll Syntax public enum ChannelState Fields Name Description Aborted Closed ClosedReceived CloseSent Connecting None Open"
  },
  "reference/DataServices.Channels.ChannelStateEventArgs.html": {
    "href": "reference/DataServices.Channels.ChannelStateEventArgs.html",
    "title": "Class ChannelStateEventArgs | Title",
    "keywords": "Class ChannelStateEventArgs Events args for channel state change events. Inheritance Object EventArgs ChannelStateEventArgs Inherited Members EventArgs.Empty Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Channels Assembly : DataServices.dll Syntax public class ChannelStateEventArgs : EventArgs Constructors View Source ChannelStateEventArgs(String, ChannelState) Creates an instance of ChannelStateEventArgs. Declaration public ChannelStateEventArgs(string id, ChannelState state) Parameters Type Name Description String id The channel instance ID. ChannelState state The state of the channel. Properties View Source Id Gets the ID of the channel instance. Declaration public string Id { get; } Property Value Type Description String View Source State Gets the state of the channel. Declaration public ChannelState State { get; } Property Value Type Description ChannelState"
  },
  "reference/DataServices.Channels.Constants.html": {
    "href": "reference/DataServices.Channels.Constants.html",
    "title": "Class Constants | Title",
    "keywords": "Class Constants Inheritance Object Constants Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Channels Assembly : DataServices.Channels.dll Syntax public class Constants Fields View Source EventGridMaxMessageLength Maximum message length for an Event Grid message; Declaration public const int EventGridMaxMessageLength = 1000000 Field Value Type Description Int32 View Source EventHubBasicSkuMaxMessageLength Maximum message length for Event Hub Basic SKU. Declaration public const int EventHubBasicSkuMaxMessageLength = 256000 Field Value Type Description Int32 View Source EventHubNonBasicSkuMaxMessageLength Maxium message for EVent Hub message when not a Basic SKU. Declaration public const int EventHubNonBasicSkuMaxMessageLength = 1000000 Field Value Type Description Int32 View Source ServiceBusNonPremiumSkuMaxMessageLength Maximum message length for Service Bus message when not a Premium SKU. Declaration public const int ServiceBusNonPremiumSkuMaxMessageLength = 256000 Field Value Type Description Int32 View Source ServiceBusPremiumSkuMaxMessageLength Maximum message length for Service Bus Premium SKU. Declaration public const int ServiceBusPremiumSkuMaxMessageLength = 1000000 Field Value Type Description Int32"
  },
  "reference/DataServices.Channels.EventDataByReference.html": {
    "href": "reference/DataServices.Channels.EventDataByReference.html",
    "title": "Class EventDataByReference | Title",
    "keywords": "Class EventDataByReference A reference to a message stored as a file in blob storage. Inheritance Object EventDataByReference Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Channels Assembly : DataServices.Channels.dll Syntax [Serializable] [JsonObject] public class EventDataByReference Remarks This channel provides a reference to a message when using when the primary channel cannot accept a message by value due to its large size. Constructors View Source EventDataByReference() Creates an instance of EventDataByReference. Declaration public EventDataByReference() View Source EventDataByReference(String, String, String) Creates an instance of EventDataByReference. Declaration public EventDataByReference(string container, string blob, string contentType) Parameters Type Name Description String container Blob container name where the file is stored. String blob Filename containing the message. String contentType Content type of the message. Properties View Source Blob Gets or sets the filename of the message. Declaration [JsonProperty(\"blob\")] public string Blob { get; set; } Property Value Type Description String View Source Container Gets or sets the blob storage container name where the file is stored. Declaration [JsonProperty(\"container\")] public string Container { get; set; } Property Value Type Description String View Source ContentType Gets or sets the content type of the message. Declaration [JsonProperty(\"contentType\")] public string ContentType { get; set; } Property Value Type Description String"
  },
  "reference/DataServices.Channels.EventGridChannel.html": {
    "href": "reference/DataServices.Channels.EventGridChannel.html",
    "title": "Class EventGridChannel | Title",
    "keywords": "Class EventGridChannel Channel that sends events to an Azure Event Grid. Inheritance Object EventGridChannel Implements IInputChannel IOutputChannel IChannel IDisposable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Channels Assembly : DataServices.Channels.dll Syntax public class EventGridChannel : IInputChannel, IOutputChannel, IChannel, IDisposable Remarks The EventGridChannel and only send events, not receive. Constructors View Source EventGridChannel(IOptions<EventGridChannelOptions>, ILogger<EventGridChannel>) Creates an instance of EventGridChannel. Declaration public EventGridChannel(IOptions<EventGridChannelOptions> options, ILogger<EventGridChannel> logger = null) Parameters Type Name Description IOptions < EventGridChannelOptions > options Options for sending to the event grid. ILogger < EventGridChannel > logger ILogger Properties View Source ExecutionStatusType Gets the requirement for executing the channel. Declaration public StatusType ExecutionStatusType { get; } Property Value Type Description StatusType View Source Id Gets the instance ID of the channel. Declaration public string Id { get; } Property Value Type Description String View Source IsAuthenticated Gets and indicator to whether the channel has authenticated the user, which is by default always false. Declaration public bool IsAuthenticated { get; } Property Value Type Description Boolean View Source IsEncrypted Indicates whether the channel is encrypted, which is always true. Declaration public bool IsEncrypted { get; } Property Value Type Description Boolean View Source Name Gets the name of the channel, i.e., \"EventGridChannel\". Declaration public string Name { get; } Property Value Type Description String View Source Port Gets the port used, which by default always 0. Declaration public int Port { get; } Property Value Type Description Int32 View Source State Gets or sets the channel state. Declaration public ChannelState State { get; set; } Property Value Type Description ChannelState Methods View Source AddMessageAsync(Byte[]) Add a message to the channel which is surface by the OnReceive event. Declaration public async Task AddMessageAsync(byte[] message) Parameters Type Name Description Byte [] message Message to add. Returns Type Description Task Task View Source CloseAsync() Closes the channel. Declaration public async Task CloseAsync() Returns Type Description Task Task View Source Dispose() Disposes the channel. Declaration public void Dispose() View Source Dispose(Boolean) Declaration protected void Dispose(bool disposing) Parameters Type Name Description Boolean disposing View Source OpenAsync() Opens the channel. Declaration public async Task OpenAsync() Returns Type Description Task Task View Source ReceiveAsync() Starts the recieve operation for the channel. Declaration public async Task ReceiveAsync() Returns Type Description Task Task Remarks Receive operation is omitted without error for an EventGridChannel. View Source SendAsync(Byte[], Object[]) Sends a message to an Event Grid if size < SKU constraint; otherwise uses blob storage. Declaration public async Task SendAsync(byte[] message, params object[] items) Parameters Type Name Description Byte [] message Message to send. Object [] items Additional optional parameters. Returns Type Description Task Task Remarks Items argument is not used in EventGridChannel. Events View Source OnClose Event that signals the channel has closed. Declaration public event EventHandler<ChannelCloseEventArgs> OnClose Event Type Type Description EventHandler < ChannelCloseEventArgs > View Source OnError Event that signals the channel has errored. Declaration public event EventHandler<ChannelErrorEventArgs> OnError Event Type Type Description EventHandler < ChannelErrorEventArgs > View Source OnOpen Event that signals the channel has opened. Declaration public event EventHandler<ChannelOpenEventArgs> OnOpen Event Type Type Description EventHandler < ChannelOpenEventArgs > View Source OnReceive Event that signals the channel as received a message. Declaration public event EventHandler<ChannelReceivedEventArgs> OnReceive Event Type Type Description EventHandler < ChannelReceivedEventArgs > View Source OnStateChange Event that signals the channel state has changed. Declaration public event EventHandler<ChannelStateEventArgs> OnStateChange Event Type Type Description EventHandler < ChannelStateEventArgs > Implements IInputChannel IOutputChannel IChannel System.IDisposable"
  },
  "reference/DataServices.Channels.EventGridChannelOptions.html": {
    "href": "reference/DataServices.Channels.EventGridChannelOptions.html",
    "title": "Class EventGridChannelOptions | Title",
    "keywords": "Class EventGridChannelOptions Azure Event Grid channel options used to send data. Inheritance Object EventGridChannelOptions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Channels Assembly : DataServices.Channels.dll Syntax public class EventGridChannelOptions Properties View Source AccessKey Gets or sets the Azure Event Grid access key. Declaration public string AccessKey { get; set; } Property Value Type Description String View Source DataVersion Gets or sets the Azure Event Grid data version. Declaration public string DataVersion { get; set; } Property Value Type Description String View Source EventType Gets or sets the Azure Event Grid event type. Declaration public string EventType { get; set; } Property Value Type Description String View Source ExecutionStatusType Gets or sets the requirement for execution of the channel. Declaration public StatusType ExecutionStatusType { get; set; } Property Value Type Description StatusType View Source FallbackStorageConnectionString Gets or sets an Azure Blob Storage connection string used when data exceeds the allowable Azure Event Grid size. Declaration public string FallbackStorageConnectionString { get; set; } Property Value Type Description String View Source FallbackStorageContainer Gets or sets an Azure Blob Storage container used to store data when data exceeds the allowable Azure Event Grid size. Declaration public string FallbackStorageContainer { get; set; } Property Value Type Description String View Source Subject Gets or sets Azure Event Grid subject. Declaration public string Subject { get; set; } Property Value Type Description String View Source TopicUriString Gets or sets the Azure Event Grid topic. Declaration public string TopicUriString { get; set; } Property Value Type Description String"
  },
  "reference/DataServices.Channels.EventHubChannel.html": {
    "href": "reference/DataServices.Channels.EventHubChannel.html",
    "title": "Class EventHubChannel | Title",
    "keywords": "Class EventHubChannel Channel that sends or receives events with Azure Event Hub. Inheritance Object EventHubChannel Implements IInputChannel IOutputChannel IChannel IDisposable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Channels Assembly : DataServices.Channels.dll Syntax public class EventHubChannel : IInputChannel, IOutputChannel, IChannel, IDisposable Remarks The ProcessorStorageContainer storage container name must be configured to receive events. Constructors View Source EventHubChannel(IOptions<EventHubChannelOptions>, ILogger<EventHubChannel>) Creates an instance of EventHubChannel for sending to an event hub. Declaration public EventHubChannel(IOptions<EventHubChannelOptions> options, ILogger<EventHubChannel> logger = null) Parameters Type Name Description IOptions < EventHubChannelOptions > options Send options. ILogger < EventHubChannel > logger ILogger Properties View Source ExecutionStatusType Gets the requirement for executing the channel. Declaration public StatusType ExecutionStatusType { get; } Property Value Type Description StatusType View Source Id Gets the instance ID of the channel. Declaration public string Id { get; } Property Value Type Description String View Source IsAuthenticated Gets and indicator to whether the channel has authenticated the user, which by default always false. Declaration public bool IsAuthenticated { get; } Property Value Type Description Boolean View Source IsEncrypted Indicates whether the channel is encrypted, which is always true. Declaration public bool IsEncrypted { get; } Property Value Type Description Boolean View Source Name Gets the name of the channel, i.e., \"EventHubChannel\". Declaration public string Name { get; } Property Value Type Description String View Source Port Gets the port used, which by default always 0. Declaration public int Port { get; } Property Value Type Description Int32 View Source State Gets or sets the channel state. Declaration public ChannelState State { get; set; } Property Value Type Description ChannelState Methods View Source AddMessageAsync(Byte[]) Add a message to the channel which is surface by the OnReceive event. Declaration public async Task AddMessageAsync(byte[] message) Parameters Type Name Description Byte [] message Message to add. Returns Type Description Task Task View Source CloseAsync() Closes the channel. Declaration public async Task CloseAsync() Returns Type Description Task Task View Source Dispose() Disposes the channel. Declaration public void Dispose() View Source Dispose(Boolean) Declaration protected async void Dispose(bool disposing) Parameters Type Name Description Boolean disposing View Source OpenAsync() Opens the channel. Declaration public async Task OpenAsync() Returns Type Description Task Task View Source ReceiveAsync() Starts the recieve operation for the channel. Declaration public async Task ReceiveAsync() Returns Type Description Task Task Remarks Receive operation uses the EventHubProcessor. View Source SendAsync(Byte[], Object[]) Sends a message to an Event Hub if size < SKU constraint; otherwise uses blob storage. Declaration public async Task SendAsync(byte[] message, params object[] items) Parameters Type Name Description Byte [] message Message to send. Object [] items Additional optional parameters, where required is the content type. Returns Type Description Task Task Events View Source OnClose Event that signals the channel has closed. Declaration public event EventHandler<ChannelCloseEventArgs> OnClose Event Type Type Description EventHandler < ChannelCloseEventArgs > View Source OnError Event that signals the channel has errored. Declaration public event EventHandler<ChannelErrorEventArgs> OnError Event Type Type Description EventHandler < ChannelErrorEventArgs > View Source OnOpen Event that signals the channel has opened. Declaration public event EventHandler<ChannelOpenEventArgs> OnOpen Event Type Type Description EventHandler < ChannelOpenEventArgs > View Source OnReceive Event that signals the channel as received a message. Declaration public event EventHandler<ChannelReceivedEventArgs> OnReceive Event Type Type Description EventHandler < ChannelReceivedEventArgs > View Source OnStateChange Event that signals the channel state has changed. Declaration public event EventHandler<ChannelStateEventArgs> OnStateChange Event Type Type Description EventHandler < ChannelStateEventArgs > Implements IInputChannel IOutputChannel IChannel System.IDisposable"
  },
  "reference/DataServices.Channels.EventHubChannelOptions.html": {
    "href": "reference/DataServices.Channels.EventHubChannelOptions.html",
    "title": "Class EventHubChannelOptions | Title",
    "keywords": "Class EventHubChannelOptions Azure Event Hub channel options used to send data. Inheritance Object EventHubChannelOptions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Channels Assembly : DataServices.Channels.dll Syntax public class EventHubChannelOptions Properties View Source ConnectionString Gets or sets the Azure Event Hub connection string. Declaration public string ConnectionString { get; set; } Property Value Type Description String View Source ExecutionStatusType Gets or sets the requirement for execution of the channel. Declaration public StatusType ExecutionStatusType { get; set; } Property Value Type Description StatusType View Source FallbackStorageConnectionString Gets or sets an Azure Blob Storage connection string used when data exceeds the allowable Azure Event Hub size. Declaration public string FallbackStorageConnectionString { get; set; } Property Value Type Description String View Source FallbackStorageContainer Gets or sets an Azure Blob Storage container used to store data when data exceeds the allowable Azure Event Hub size. Declaration public string FallbackStorageContainer { get; set; } Property Value Type Description String View Source HubName Gets or sets the Azure Event Hub used for this channel. Declaration public string HubName { get; set; } Property Value Type Description String View Source ProcessorStorageContainer Gets or sets the Azure Event Hub receiver host storage container. Declaration public string ProcessorStorageContainer { get; set; } Property Value Type Description String Remarks Used only for receiving from Event Hub. View Source Sku Gets or sets the Azure Event Hub Sku used to determine the maximum message size allowed by the Event Hub. Declaration public EventHubSkuType Sku { get; set; } Property Value Type Description EventHubSkuType"
  },
  "reference/DataServices.Channels.EventHubSkuType.html": {
    "href": "reference/DataServices.Channels.EventHubSkuType.html",
    "title": "Enum EventHubSkuType | Title",
    "keywords": "Enum EventHubSkuType Event Hub SKU type. Namespace : DataServices.Channels Assembly : DataServices.Channels.dll Syntax [Serializable] public enum EventHubSkuType Fields Name Description Basic Dedicated Premium Standard"
  },
  "reference/DataServices.Channels.html": {
    "href": "reference/DataServices.Channels.html",
    "title": "Namespace DataServices.Channels | Title",
    "keywords": "Namespace DataServices.Channels Classes BlobStorageChannel Channel that sends events to Azure blob storage. BlobStorageChannelOptions Azure Blob Storage channel options used to send data to storage. ChannelCloseEventArgs Event args for Channel close event. ChannelErrorEventArgs Events args for channel error events. ChannelOpenEventArgs Events args for channel open events. ChannelReceivedEventArgs Events args for channel receive events. ChannelStateEventArgs Events args for channel state change events. Constants EventDataByReference A reference to a message stored as a file in blob storage. EventGridChannel Channel that sends events to an Azure Event Grid. EventGridChannelOptions Azure Event Grid channel options used to send data. EventHubChannel Channel that sends or receives events with Azure Event Hub. EventHubChannelOptions Azure Event Hub channel options used to send data. InputChannelCollection OutputChannelCollection ServiceBusChannel Channel that can send or receive data from Azure Service Bus. ServiceBusChannelOptions Azure Service Bus channel options used to send data. Interfaces IChannel Interface for channels. IChannelCollection IInputChannel IInputChannelCollection IOutputChannel IOutputChannelCollection Enums BlobType Type of Azure storage blob. ChannelState An enumeration of channel states. EventHubSkuType Event Hub SKU type. ServiceBusSkuType Type of Service Bus SKU."
  },
  "reference/DataServices.Channels.IChannel.html": {
    "href": "reference/DataServices.Channels.IChannel.html",
    "title": "Interface IChannel | Title",
    "keywords": "Interface IChannel Interface for channels. Inherited Members IDisposable.Dispose() Namespace : DataServices.Channels Assembly : DataServices.dll Syntax public interface IChannel : IDisposable Properties View Source ExecutionStatusType Gets the requirement for executing the channel. Declaration StatusType ExecutionStatusType { get; } Property Value Type Description StatusType View Source Id Gets a unique id for the channel instance. Declaration string Id { get; } Property Value Type Description String View Source IsAuthenticated Gets an indicator of whether the identity that received the channel connection is authenticated. Declaration bool IsAuthenticated { get; } Property Value Type Description Boolean View Source IsEncrypted Gets an indicateor of whether the channel is encrypted. Declaration bool IsEncrypted { get; } Property Value Type Description Boolean View Source Name Gets a name for the type of channel. Declaration string Name { get; } Property Value Type Description String View Source Port Gets the port opened by the channel. Declaration int Port { get; } Property Value Type Description Int32 View Source State Gets the state of the channel. Declaration ChannelState State { get; } Property Value Type Description ChannelState Methods View Source AddMessageAsync(Byte[]) Injects a message into the channel. Useful with connectionless layer-2 protocols. Declaration Task AddMessageAsync(byte[] message) Parameters Type Name Description Byte [] message Messages to add when needing auxiliary access to channel. Returns Type Description Task Task View Source CloseAsync() Closes the channel. Declaration Task CloseAsync() Returns Type Description Task Task View Source OpenAsync() Opens the channel. Declaration Task OpenAsync() Returns Type Description Task Task View Source ReceiveAsync() Starts the receive process for the channel. Declaration Task ReceiveAsync() Returns Type Description Task Task View Source SendAsync(Byte[], Object[]) Sends a message on the channel. Declaration Task SendAsync(byte[] message, params object[] items) Parameters Type Name Description Byte [] message Message to send. Object [] items Optional parameters to use when sending. Returns Type Description Task Task Events View Source OnClose Event signals the close on the channel. Declaration event EventHandler<ChannelCloseEventArgs> OnClose Event Type Type Description EventHandler < ChannelCloseEventArgs > View Source OnError Event signals an error in the channel. Declaration event EventHandler<ChannelErrorEventArgs> OnError Event Type Type Description EventHandler < ChannelErrorEventArgs > View Source OnOpen Event signals the channel is open and connected. Declaration event EventHandler<ChannelOpenEventArgs> OnOpen Event Type Type Description EventHandler < ChannelOpenEventArgs > View Source OnReceive Event signals a message received by the channel. Declaration event EventHandler<ChannelReceivedEventArgs> OnReceive Event Type Type Description EventHandler < ChannelReceivedEventArgs > View Source OnStateChange Event signals a change in the state of the channel. Declaration event EventHandler<ChannelStateEventArgs> OnStateChange Event Type Type Description EventHandler < ChannelStateEventArgs >"
  },
  "reference/DataServices.Channels.IChannelCollection.html": {
    "href": "reference/DataServices.Channels.IChannelCollection.html",
    "title": "Interface IChannelCollection | Title",
    "keywords": "Interface IChannelCollection Inherited Members IList<IChannel>.IndexOf(IChannel) IList<IChannel>.Insert(Int32, IChannel) IList<IChannel>.RemoveAt(Int32) IList<IChannel>.Item[Int32] ICollection<IChannel>.Add(IChannel) ICollection<IChannel>.Clear() ICollection<IChannel>.Contains(IChannel) ICollection<IChannel>.CopyTo(IChannel[], Int32) ICollection<IChannel>.Remove(IChannel) ICollection<IChannel>.Count ICollection<IChannel>.IsReadOnly IEnumerable<IChannel>.GetEnumerator() Namespace : DataServices.Channels Assembly : DataServices.dll Syntax public interface IChannelCollection : IList<IChannel>, ICollection<IChannel>, IEnumerable<IChannel>, IEnumerable"
  },
  "reference/DataServices.Channels.IInputChannel.html": {
    "href": "reference/DataServices.Channels.IInputChannel.html",
    "title": "Interface IInputChannel | Title",
    "keywords": "Interface IInputChannel Inherited Members IChannel.OnClose IChannel.OnError IChannel.OnOpen IChannel.OnReceive IChannel.OnStateChange IChannel.Id IChannel.Name IChannel.ExecutionStatusType IChannel.IsAuthenticated IChannel.IsEncrypted IChannel.Port IChannel.State IChannel.OpenAsync() IChannel.SendAsync(Byte[], Object[]) IChannel.ReceiveAsync() IChannel.AddMessageAsync(Byte[]) IChannel.CloseAsync() IDisposable.Dispose() Namespace : DataServices.Channels Assembly : DataServices.dll Syntax public interface IInputChannel : IChannel, IDisposable"
  },
  "reference/DataServices.Channels.IInputChannelCollection.html": {
    "href": "reference/DataServices.Channels.IInputChannelCollection.html",
    "title": "Interface IInputChannelCollection | Title",
    "keywords": "Interface IInputChannelCollection Inherited Members IList<IChannel>.IndexOf(IChannel) IList<IChannel>.Insert(Int32, IChannel) IList<IChannel>.RemoveAt(Int32) IList<IChannel>.Item[Int32] ICollection<IChannel>.Add(IChannel) ICollection<IChannel>.Clear() ICollection<IChannel>.Contains(IChannel) ICollection<IChannel>.CopyTo(IChannel[], Int32) ICollection<IChannel>.Remove(IChannel) ICollection<IChannel>.Count ICollection<IChannel>.IsReadOnly IEnumerable<IChannel>.GetEnumerator() Namespace : DataServices.Channels Assembly : DataServices.dll Syntax public interface IInputChannelCollection : IChannelCollection, IList<IChannel>, ICollection<IChannel>, IEnumerable<IChannel>, IEnumerable"
  },
  "reference/DataServices.Channels.InputChannelCollection.html": {
    "href": "reference/DataServices.Channels.InputChannelCollection.html",
    "title": "Class InputChannelCollection | Title",
    "keywords": "Class InputChannelCollection Inheritance Object InputChannelCollection Implements IInputChannelCollection IChannelCollection IList < IChannel > ICollection < IChannel > IEnumerable < IChannel > IEnumerable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Channels Assembly : DataServices.dll Syntax public class InputChannelCollection : IInputChannelCollection, IChannelCollection, IList<IChannel>, ICollection<IChannel>, IEnumerable<IChannel>, IEnumerable Constructors View Source InputChannelCollection(IEnumerable<IInputChannel>) Declaration public InputChannelCollection(IEnumerable<IInputChannel> inputChannels = null) Parameters Type Name Description IEnumerable < IInputChannel > inputChannels Properties View Source Count Declaration public int Count { get; } Property Value Type Description Int32 View Source IsReadOnly Declaration public bool IsReadOnly { get; } Property Value Type Description Boolean View Source Item[Int32] Declaration public IChannel this[int index] { get; set; } Parameters Type Name Description Int32 index Property Value Type Description IChannel Methods View Source Add(IChannel) Declaration public void Add(IChannel item) Parameters Type Name Description IChannel item View Source Clear() Declaration public void Clear() View Source Contains(IChannel) Declaration public bool Contains(IChannel item) Parameters Type Name Description IChannel item Returns Type Description Boolean View Source CopyTo(IChannel[], Int32) Declaration public void CopyTo(IChannel[] array, int arrayIndex) Parameters Type Name Description IChannel [] array Int32 arrayIndex View Source GetEnumerator() Declaration public IEnumerator<IChannel> GetEnumerator() Returns Type Description IEnumerator < IChannel > View Source IndexOf(IChannel) Declaration public int IndexOf(IChannel item) Parameters Type Name Description IChannel item Returns Type Description Int32 View Source Insert(Int32, IChannel) Declaration public void Insert(int index, IChannel item) Parameters Type Name Description Int32 index IChannel item View Source Remove(IChannel) Declaration public bool Remove(IChannel item) Parameters Type Name Description IChannel item Returns Type Description Boolean View Source RemoveAt(Int32) Declaration public void RemoveAt(int index) Parameters Type Name Description Int32 index Explicit Interface Implementations View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements IInputChannelCollection IChannelCollection System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "reference/DataServices.Channels.IOutputChannel.html": {
    "href": "reference/DataServices.Channels.IOutputChannel.html",
    "title": "Interface IOutputChannel | Title",
    "keywords": "Interface IOutputChannel Inherited Members IChannel.OnClose IChannel.OnError IChannel.OnOpen IChannel.OnReceive IChannel.OnStateChange IChannel.Id IChannel.Name IChannel.ExecutionStatusType IChannel.IsAuthenticated IChannel.IsEncrypted IChannel.Port IChannel.State IChannel.OpenAsync() IChannel.SendAsync(Byte[], Object[]) IChannel.ReceiveAsync() IChannel.AddMessageAsync(Byte[]) IChannel.CloseAsync() IDisposable.Dispose() Namespace : DataServices.Channels Assembly : DataServices.dll Syntax public interface IOutputChannel : IChannel, IDisposable"
  },
  "reference/DataServices.Channels.IOutputChannelCollection.html": {
    "href": "reference/DataServices.Channels.IOutputChannelCollection.html",
    "title": "Interface IOutputChannelCollection | Title",
    "keywords": "Interface IOutputChannelCollection Inherited Members IList<IChannel>.IndexOf(IChannel) IList<IChannel>.Insert(Int32, IChannel) IList<IChannel>.RemoveAt(Int32) IList<IChannel>.Item[Int32] ICollection<IChannel>.Add(IChannel) ICollection<IChannel>.Clear() ICollection<IChannel>.Contains(IChannel) ICollection<IChannel>.CopyTo(IChannel[], Int32) ICollection<IChannel>.Remove(IChannel) ICollection<IChannel>.Count ICollection<IChannel>.IsReadOnly IEnumerable<IChannel>.GetEnumerator() Namespace : DataServices.Channels Assembly : DataServices.dll Syntax public interface IOutputChannelCollection : IChannelCollection, IList<IChannel>, ICollection<IChannel>, IEnumerable<IChannel>, IEnumerable"
  },
  "reference/DataServices.Channels.OutputChannelCollection.html": {
    "href": "reference/DataServices.Channels.OutputChannelCollection.html",
    "title": "Class OutputChannelCollection | Title",
    "keywords": "Class OutputChannelCollection Inheritance Object OutputChannelCollection Implements IOutputChannelCollection IChannelCollection IList < IChannel > ICollection < IChannel > IEnumerable < IChannel > IEnumerable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Channels Assembly : DataServices.dll Syntax public class OutputChannelCollection : IOutputChannelCollection, IChannelCollection, IList<IChannel>, ICollection<IChannel>, IEnumerable<IChannel>, IEnumerable Constructors View Source OutputChannelCollection(IEnumerable<IOutputChannel>) Declaration public OutputChannelCollection(IEnumerable<IOutputChannel> outputChannels = null) Parameters Type Name Description IEnumerable < IOutputChannel > outputChannels Properties View Source Count Declaration public int Count { get; } Property Value Type Description Int32 View Source IsReadOnly Declaration public bool IsReadOnly { get; } Property Value Type Description Boolean View Source Item[Int32] Declaration public IChannel this[int index] { get; set; } Parameters Type Name Description Int32 index Property Value Type Description IChannel Methods View Source Add(IChannel) Declaration public void Add(IChannel item) Parameters Type Name Description IChannel item View Source Clear() Declaration public void Clear() View Source Contains(IChannel) Declaration public bool Contains(IChannel item) Parameters Type Name Description IChannel item Returns Type Description Boolean View Source CopyTo(IChannel[], Int32) Declaration public void CopyTo(IChannel[] array, int arrayIndex) Parameters Type Name Description IChannel [] array Int32 arrayIndex View Source GetEnumerator() Declaration public IEnumerator<IChannel> GetEnumerator() Returns Type Description IEnumerator < IChannel > View Source IndexOf(IChannel) Declaration public int IndexOf(IChannel item) Parameters Type Name Description IChannel item Returns Type Description Int32 View Source Insert(Int32, IChannel) Declaration public void Insert(int index, IChannel item) Parameters Type Name Description Int32 index IChannel item View Source Remove(IChannel) Declaration public bool Remove(IChannel item) Parameters Type Name Description IChannel item Returns Type Description Boolean View Source RemoveAt(Int32) Declaration public void RemoveAt(int index) Parameters Type Name Description Int32 index Explicit Interface Implementations View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements IOutputChannelCollection IChannelCollection System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "reference/DataServices.Channels.ServiceBusChannel.html": {
    "href": "reference/DataServices.Channels.ServiceBusChannel.html",
    "title": "Class ServiceBusChannel | Title",
    "keywords": "Class ServiceBusChannel Channel that can send or receive data from Azure Service Bus. Inheritance Object ServiceBusChannel Implements IInputChannel IOutputChannel IChannel IDisposable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Channels Assembly : DataServices.Channels.dll Syntax public class ServiceBusChannel : IInputChannel, IOutputChannel, IChannel, IDisposable Constructors View Source ServiceBusChannel(IOptions<ServiceBusChannelOptions>, ILogger<ServiceBusChannel>) Creates an instance of ServiceBusChannel for sending or receiving messages from service bus. Declaration public ServiceBusChannel(IOptions<ServiceBusChannelOptions> options, ILogger<ServiceBusChannel> logger = null) Parameters Type Name Description IOptions < ServiceBusChannelOptions > options Send options. ILogger < ServiceBusChannel > logger ILogger Remarks The subscription option must be configured to receive events. Properties View Source ExecutionStatusType Gets the requirement for executing the channel. Declaration public StatusType ExecutionStatusType { get; } Property Value Type Description StatusType View Source Id Gets the instance ID of the channel. Declaration public string Id { get; } Property Value Type Description String View Source IsAuthenticated Gets and indicator to whether the channel has authenticated the user, which by default always false. Declaration public bool IsAuthenticated { get; } Property Value Type Description Boolean View Source IsEncrypted Indicates whether the channel is encrypted, which is always true. Declaration public bool IsEncrypted { get; } Property Value Type Description Boolean View Source Name Gets the name of the channel, i.e., \"ServiceBusChannel\". Declaration public string Name { get; } Property Value Type Description String View Source Port Gets the port used, which by default always 0. Declaration public int Port { get; } Property Value Type Description Int32 View Source State Gets or sets the channel state. Declaration public ChannelState State { get; set; } Property Value Type Description ChannelState Methods View Source AddMessageAsync(Byte[]) Add a message to the channel which is surface by the OnReceive event. Declaration public async Task AddMessageAsync(byte[] message) Parameters Type Name Description Byte [] message Message to add. Returns Type Description Task Task View Source CloseAsync() Closes the channel. Declaration public async Task CloseAsync() Returns Type Description Task Task View Source Dispose() Disposes the channel. Declaration public void Dispose() View Source Dispose(Boolean) Declaration protected async void Dispose(bool disposing) Parameters Type Name Description Boolean disposing View Source OpenAsync() Opens the channel. Declaration public async Task OpenAsync() Returns Type Description Task Task View Source ReceiveAsync() Starts the recieve operation for the channel. Declaration public async Task ReceiveAsync() Returns Type Description Task Task Remarks Receive operation and subscription in Service Bus. View Source SendAsync(Byte[], Object[]) Sends a message to a Service Bus topic if size < SKU constraint; otherwise uses blob storage. Declaration public async Task SendAsync(byte[] message, params object[] items) Parameters Type Name Description Byte [] message Message to send. Object [] items Additional optional parameters, where required is the content type. Returns Type Description Task Events View Source OnClose Event that signals the channel has closed. Declaration public event EventHandler<ChannelCloseEventArgs> OnClose Event Type Type Description EventHandler < ChannelCloseEventArgs > View Source OnError Event that signals the channel has errored. Declaration public event EventHandler<ChannelErrorEventArgs> OnError Event Type Type Description EventHandler < ChannelErrorEventArgs > View Source OnOpen Event that signals the channel has opened. Declaration public event EventHandler<ChannelOpenEventArgs> OnOpen Event Type Type Description EventHandler < ChannelOpenEventArgs > View Source OnReceive Event that signals the channel as received a message. Declaration public event EventHandler<ChannelReceivedEventArgs> OnReceive Event Type Type Description EventHandler < ChannelReceivedEventArgs > View Source OnStateChange Event that signals the channel state has changed. Declaration public event EventHandler<ChannelStateEventArgs> OnStateChange Event Type Type Description EventHandler < ChannelStateEventArgs > Implements IInputChannel IOutputChannel IChannel System.IDisposable"
  },
  "reference/DataServices.Channels.ServiceBusChannelOptions.html": {
    "href": "reference/DataServices.Channels.ServiceBusChannelOptions.html",
    "title": "Class ServiceBusChannelOptions | Title",
    "keywords": "Class ServiceBusChannelOptions Azure Service Bus channel options used to send data. Inheritance Object ServiceBusChannelOptions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Channels Assembly : DataServices.Channels.dll Syntax public class ServiceBusChannelOptions Properties View Source ConnectionString Gets or sets the service bus connection string. Declaration public string ConnectionString { get; set; } Property Value Type Description String View Source ExecutionStatusType Gets or sets the status type. Declaration public StatusType ExecutionStatusType { get; set; } Property Value Type Description StatusType View Source FallbackStorageConnectionString Gets or sets the fallback storage for messages of excessive size. Declaration public string FallbackStorageConnectionString { get; set; } Property Value Type Description String View Source FallbackStorageContainer Gets or sets the fallback storage container for messages of excessive size. Declaration public string FallbackStorageContainer { get; set; } Property Value Type Description String View Source Queue Gets or sets the service bus queue for sending or receiving. Declaration public string Queue { get; set; } Property Value Type Description String View Source Sku Gets or sets the type of service bus sku used. Declaration public ServiceBusSkuType Sku { get; set; } Property Value Type Description ServiceBusSkuType View Source Subscription Gets or sets the service bus subscription used to receive events. Declaration public string Subscription { get; set; } Property Value Type Description String Remarks Not used when only sending. View Source Topic Gets or sets the service bus topic. Declaration public string Topic { get; set; } Property Value Type Description String"
  },
  "reference/DataServices.Channels.ServiceBusSkuType.html": {
    "href": "reference/DataServices.Channels.ServiceBusSkuType.html",
    "title": "Enum ServiceBusSkuType | Title",
    "keywords": "Enum ServiceBusSkuType Type of Service Bus SKU. Namespace : DataServices.Channels Assembly : DataServices.Channels.dll Syntax public enum ServiceBusSkuType Fields Name Description Premium Standard"
  },
  "reference/DataServices.Clients.Constants.ContentTypes.html": {
    "href": "reference/DataServices.Clients.Constants.ContentTypes.html",
    "title": "Class Constants.ContentTypes | Title",
    "keywords": "Class Constants.ContentTypes Inheritance Object Constants.ContentTypes Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Clients Assembly : DataServices.dll Syntax public class ContentTypes Fields View Source Json Declaration public const string Json = \"application/json\" Field Value Type Description String"
  },
  "reference/DataServices.Clients.Constants.html": {
    "href": "reference/DataServices.Clients.Constants.html",
    "title": "Class Constants | Title",
    "keywords": "Class Constants Inheritance Object Constants Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Clients Assembly : DataServices.dll Syntax public class Constants"
  },
  "reference/DataServices.Clients.Headers.CustomHeaderType.html": {
    "href": "reference/DataServices.Clients.Headers.CustomHeaderType.html",
    "title": "Enum CustomHeaderType | Title",
    "keywords": "Enum CustomHeaderType namespace Fhir.Proxy.Clients Type of custom header to inject. Namespace : DataServices.Clients.Headers Assembly : DataServices.dll Syntax public enum CustomHeaderType Fields Name Description Identity Injects a new header name with the value determined by a claim type in the security token. Request Injecta new header name with the value determined by header in an incoming http request. Static Injects a new header name and value that is determined the name value pair."
  },
  "reference/DataServices.Clients.Headers.HeaderNameValuePair.html": {
    "href": "reference/DataServices.Clients.Headers.HeaderNameValuePair.html",
    "title": "Class HeaderNameValuePair | Title",
    "keywords": "Class HeaderNameValuePair A name value pair and type of header for the operation. Inheritance Object HeaderNameValuePair Implements IHeaderNameValuePair Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Clients.Headers Assembly : DataServices.dll Syntax public class HeaderNameValuePair : IHeaderNameValuePair Constructors View Source HeaderNameValuePair(String, String, CustomHeaderType) Creates an instance of HeaderNameValuePair. Declaration public HeaderNameValuePair(string name, string value, CustomHeaderType headerType) Parameters Type Name Description String name The name of pair. String value The value of pair. CustomHeaderType headerType Type of header for the operation. Properties View Source HeaderType Gets or sets the type of custom header for the operation. Declaration public CustomHeaderType HeaderType { get; set; } Property Value Type Description CustomHeaderType View Source Name Gets or sets the name of the pair. Declaration public string Name { get; set; } Property Value Type Description String View Source Value Gets or sets the value of the pair. Declaration public string Value { get; set; } Property Value Type Description String Implements IHeaderNameValuePair"
  },
  "reference/DataServices.Clients.Headers.html": {
    "href": "reference/DataServices.Clients.Headers.html",
    "title": "Namespace DataServices.Clients.Headers | Title",
    "keywords": "Namespace DataServices.Clients.Headers Classes HeaderNameValuePair A name value pair and type of header for the operation. HttpCustomHeaderCollection A collection of custom http headers. Interfaces IHeaderNameValuePair Interface for implementing a name value pair and type of custom header. IHttpCustomHeaderCollection Interface that defines how headers from a request can be obtained from the collection of custom headers. Enums CustomHeaderType namespace Fhir.Proxy.Clients Type of custom header to inject."
  },
  "reference/DataServices.Clients.Headers.HttpCustomHeaderCollection.html": {
    "href": "reference/DataServices.Clients.Headers.HttpCustomHeaderCollection.html",
    "title": "Class HttpCustomHeaderCollection | Title",
    "keywords": "Class HttpCustomHeaderCollection A collection of custom http headers. Inheritance Object HttpCustomHeaderCollection Implements IHttpCustomHeaderCollection IList < IHeaderNameValuePair > ICollection < IHeaderNameValuePair > IEnumerable < IHeaderNameValuePair > IEnumerable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Clients.Headers Assembly : DataServices.dll Syntax public class HttpCustomHeaderCollection : IHttpCustomHeaderCollection, IList<IHeaderNameValuePair>, ICollection<IHeaderNameValuePair>, IEnumerable<IHeaderNameValuePair>, IEnumerable Constructors View Source HttpCustomHeaderCollection(IEnumerable<IHeaderNameValuePair>) Creates an instance of HttpCustomHeaderCollection. Declaration public HttpCustomHeaderCollection(IEnumerable<IHeaderNameValuePair> items) Parameters Type Name Description IEnumerable < IHeaderNameValuePair > items Items to initialize the collection. Properties View Source Count Gets the number of items in the collection. Declaration public int Count { get; } Property Value Type Description Int32 View Source IsReadOnly Gets an indicator of whether the collection is read-only. Declaration public bool IsReadOnly { get; } Property Value Type Description Boolean View Source Item[Int32] Gets an item in the collection by its index. Declaration public IHeaderNameValuePair this[int index] { get; set; } Parameters Type Name Description Int32 index Index of item to return. Property Value Type Description IHeaderNameValuePair INameValuePair Methods View Source Add(IHeaderNameValuePair) Add an item to the collection. Declaration public void Add(IHeaderNameValuePair item) Parameters Type Name Description IHeaderNameValuePair item View Source AppendAndReplace(HttpRequestMessage) Appends and replaces existing headers with custom headers and returns the modified collection headers. Declaration public NameValueCollection AppendAndReplace(HttpRequestMessage request) Parameters Type Name Description HttpRequestMessage request Http request message. Returns Type Description NameValueCollection Modified collection headers View Source AppendHeaders(NameValueCollection) Appends headers to an existing collection of headers and returns results. Declaration public NameValueCollection AppendHeaders(NameValueCollection items) Parameters Type Name Description NameValueCollection items Existing header collection. Returns Type Description NameValueCollection The existing headers with the headers in the collection appended. View Source Clear() Clears the collection. Declaration public void Clear() View Source Contains(IHeaderNameValuePair) Indicates whether an item is contained in the collection. Declaration public bool Contains(IHeaderNameValuePair item) Parameters Type Name Description IHeaderNameValuePair item Item used to determined if it is in the collection. Returns Type Description Boolean True is item in is the collection; otherwise false. View Source CopyTo(IHeaderNameValuePair[], Int32) Copies the collection into an array starting at the index. Declaration public void CopyTo(IHeaderNameValuePair[] array, int arrayIndex) Parameters Type Name Description IHeaderNameValuePair [] array Array to fill with the collection. Int32 arrayIndex Starting index to fill the array. View Source GetEnumerator() Gets an enumerator for the collection. Declaration public IEnumerator<IHeaderNameValuePair> GetEnumerator() Returns Type Description IEnumerator < IHeaderNameValuePair > Enumerator of name value pairs. View Source GetHeaders() Gets a collection of headers stored in the collection. Declaration public NameValueCollection GetHeaders() Returns Type Description NameValueCollection Headers in the collection. View Source IndexOf(IHeaderNameValuePair) Finds the index of an item. Declaration public int IndexOf(IHeaderNameValuePair item) Parameters Type Name Description IHeaderNameValuePair item The item to return the index. Returns Type Description Int32 Index of the item in the collection. View Source Insert(Int32, IHeaderNameValuePair) Inserts an item into the collection. Declaration public void Insert(int index, IHeaderNameValuePair item) Parameters Type Name Description Int32 index Index of the item insertion. IHeaderNameValuePair item Item to insert. View Source Remove(IHeaderNameValuePair) Removes an item from the collection. Declaration public bool Remove(IHeaderNameValuePair item) Parameters Type Name Description IHeaderNameValuePair item Item to remove. Returns Type Description Boolean True is the item is removed; otherwise false. View Source RemoveAt(Int32) Removes an item from the collection by its index. Declaration public void RemoveAt(int index) Parameters Type Name Description Int32 index Index of item to remove. Explicit Interface Implementations View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements IHttpCustomHeaderCollection System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "reference/DataServices.Clients.Headers.IHeaderNameValuePair.html": {
    "href": "reference/DataServices.Clients.Headers.IHeaderNameValuePair.html",
    "title": "Interface IHeaderNameValuePair | Title",
    "keywords": "Interface IHeaderNameValuePair Interface for implementing a name value pair and type of custom header. Namespace : DataServices.Clients.Headers Assembly : DataServices.dll Syntax public interface IHeaderNameValuePair Properties View Source HeaderType Gets or sets the type of custom header. Declaration CustomHeaderType HeaderType { get; set; } Property Value Type Description CustomHeaderType View Source Name Gets or sets a name of the pair. Declaration string Name { get; set; } Property Value Type Description String View Source Value Gets or sets a value of the pair. Declaration string Value { get; set; } Property Value Type Description String"
  },
  "reference/DataServices.Clients.Headers.IHttpCustomHeaderCollection.html": {
    "href": "reference/DataServices.Clients.Headers.IHttpCustomHeaderCollection.html",
    "title": "Interface IHttpCustomHeaderCollection | Title",
    "keywords": "Interface IHttpCustomHeaderCollection Interface that defines how headers from a request can be obtained from the collection of custom headers. Inherited Members IList<IHeaderNameValuePair>.IndexOf(IHeaderNameValuePair) IList<IHeaderNameValuePair>.Insert(Int32, IHeaderNameValuePair) IList<IHeaderNameValuePair>.RemoveAt(Int32) IList<IHeaderNameValuePair>.Item[Int32] ICollection<IHeaderNameValuePair>.Add(IHeaderNameValuePair) ICollection<IHeaderNameValuePair>.Clear() ICollection<IHeaderNameValuePair>.Contains(IHeaderNameValuePair) ICollection<IHeaderNameValuePair>.CopyTo(IHeaderNameValuePair[], Int32) ICollection<IHeaderNameValuePair>.Remove(IHeaderNameValuePair) ICollection<IHeaderNameValuePair>.Count ICollection<IHeaderNameValuePair>.IsReadOnly IEnumerable<IHeaderNameValuePair>.GetEnumerator() Namespace : DataServices.Clients.Headers Assembly : DataServices.dll Syntax public interface IHttpCustomHeaderCollection : IList<IHeaderNameValuePair>, ICollection<IHeaderNameValuePair>, IEnumerable<IHeaderNameValuePair>, IEnumerable Methods View Source AppendAndReplace(HttpRequestMessage) Appends and replaces existing headers with custom headers and returns the modified collection headers. Declaration NameValueCollection AppendAndReplace(HttpRequestMessage request) Parameters Type Name Description HttpRequestMessage request Http request message. Returns Type Description NameValueCollection Modified collection headers"
  },
  "reference/DataServices.Clients.html": {
    "href": "reference/DataServices.Clients.html",
    "title": "Namespace DataServices.Clients | Title",
    "keywords": "Namespace DataServices.Clients Classes Constants Constants.ContentTypes HttpRequestMessageExtensions Extensions for HttpRequestMessage. RestRequest Makes an HTTP request to a web server. RestRequestBuilder Builder pattern for REST requests. Retry Async http request retry logic. RetryException Retry exception."
  },
  "reference/DataServices.Clients.HttpRequestMessageExtensions.html": {
    "href": "reference/DataServices.Clients.HttpRequestMessageExtensions.html",
    "title": "Class HttpRequestMessageExtensions | Title",
    "keywords": "Class HttpRequestMessageExtensions Extensions for HttpRequestMessage. Inheritance Object HttpRequestMessageExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Clients Assembly : DataServices.dll Syntax public static class HttpRequestMessageExtensions Methods View Source GetHeaders(HttpRequestMessage) Converts HttpRequestMessage headers into a NameValueCollection. Declaration public static NameValueCollection GetHeaders(this HttpRequestMessage request) Parameters Type Name Description HttpRequestMessage request Request message. Returns Type Description NameValueCollection NameValueCollection of http headers."
  },
  "reference/DataServices.Clients.RestRequest.html": {
    "href": "reference/DataServices.Clients.RestRequest.html",
    "title": "Class RestRequest | Title",
    "keywords": "Class RestRequest Makes an HTTP request to a web server. Inheritance Object RestRequest Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Clients Assembly : DataServices.dll Syntax public class RestRequest Constructors View Source RestRequest(RestRequestBuilder, ILogger) Creates an instance of the RestRequest. Declaration public RestRequest(RestRequestBuilder builder, ILogger logger = null) Parameters Type Name Description RestRequestBuilder builder REST request builder that creates the HttpWebRequest object. ILogger logger Optional logger. View Source RestRequest(ILogger) Declaration protected RestRequest(ILogger logger = null) Parameters Type Name Description ILogger logger Methods View Source SendAsync() Sends and http request and returns a response. Declaration public async Task<HttpResponseMessage> SendAsync() Returns Type Description Task < HttpResponseMessage > HttpResponseMessage"
  },
  "reference/DataServices.Clients.RestRequestBuilder.html": {
    "href": "reference/DataServices.Clients.RestRequestBuilder.html",
    "title": "Class RestRequestBuilder | Title",
    "keywords": "Class RestRequestBuilder Builder pattern for REST requests. Inheritance Object RestRequestBuilder Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Clients Assembly : DataServices.dll Syntax public class RestRequestBuilder Constructors View Source RestRequestBuilder(String, String, X509Certificate2, String, String, NameValueCollection, Byte[], String) Creates an instance of RestRequestBuilder. Declaration public RestRequestBuilder(string method, string baseUrl, X509Certificate2 certificate, string path, string query, NameValueCollection headers, byte[] content, string contentType = \"application/json\") Parameters Type Name Description String method Http Method. String baseUrl Base URL for http request, i.e., scheme and authority. X509Certificate2 certificate X509 certificate to use as a security token. String path Path of the http request, i.e., scheme://authority/path String query Query string for http request. NameValueCollection headers Http headers to add to request. Byte [] content Body content of the http request. String contentType Content type of the http request. View Source RestRequestBuilder(String, String, String, String, String, NameValueCollection, Byte[], String) Creates an instance of RestRequestBuilder. Declaration public RestRequestBuilder(string method, string baseUrl, string securityToken, string path, string query, NameValueCollection headers, byte[] content, string contentType = \"application/json\") Parameters Type Name Description String method Http Method. String baseUrl Base URL for http request, i.e., scheme and authority. String securityToken Security token for http request. String path Path of the http request, i.e., scheme://authority/path String query Query string for http request. NameValueCollection headers Http headers to add to request. Byte [] content Body content of the http request. String contentType Content type of the http request. Properties View Source BaseUrl Gets the base url of the request. Declaration public string BaseUrl { get; } Property Value Type Description String View Source Certificate Get a client certificate if used in the request. Declaration public X509Certificate2 Certificate { get; } Property Value Type Description X509Certificate2 View Source Content Gets the content of the request. Declaration public byte[] Content { get; } Property Value Type Description Byte [] View Source ContentType Gets the content type of the request. Declaration public string ContentType { get; } Property Value Type Description String View Source Headers Gets a collection of HTTP headers of the request. Declaration public NameValueCollection Headers { get; } Property Value Type Description NameValueCollection View Source Method Gets the HTTP method of the request. Declaration public string Method { get; } Property Value Type Description String View Source Path Gets the path of the request. Declaration public string Path { get; } Property Value Type Description String View Source QueryString Gets the query string of the request. Declaration public string QueryString { get; } Property Value Type Description String View Source SecurityToken Gets a security token (JWT) if used in the request. Declaration public string SecurityToken { get; } Property Value Type Description String Methods View Source Build() Declaration public HttpRequestMessage Build() Returns Type Description HttpRequestMessage"
  },
  "reference/DataServices.Clients.Retry.html": {
    "href": "reference/DataServices.Clients.Retry.html",
    "title": "Class Retry | Title",
    "keywords": "Class Retry Async http request retry logic. Inheritance Object Retry Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Clients Assembly : DataServices.dll Syntax public static class Retry Methods View Source Execute<T>(Func<Task<T>>, TimeSpan, Int32, ILogger) Executes an http request with retry logic. Declaration public static async Task<T> Execute<T>(Func<Task<T>> func, TimeSpan deltaBackoff, int maxRetries, ILogger logger = null) Parameters Type Name Description Func < Task <T>> func Function that executes the rest request. TimeSpan deltaBackoff Time to wait for retry if request fails. Int32 maxRetries Maxiumum number of times to retry failed requests. ILogger logger ILogger Returns Type Description Task <T> Type returned by the executing function. Type Parameters Name Description T The type return by the executing function. View Source ExecuteRequest(RestRequest, TimeSpan, Int32, ILogger) Executes an http request with retry logic. Declaration public static async Task<HttpResponseMessage> ExecuteRequest(RestRequest request, TimeSpan deltaBackoff, int maxRetries, ILogger logger = null) Parameters Type Name Description RestRequest request Rest request to send. TimeSpan deltaBackoff Time to wait for retry if request fails. Int32 maxRetries Maxiumum number of times to retry failed requests. ILogger logger ILogger Returns Type Description Task < HttpResponseMessage > HttpResponseMessage"
  },
  "reference/DataServices.Clients.RetryException.html": {
    "href": "reference/DataServices.Clients.RetryException.html",
    "title": "Class RetryException | Title",
    "keywords": "Class RetryException Retry exception. Inheritance Object Exception RetryException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : DataServices.Clients Assembly : DataServices.dll Syntax public class RetryException : Exception, ISerializable Constructors View Source RetryException() Creates an instance of RetryException. Declaration public RetryException() View Source RetryException(SerializationInfo, StreamingContext) Declaration protected RetryException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info StreamingContext context View Source RetryException(String) Creates an instance of RetryException. Declaration public RetryException(string message) Parameters Type Name Description String message Exception message. View Source RetryException(String, Exception) Creates an instance of RetryException. Declaration public RetryException(string message, Exception innerException) Parameters Type Name Description String message Exception message. Exception innerException Inner exception. Implements System.Runtime.Serialization.ISerializable"
  },
  "reference/DataServices.Commands.CommandException.html": {
    "href": "reference/DataServices.Commands.CommandException.html",
    "title": "Class CommandException | Title",
    "keywords": "Class CommandException Command exception. Inheritance Object Exception CommandException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : DataServices.Commands Assembly : DataServices.dll Syntax public class CommandException : Exception, ISerializable Constructors View Source CommandException() Creates an instance of CommandException. Declaration public CommandException() View Source CommandException(SerializationInfo, StreamingContext) Declaration protected CommandException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info StreamingContext context View Source CommandException(String) Creates an instance of CommandException. Declaration public CommandException(string message) Parameters Type Name Description String message Exception message. View Source CommandException(String, Exception) Creates an instance of CommandException. Declaration public CommandException(string message, Exception innerException) Parameters Type Name Description String message Exception message. Exception innerException Inner exception. Implements System.Runtime.Serialization.ISerializable"
  },
  "reference/DataServices.Commands.html": {
    "href": "reference/DataServices.Commands.html",
    "title": "Namespace DataServices.Commands | Title",
    "keywords": "Namespace DataServices.Commands Classes CommandException Command exception. IsArrayCommand Command the verifies a JToken with Json path terminates at a JArray. IsMatchCommand<T> Command the verifies a JToken property value from Json path matches the supplied value. IsNotNullOrEmptyCommand Command the verifies a JToken with Json path has to non-null or non-empty value. IsNullOrEmptyCommand Command the verifies a JToken with Json path is null or empty value. TokenExistsCommand Command the verifies a JToken exists for Json path in a parent JToken. Interfaces ICommandException Interface for commands."
  },
  "reference/DataServices.Commands.ICommandException.html": {
    "href": "reference/DataServices.Commands.ICommandException.html",
    "title": "Interface ICommandException | Title",
    "keywords": "Interface ICommandException Interface for commands. Namespace : DataServices.Commands Assembly : DataServices.dll Syntax public interface ICommandException Methods View Source Execute() Executes the command. Declaration void Execute()"
  },
  "reference/DataServices.Commands.IsArrayCommand.html": {
    "href": "reference/DataServices.Commands.IsArrayCommand.html",
    "title": "Class IsArrayCommand | Title",
    "keywords": "Class IsArrayCommand Command the verifies a JToken with Json path terminates at a JArray. Inheritance Object IsArrayCommand Implements ICommandException Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Commands Assembly : DataServices.dll Syntax public class IsArrayCommand : ICommandException Constructors View Source IsArrayCommand(JToken, String) Creates an instance of IsArrayCommand. Declaration public IsArrayCommand(JToken token, string jpath) Parameters Type Name Description Newtonsoft.Json.Linq.JToken token JToken to test. String jpath Json path in JToken to excepted JArray. Methods View Source Execute() Executes without exception if Json path for JToken is JArray. Declaration public void Execute() Implements ICommandException"
  },
  "reference/DataServices.Commands.IsMatchCommand-1.html": {
    "href": "reference/DataServices.Commands.IsMatchCommand-1.html",
    "title": "Class IsMatchCommand<T> | Title",
    "keywords": "Class IsMatchCommand<T> Command the verifies a JToken property value from Json path matches the supplied value. Inheritance Object IsMatchCommand<T> Implements ICommandException Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Commands Assembly : DataServices.dll Syntax public class IsMatchCommand<T> : ICommandException Type Parameters Name Description T Constructors View Source IsMatchCommand(JToken, String, T) Creates an instance of IsMatchCommand. Declaration public IsMatchCommand(JToken token, string jpath, T value) Parameters Type Name Description Newtonsoft.Json.Linq.JToken token JToken to test. String jpath Json path in JToken to leads to property to test value. T value Value to test for match. Methods View Source Execute() Executes without exception if Json path for JToken has a property value that matches supplied value. Declaration public void Execute() Implements ICommandException"
  },
  "reference/DataServices.Commands.IsNotNullOrEmptyCommand.html": {
    "href": "reference/DataServices.Commands.IsNotNullOrEmptyCommand.html",
    "title": "Class IsNotNullOrEmptyCommand | Title",
    "keywords": "Class IsNotNullOrEmptyCommand Command the verifies a JToken with Json path has to non-null or non-empty value. Inheritance Object IsNotNullOrEmptyCommand Implements ICommandException Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Commands Assembly : DataServices.dll Syntax public class IsNotNullOrEmptyCommand : ICommandException Constructors View Source IsNotNullOrEmptyCommand(JToken, String) Creates an instance of IsNotNullOrEmptyCommand. Declaration public IsNotNullOrEmptyCommand(JToken token, string jpath) Parameters Type Name Description Newtonsoft.Json.Linq.JToken token JToken to test. String jpath Json path to test for not null or empty in JToken. Methods View Source Execute() Executes without exception if Json path for JToken is non-null or non-empty. Declaration public void Execute() Implements ICommandException"
  },
  "reference/DataServices.Commands.IsNullOrEmptyCommand.html": {
    "href": "reference/DataServices.Commands.IsNullOrEmptyCommand.html",
    "title": "Class IsNullOrEmptyCommand | Title",
    "keywords": "Class IsNullOrEmptyCommand Command the verifies a JToken with Json path is null or empty value. Inheritance Object IsNullOrEmptyCommand Implements ICommandException Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Commands Assembly : DataServices.dll Syntax public class IsNullOrEmptyCommand : ICommandException Constructors View Source IsNullOrEmptyCommand(JToken, String) Creates an instance of IsNotNullOrEmptyCommand. Declaration public IsNullOrEmptyCommand(JToken token, string jpath) Parameters Type Name Description Newtonsoft.Json.Linq.JToken token JToken to test. String jpath Json path to test for null or empty in JToken. Methods View Source Execute() Executes without exception if Json path for JToken is null or empty. Declaration public void Execute() Implements ICommandException"
  },
  "reference/DataServices.Commands.TokenExistsCommand.html": {
    "href": "reference/DataServices.Commands.TokenExistsCommand.html",
    "title": "Class TokenExistsCommand | Title",
    "keywords": "Class TokenExistsCommand Command the verifies a JToken exists for Json path in a parent JToken. Inheritance Object TokenExistsCommand Implements ICommandException Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Commands Assembly : DataServices.dll Syntax public class TokenExistsCommand : ICommandException Constructors View Source TokenExistsCommand(JToken, String) Creates an instance of TokenExistsCommand. Declaration public TokenExistsCommand(JToken token, string jpath) Parameters Type Name Description Newtonsoft.Json.Linq.JToken token JToken to test. String jpath Json path to test for exists. Methods View Source Execute() Executes without exception if JToken exists in the Json path. Declaration public void Execute() Implements ICommandException"
  },
  "reference/DataServices.Configuration.html": {
    "href": "reference/DataServices.Configuration.html",
    "title": "Namespace DataServices.Configuration | Title",
    "keywords": "Namespace DataServices.Configuration Classes PipelineExtensions Helper extensions for pipelines"
  },
  "reference/DataServices.Configuration.PipelineExtensions.html": {
    "href": "reference/DataServices.Configuration.PipelineExtensions.html",
    "title": "Class PipelineExtensions | Title",
    "keywords": "Class PipelineExtensions Helper extensions for pipelines Inheritance Object PipelineExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Configuration Assembly : DataServices.dll Syntax public static class PipelineExtensions Methods View Source AddBinding(IServiceCollection, Type) Add a binding Declaration public static IServiceCollection AddBinding(this IServiceCollection services, Type type) Parameters Type Name Description IServiceCollection services Services collection. Type type Type of binding. Returns Type Description IServiceCollection Services collection. View Source AddBinding<TOptions>(IServiceCollection, Type, Action<TOptions>) Adds a binding. Declaration public static IServiceCollection AddBinding<TOptions>(this IServiceCollection services, Type type, Action<TOptions> options) where TOptions : class Parameters Type Name Description IServiceCollection services Services collection. Type type Type of binding. Action <TOptions> options Options for binding. Returns Type Description IServiceCollection Services collection. Type Parameters Name Description TOptions Type of options for binding. View Source AddCustomHeader(IServiceCollection, String, String, CustomHeaderType) Adds a custom header for sending http requests. Declaration public static IServiceCollection AddCustomHeader(this IServiceCollection services, string name, string value, CustomHeaderType headerType) Parameters Type Name Description IServiceCollection services Services collection. String name Name of the http header to add. String value Value of the http header. CustomHeaderType headerType Returns Type Description IServiceCollection Services collection. View Source AddInputChannel<TOptions>(IServiceCollection, Type, Action<TOptions>) Adds an input channel. Declaration public static IServiceCollection AddInputChannel<TOptions>(this IServiceCollection services, Type type, Action<TOptions> options) where TOptions : class Parameters Type Name Description IServiceCollection services Services collection. Type type Type of input channel. Action <TOptions> options Options for input channel. Returns Type Description IServiceCollection Services collection. Type Parameters Name Description TOptions Type of options for input channel. View Source AddInputFilter(IServiceCollection, Type) Adds an input filter. Declaration public static IServiceCollection AddInputFilter(this IServiceCollection services, Type type) Parameters Type Name Description IServiceCollection services Services collection. Type type Type of input filter. Returns Type Description IServiceCollection Services collection. View Source AddInputFilter<TOptions>(IServiceCollection, Type, Action<TOptions>) Adds an input filter. Declaration public static IServiceCollection AddInputFilter<TOptions>(this IServiceCollection services, Type type, Action<TOptions> options) where TOptions : class Parameters Type Name Description IServiceCollection services Services collection. Type type Type of input filter. Action <TOptions> options Options for input filter. Returns Type Description IServiceCollection Services collection. Type Parameters Name Description TOptions Type of options for input filter. View Source AddOutputChannel<TOptions>(IServiceCollection, Type, Action<TOptions>) Add an output channel. Declaration public static IServiceCollection AddOutputChannel<TOptions>(this IServiceCollection services, Type type, Action<TOptions> options) where TOptions : class Parameters Type Name Description IServiceCollection services Services collection. Type type Type of output channel. Action <TOptions> options Options for output channel. Returns Type Description IServiceCollection Services collection. Type Parameters Name Description TOptions Type of options for output channel. View Source AddOutputFilter(IServiceCollection, Type) Adds an output filter. Declaration public static IServiceCollection AddOutputFilter(this IServiceCollection services, Type type) Parameters Type Name Description IServiceCollection services Services collection. Type type Type of output filter. Returns Type Description IServiceCollection Services collection. View Source AddOutputFilter<TOptions>(IServiceCollection, Type, Action<TOptions>) Add an output filter. Declaration public static IServiceCollection AddOutputFilter<TOptions>(this IServiceCollection services, Type type, Action<TOptions> options) where TOptions : class Parameters Type Name Description IServiceCollection services Services collection. Type type Type of output filter. Action <TOptions> options Options for output filter. Returns Type Description IServiceCollection Services collection. Type Parameters Name Description TOptions Type of options for output filter. View Source AddRestBinding(IServiceCollection, Action<RestBindingOptions>) Adds a REST binding. Declaration public static IServiceCollection AddRestBinding(this IServiceCollection services, Action<RestBindingOptions> options) Parameters Type Name Description IServiceCollection services Services collection. Action < RestBindingOptions > options Options for REST binding. Returns Type Description IServiceCollection Services collection. View Source UseAppInsightsLogging(IServiceCollection, String, LogLevel) Uses application insights for logging. Declaration public static IServiceCollection UseAppInsightsLogging(this IServiceCollection services, string instrumentationKey, LogLevel logLevel) Parameters Type Name Description IServiceCollection services String instrumentationKey LogLevel logLevel Returns Type Description IServiceCollection Services collection. View Source UseAuthenticator(IServiceCollection) Use the authenticator with DefaultCredentials for acquistion of access tokens from Azure AD. Declaration public static IServiceCollection UseAuthenticator(this IServiceCollection services) Parameters Type Name Description IServiceCollection services Services collection. Returns Type Description IServiceCollection Services collection. View Source UseAuthenticator(IServiceCollection, Action<ServiceIdentityOptions>) Use the authenticator for acquisition of access tokens from Azure AD. Declaration public static IServiceCollection UseAuthenticator(this IServiceCollection services, Action<ServiceIdentityOptions> options) Parameters Type Name Description IServiceCollection services Services collection. Action < ServiceIdentityOptions > options Options for configuration. Returns Type Description IServiceCollection Services collection. View Source UseAzureFunctionPipeline(IServiceCollection) Uses a Azure Function pipeline. Declaration public static IServiceCollection UseAzureFunctionPipeline(this IServiceCollection services) Parameters Type Name Description IServiceCollection services Returns Type Description IServiceCollection Services collection. View Source UseCustomHeaders(IServiceCollection) Use custom http headers to when sending http requests. Declaration public static IServiceCollection UseCustomHeaders(this IServiceCollection services) Parameters Type Name Description IServiceCollection services Services collection. Returns Type Description IServiceCollection Services collection. View Source UseTelemetry(IServiceCollection, String) Use application insights for telemetry. Declaration public static IServiceCollection UseTelemetry(this IServiceCollection services, string instrumentationKey) Parameters Type Name Description IServiceCollection services String instrumentationKey Returns Type Description IServiceCollection Services collection. View Source UseWebPipeline(IServiceCollection) Use a Web pipeline for Web services. Declaration public static IServiceCollection UseWebPipeline(this IServiceCollection services) Parameters Type Name Description IServiceCollection services Services collection. Returns Type Description IServiceCollection Services collection."
  },
  "reference/DataServices.Core.Configuration.CertificateConfig.html": {
    "href": "reference/DataServices.Core.Configuration.CertificateConfig.html",
    "title": "Class CertificateConfig | Title",
    "keywords": "Class CertificateConfig Configuration of certificates to be obtained from a Key Vault. Inheritance Object CertificateConfig Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Core.Configuration Assembly : DataServices.dll Syntax [Serializable] [JsonObject] public class CertificateConfig Properties View Source Certficate Gets the certificate from the key vault. Declaration public X509Certificate2 Certficate { get; } Property Value Type Description X509Certificate2 View Source ClientId Gets for sets the client id used to authenticate. Declaration [JsonProperty(\"clientId\")] public string ClientId { get; set; } Property Value Type Description String View Source ClientSecret Gets or sets the client secret used to authenticate. Declaration [JsonProperty(\"clientSecret\")] public string ClientSecret { get; set; } Property Value Type Description String View Source KeyVaultCertificateName Gets or sets the certificate name in key vault. Declaration [JsonProperty(\"keyVaultCertificateName\")] public string KeyVaultCertificateName { get; set; } Property Value Type Description String View Source KeyVaultUri Gets or sets the Key Vault URI used to hold the certificate. Declaration [JsonProperty(\"keyVaultUri\")] public string KeyVaultUri { get; set; } Property Value Type Description String View Source TenantId Gets for sets the AAD tenant id. Declaration [JsonProperty(\"tenantId\")] public string TenantId { get; set; } Property Value Type Description String"
  },
  "reference/DataServices.Core.Configuration.html": {
    "href": "reference/DataServices.Core.Configuration.html",
    "title": "Namespace DataServices.Core.Configuration | Title",
    "keywords": "Namespace DataServices.Core.Configuration Classes CertificateConfig Configuration of certificates to be obtained from a Key Vault."
  },
  "reference/DataServices.Core.Filters.FilterOptions.html": {
    "href": "reference/DataServices.Core.Filters.FilterOptions.html",
    "title": "Class FilterOptions | Title",
    "keywords": "Class FilterOptions Inheritance Object FilterOptions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Core.Filters Assembly : DataServices.dll Syntax public class FilterOptions Properties View Source FhirServerUrl Declaration public string FhirServerUrl { get; set; } Property Value Type Description String"
  },
  "reference/DataServices.Core.Filters.html": {
    "href": "reference/DataServices.Core.Filters.html",
    "title": "Namespace DataServices.Core.Filters | Title",
    "keywords": "Namespace DataServices.Core.Filters Classes FilterOptions"
  },
  "reference/DataServices.Filters.FilterErrorEventArgs.html": {
    "href": "reference/DataServices.Filters.FilterErrorEventArgs.html",
    "title": "Class FilterErrorEventArgs | Title",
    "keywords": "Class FilterErrorEventArgs Filter error event arguments used when filters signal an error. Inheritance Object EventArgs FilterErrorEventArgs Inherited Members EventArgs.Empty Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Filters Assembly : DataServices.dll Syntax public class FilterErrorEventArgs : EventArgs Constructors View Source FilterErrorEventArgs(String, String, Boolean, Exception, Nullable<HttpStatusCode>, String) Creates an instance of FilterErrorEventArgs Declaration public FilterErrorEventArgs(string name, string id, bool fatal = false, Exception error = null, HttpStatusCode? code = null, string responseBody = null) Parameters Type Name Description String name Name of the filter. String id Instance id of the filter. Boolean fatal Indicator as to whether the filter has caught a fatal error. Exception error An error caught by a filter. Nullable < HttpStatusCode > code Http response code, if applicable. String responseBody Http response body, if applicable. Properties View Source Code Get the http status code for a response; otherwise null. Declaration public HttpStatusCode? Code { get; } Property Value Type Description Nullable < HttpStatusCode > View Source Error Gets an exception thrown by the filter; otherwise null. Declaration public Exception Error { get; } Property Value Type Description Exception View Source Id Gets the instance id of the filter. Declaration public string Id { get; } Property Value Type Description String View Source IsFatal Gets an indicator that determines if the filter has a fatal error. Declaration public bool IsFatal { get; } Property Value Type Description Boolean View Source Name Gets the name of the filter. Declaration public string Name { get; } Property Value Type Description String View Source ResponseBody Gets a response body from a request; otherwise null. Declaration public string ResponseBody { get; } Property Value Type Description String"
  },
  "reference/DataServices.Filters.html": {
    "href": "reference/DataServices.Filters.html",
    "title": "Namespace DataServices.Filters | Title",
    "keywords": "Namespace DataServices.Filters Classes FilterErrorEventArgs Filter error event arguments used when filters signal an error. InputFilterCollection A collection of input filters. OutputFilterCollection A collection of output filters. Interfaces IFilter IFilter interface to be implemented by filters. IFilterCollection IInputFilter IInputFilterCollection IOutputFilter IOutputFilterCollection"
  },
  "reference/DataServices.Filters.IFilter.html": {
    "href": "reference/DataServices.Filters.IFilter.html",
    "title": "Interface IFilter | Title",
    "keywords": "Interface IFilter IFilter interface to be implemented by filters. Namespace : DataServices.Filters Assembly : DataServices.dll Syntax public interface IFilter Properties View Source ExecutionStatusType Gets the requirement for executing the filter. Declaration StatusType ExecutionStatusType { get; } Property Value Type Description StatusType View Source Id Gets the unique id on the filter instance. Declaration string Id { get; } Property Value Type Description String View Source Name Gets the name of the filter. Declaration string Name { get; } Property Value Type Description String Methods View Source ExecuteAsync(OperationContext) Executes the filter operation. Declaration Task<OperationContext> ExecuteAsync(OperationContext context) Parameters Type Name Description OperationContext context Context of the input for filter execution. Returns Type Description Task < OperationContext > Context for input to next filter or output for http response. Events View Source OnFilterError Event signals the filter caught an error. Declaration event EventHandler<FilterErrorEventArgs> OnFilterError Event Type Type Description EventHandler < FilterErrorEventArgs >"
  },
  "reference/DataServices.Filters.IFilterCollection.html": {
    "href": "reference/DataServices.Filters.IFilterCollection.html",
    "title": "Interface IFilterCollection | Title",
    "keywords": "Interface IFilterCollection Inherited Members IList<IFilter>.IndexOf(IFilter) IList<IFilter>.Insert(Int32, IFilter) IList<IFilter>.RemoveAt(Int32) IList<IFilter>.Item[Int32] ICollection<IFilter>.Add(IFilter) ICollection<IFilter>.Clear() ICollection<IFilter>.Contains(IFilter) ICollection<IFilter>.CopyTo(IFilter[], Int32) ICollection<IFilter>.Remove(IFilter) ICollection<IFilter>.Count ICollection<IFilter>.IsReadOnly IEnumerable<IFilter>.GetEnumerator() Namespace : DataServices.Filters Assembly : DataServices.dll Syntax public interface IFilterCollection : IList<IFilter>, ICollection<IFilter>, IEnumerable<IFilter>, IEnumerable"
  },
  "reference/DataServices.Filters.IInputFilter.html": {
    "href": "reference/DataServices.Filters.IInputFilter.html",
    "title": "Interface IInputFilter | Title",
    "keywords": "Interface IInputFilter Inherited Members IFilter.OnFilterError IFilter.Id IFilter.Name IFilter.ExecutionStatusType IFilter.ExecuteAsync(OperationContext) Namespace : DataServices.Filters Assembly : DataServices.dll Syntax public interface IInputFilter : IFilter"
  },
  "reference/DataServices.Filters.IInputFilterCollection.html": {
    "href": "reference/DataServices.Filters.IInputFilterCollection.html",
    "title": "Interface IInputFilterCollection | Title",
    "keywords": "Interface IInputFilterCollection Inherited Members IList<IFilter>.IndexOf(IFilter) IList<IFilter>.Insert(Int32, IFilter) IList<IFilter>.RemoveAt(Int32) IList<IFilter>.Item[Int32] ICollection<IFilter>.Add(IFilter) ICollection<IFilter>.Clear() ICollection<IFilter>.Contains(IFilter) ICollection<IFilter>.CopyTo(IFilter[], Int32) ICollection<IFilter>.Remove(IFilter) ICollection<IFilter>.Count ICollection<IFilter>.IsReadOnly IEnumerable<IFilter>.GetEnumerator() Namespace : DataServices.Filters Assembly : DataServices.dll Syntax public interface IInputFilterCollection : IFilterCollection, IList<IFilter>, ICollection<IFilter>, IEnumerable<IFilter>, IEnumerable"
  },
  "reference/DataServices.Filters.InputFilterCollection.html": {
    "href": "reference/DataServices.Filters.InputFilterCollection.html",
    "title": "Class InputFilterCollection | Title",
    "keywords": "Class InputFilterCollection A collection of input filters. Inheritance Object InputFilterCollection Implements IInputFilterCollection IFilterCollection IList < IFilter > ICollection < IFilter > IEnumerable < IFilter > IEnumerable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Filters Assembly : DataServices.dll Syntax public class InputFilterCollection : IInputFilterCollection, IFilterCollection, IList<IFilter>, ICollection<IFilter>, IEnumerable<IFilter>, IEnumerable Constructors View Source InputFilterCollection(IEnumerable<IInputFilter>) Creates an instance of InputFilterCollection. Declaration public InputFilterCollection(IEnumerable<IInputFilter> inputFilters = null) Parameters Type Name Description IEnumerable < IInputFilter > inputFilters Items to initialize the collection. Properties View Source Count Gets the number of filters in the collection. Declaration public int Count { get; } Property Value Type Description Int32 View Source IsReadOnly Gets an indicator of whether the filter collection is read-only. Declaration public bool IsReadOnly { get; } Property Value Type Description Boolean View Source Item[Int32] Gets a filter in the collection by its index. Declaration public IFilter this[int index] { get; set; } Parameters Type Name Description Int32 index Index of filter to return. Property Value Type Description IFilter IFilter Methods View Source Add(IFilter) Adds a filter to the collection. Declaration public void Add(IFilter item) Parameters Type Name Description IFilter item Filter to add to the collection. View Source Clear() Clears the filter collections. Declaration public void Clear() View Source Contains(IFilter) Indicates whether a filter is contained in the collection. Declaration public bool Contains(IFilter item) Parameters Type Name Description IFilter item Fitler used to determined if it is in the collection. Returns Type Description Boolean True is filter in is the collection; otherwise false. View Source CopyTo(IFilter[], Int32) Copies the filter collection into an array starting at the index. Declaration public void CopyTo(IFilter[] array, int arrayIndex) Parameters Type Name Description IFilter [] array Array to fill with filter collection. Int32 arrayIndex Starting index to fill the array. View Source GetEnumerator() Gets an enumerator for the filters in the collection. Declaration public IEnumerator<IFilter> GetEnumerator() Returns Type Description IEnumerator < IFilter > Enumerator of filters. View Source IndexOf(IFilter) Finds the index of a filter. Declaration public int IndexOf(IFilter item) Parameters Type Name Description IFilter item The filter to return the index. Returns Type Description Int32 Index of the input filter in the collection. View Source Insert(Int32, IFilter) Inserts a filter into the collection. Declaration public void Insert(int index, IFilter item) Parameters Type Name Description Int32 index Index of the filter insertion. IFilter item Fitler to insert. View Source Remove(IFilter) Removes a filter from the collection. Declaration public bool Remove(IFilter item) Parameters Type Name Description IFilter item Filter to remove. Returns Type Description Boolean True is the filter is removed; otherwise false. View Source RemoveAt(Int32) Remove a filter from the collection by its index. Declaration public void RemoveAt(int index) Parameters Type Name Description Int32 index Index of filter to remove. Explicit Interface Implementations View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements IInputFilterCollection IFilterCollection System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "reference/DataServices.Filters.IOutputFilter.html": {
    "href": "reference/DataServices.Filters.IOutputFilter.html",
    "title": "Interface IOutputFilter | Title",
    "keywords": "Interface IOutputFilter Inherited Members IFilter.OnFilterError IFilter.Id IFilter.Name IFilter.ExecutionStatusType IFilter.ExecuteAsync(OperationContext) Namespace : DataServices.Filters Assembly : DataServices.dll Syntax public interface IOutputFilter : IFilter"
  },
  "reference/DataServices.Filters.IOutputFilterCollection.html": {
    "href": "reference/DataServices.Filters.IOutputFilterCollection.html",
    "title": "Interface IOutputFilterCollection | Title",
    "keywords": "Interface IOutputFilterCollection Inherited Members IList<IFilter>.IndexOf(IFilter) IList<IFilter>.Insert(Int32, IFilter) IList<IFilter>.RemoveAt(Int32) IList<IFilter>.Item[Int32] ICollection<IFilter>.Add(IFilter) ICollection<IFilter>.Clear() ICollection<IFilter>.Contains(IFilter) ICollection<IFilter>.CopyTo(IFilter[], Int32) ICollection<IFilter>.Remove(IFilter) ICollection<IFilter>.Count ICollection<IFilter>.IsReadOnly IEnumerable<IFilter>.GetEnumerator() Namespace : DataServices.Filters Assembly : DataServices.dll Syntax public interface IOutputFilterCollection : IFilterCollection, IList<IFilter>, ICollection<IFilter>, IEnumerable<IFilter>, IEnumerable"
  },
  "reference/DataServices.Filters.OutputFilterCollection.html": {
    "href": "reference/DataServices.Filters.OutputFilterCollection.html",
    "title": "Class OutputFilterCollection | Title",
    "keywords": "Class OutputFilterCollection A collection of output filters. Inheritance Object OutputFilterCollection Implements IOutputFilterCollection IFilterCollection IList < IFilter > ICollection < IFilter > IEnumerable < IFilter > IEnumerable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Filters Assembly : DataServices.dll Syntax public class OutputFilterCollection : IOutputFilterCollection, IFilterCollection, IList<IFilter>, ICollection<IFilter>, IEnumerable<IFilter>, IEnumerable Constructors View Source OutputFilterCollection(IEnumerable<IOutputFilter>) Creates an instance of OutputFilterCollection. Declaration public OutputFilterCollection(IEnumerable<IOutputFilter> outputFilters = null) Parameters Type Name Description IEnumerable < IOutputFilter > outputFilters Items to initialize the collection. Properties View Source Count Gets the number of filters in the collection. Declaration public int Count { get; } Property Value Type Description Int32 View Source IsReadOnly Gets an indicator of whether the filter collection is read-only. Declaration public bool IsReadOnly { get; } Property Value Type Description Boolean View Source Item[Int32] Gets a filter in the collection by its index. Declaration public IFilter this[int index] { get; set; } Parameters Type Name Description Int32 index Index of filter to return. Property Value Type Description IFilter IFilter Methods View Source Add(IFilter) Adds a filter to the collection. Declaration public void Add(IFilter item) Parameters Type Name Description IFilter item Filter to add to the collection. View Source Clear() Clears the filter collections. Declaration public void Clear() View Source Contains(IFilter) Indicates whether a filter is contained in the collection. Declaration public bool Contains(IFilter item) Parameters Type Name Description IFilter item Fitler used to determined if it is in the collection. Returns Type Description Boolean True is filter in is the collection; otherwise false. View Source CopyTo(IFilter[], Int32) Copies the filter collection into an array starting at the index. Declaration public void CopyTo(IFilter[] array, int arrayIndex) Parameters Type Name Description IFilter [] array Array to fill with filter collection. Int32 arrayIndex Starting index to fill the array. View Source GetEnumerator() Gets an enumerator for the filters in the collection. Declaration public IEnumerator<IFilter> GetEnumerator() Returns Type Description IEnumerator < IFilter > Enumerator of filters. View Source IndexOf(IFilter) Finds the index of a filter. Declaration public int IndexOf(IFilter item) Parameters Type Name Description IFilter item The filter to return the index. Returns Type Description Int32 Index of the input filter in the collection. View Source Insert(Int32, IFilter) Inserts a filter into the collection. Declaration public void Insert(int index, IFilter item) Parameters Type Name Description Int32 index Index of the filter insertion. IFilter item Filter to insert. View Source Remove(IFilter) Removes a filter from the collection. Declaration public bool Remove(IFilter item) Parameters Type Name Description IFilter item Filter to remove. Returns Type Description Boolean True is the filter is removed; otherwise false. View Source RemoveAt(Int32) Remove a filter from the collection by its index. Declaration public void RemoveAt(int index) Parameters Type Name Description Int32 index Index of filter to remove. Explicit Interface Implementations View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements IOutputFilterCollection IFilterCollection System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "reference/DataServices.Json.BundleEnumerator.html": {
    "href": "reference/DataServices.Json.BundleEnumerator.html",
    "title": "Class BundleEnumerator | Title",
    "keywords": "Class BundleEnumerator Enumerator for FHIR bundle. Inheritance Object BundleEnumerator Implements IEnumerator < Newtonsoft.Json.Linq.JToken > IEnumerator IDisposable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Json Assembly : DataServices.dll Syntax public class BundleEnumerator : IEnumerator<JToken>, IEnumerator, IDisposable Constructors View Source BundleEnumerator(JArray, Boolean) Creates an instance of BundleEnumerator. Declaration public BundleEnumerator(JArray array, bool ifNoneExist) Parameters Type Name Description Newtonsoft.Json.Linq.JArray array JArray containing items in the bundle. Boolean ifNoneExist FHIR ifNoneExists flag omits if false. Properties View Source Current Gets the current JToken for the enumerator. Declaration public JToken Current { get; } Property Value Type Description Newtonsoft.Json.Linq.JToken Methods View Source Dispose() Disposes the enumerator. Declaration public void Dispose() View Source Dispose(Boolean) Declaration protected void Dispose(bool dispose) Parameters Type Name Description Boolean dispose View Source MoveNext() Moves the enumerator forward by one. Declaration public bool MoveNext() Returns Type Description Boolean True if item is available; otherwise false. View Source Reset() Resets the enumerator to the beginning. Declaration public void Reset() Explicit Interface Implementations View Source IEnumerator.Current Declaration object IEnumerator.Current { get; } Returns Type Description Object Implements System.Collections.Generic.IEnumerator<T> System.Collections.IEnumerator System.IDisposable"
  },
  "reference/DataServices.Json.BundleReader.html": {
    "href": "reference/DataServices.Json.BundleReader.html",
    "title": "Class BundleReader | Title",
    "keywords": "Class BundleReader FHIR bundle reader. Inheritance Object JObjectReader BundleReader Inherited Members JObjectReader.root Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Json Assembly : DataServices.dll Syntax public class BundleReader : JObjectReader Constructors View Source BundleReader(JObject, Boolean) Creates a new instance of BundleReader. Declaration public BundleReader(JObject root, bool ifNoneExist) Parameters Type Name Description Newtonsoft.Json.Linq.JObject root The root object to read. Boolean ifNoneExist FHIR ifNoneExists flag omits if false. Methods View Source GetEnumerator() Gets the bundle enumerator. Declaration public override IEnumerator<JToken> GetEnumerator() Returns Type Description IEnumerator < Newtonsoft.Json.Linq.JToken > Enumerator of JToken if exists, otherwise null. Overrides JObjectReader.GetEnumerator()"
  },
  "reference/DataServices.Json.html": {
    "href": "reference/DataServices.Json.html",
    "title": "Namespace DataServices.Json | Title",
    "keywords": "Namespace DataServices.Json Classes BundleEnumerator Enumerator for FHIR bundle. BundleReader FHIR bundle reader. JObjectReader Abstract JObject reader JPathException JPath exception. JTokenExtensions Extensions for JToken."
  },
  "reference/DataServices.Json.JObjectReader.html": {
    "href": "reference/DataServices.Json.JObjectReader.html",
    "title": "Class JObjectReader | Title",
    "keywords": "Class JObjectReader Abstract JObject reader Inheritance Object JObjectReader BundleReader Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Json Assembly : DataServices.dll Syntax public abstract class JObjectReader Constructors View Source JObjectReader(JObject) Declaration protected JObjectReader(JObject root) Parameters Type Name Description Newtonsoft.Json.Linq.JObject root Fields View Source root Declaration protected JObject root Field Value Type Description Newtonsoft.Json.Linq.JObject Methods View Source GetEnumerator() Gets an enumerator. Declaration public abstract IEnumerator<JToken> GetEnumerator() Returns Type Description IEnumerator < Newtonsoft.Json.Linq.JToken > IEnumerator of JToken."
  },
  "reference/DataServices.Json.JPathException.html": {
    "href": "reference/DataServices.Json.JPathException.html",
    "title": "Class JPathException | Title",
    "keywords": "Class JPathException JPath exception. Inheritance Object Exception JPathException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : DataServices.Json Assembly : DataServices.dll Syntax public class JPathException : Exception, ISerializable Constructors View Source JPathException() Creates an instance of JPathException. Declaration public JPathException() View Source JPathException(SerializationInfo, StreamingContext) Declaration protected JPathException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info StreamingContext context View Source JPathException(String) Creates an instance of JPathException. Declaration public JPathException(string message) Parameters Type Name Description String message Exception message. View Source JPathException(String, Exception) Creates an instance of JPathException. Declaration public JPathException(string message, Exception innerException) Parameters Type Name Description String message Exception message. Exception innerException Inner exception. Implements System.Runtime.Serialization.ISerializable"
  },
  "reference/DataServices.Json.JTokenExtensions.html": {
    "href": "reference/DataServices.Json.JTokenExtensions.html",
    "title": "Class JTokenExtensions | Title",
    "keywords": "Class JTokenExtensions Extensions for JToken. Inheritance Object JTokenExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Json Assembly : DataServices.dll Syntax public static class JTokenExtensions Methods View Source Exists(JToken, String) Indicates whether a token exists found by JPath. Declaration public static bool Exists(this JToken jtoken, string jpath) Parameters Type Name Description Newtonsoft.Json.Linq.JToken jtoken JToken root. String jpath JPath to test whether the JToken exists. Returns Type Description Boolean View Source GetArray(JToken, String, Boolean) Gets JArray from a JPath from the root JToKen; otherwise null if array not present. Declaration public static JArray GetArray(this JToken token, string jpath, bool throwIfNull = false) Parameters Type Name Description Newtonsoft.Json.Linq.JToken token JToken root. String jpath JPath to array. Boolean throwIfNull If true throws and exception is array not found; otherwise null. Returns Type Description Newtonsoft.Json.Linq.JArray JArray is found by JPath; otherwise if throwIfNull is true throws an exception; otherwise returns null. View Source GetArrayItem<T>(JToken, String, Boolean) Gets the value of an item in a JArray. Declaration public static T GetArrayItem<T>(this JToken token, string jpath, bool throwIfNull = false) Parameters Type Name Description Newtonsoft.Json.Linq.JToken token JToken root. String jpath JPath to array. Boolean throwIfNull Determines whether an exception is throw if the item value cannot be returned; otherwise returns null. Returns Type Description T Type Parameters Name Description T Data type of item value. View Source GetToken(JToken, String, Boolean) Gets a JToken from a JPath. Declaration public static JToken GetToken(this JToken token, string jpath, bool throwIfNull = false) Parameters Type Name Description Newtonsoft.Json.Linq.JToken token JToken root. String jpath JPath to token. Boolean throwIfNull If true throws an exception if a token is not found; otherwise is false returns null. Returns Type Description Newtonsoft.Json.Linq.JToken JToken if found. View Source GetValue<T>(JToken, Boolean) Gets a value from a JToken. Declaration public static T GetValue<T>(this JToken token, bool throwIfNull = false) Parameters Type Name Description Newtonsoft.Json.Linq.JToken token JToken to get value. Boolean throwIfNull Determines whether an exception is throw if the item value cannot be returned; otherwise returns null. Returns Type Description T Type Parameters Name Description T Data type of value. View Source GetValue<T>(JToken, String, Boolean) Gets a value from a JToken root via JPath. Declaration public static T GetValue<T>(this JToken token, string jpath, bool throwIfNull = false) Parameters Type Name Description Newtonsoft.Json.Linq.JToken token String jpath Boolean throwIfNull Returns Type Description T Value of token if found. Type Parameters Name Description T View Source IsArray(JToken) Indicates true when a JToken is an array; otherwise false. Declaration public static bool IsArray(this JToken token) Parameters Type Name Description Newtonsoft.Json.Linq.JToken token JToken to test. Returns Type Description Boolean True is JToken is an array; otherwise false. View Source IsArray(JToken, String) Indicates true when an array is found via JPath. Declaration public static bool IsArray(this JToken token, string jpath) Parameters Type Name Description Newtonsoft.Json.Linq.JToken token JToken root. String jpath JPath to array. Returns Type Description Boolean True if JPath finds an array; otherwise false. View Source IsMatch(JToken, String, String) Indicates whether the value of a token found by JPath is a match. Declaration public static bool IsMatch(this JToken jtoken, string jpath, string value) Parameters Type Name Description Newtonsoft.Json.Linq.JToken jtoken JToken root. String jpath JPath to test for JToken. String value Value to test for JToken in path. Returns Type Description Boolean True is match; otherwise false. View Source IsMatch<T>(JToken, String, T) Indicates whether the value of a token found by JPath is a match. Declaration public static bool IsMatch<T>(this JToken jtoken, string jpath, T value) Parameters Type Name Description Newtonsoft.Json.Linq.JToken jtoken JToken root. String jpath JPath to test for JToken. T value Value to test for JToken in path. Returns Type Description Boolean True is match; otherwise false. Type Parameters Name Description T Type of value. View Source IsNullOrEmpty(JToken) Indicates true when a JToken value is null or empty; otherwise false. Declaration public static bool IsNullOrEmpty(this JToken token) Parameters Type Name Description Newtonsoft.Json.Linq.JToken token Returns Type Description Boolean True is the token is null or empty; otherwise false. View Source IsNullOrEmpty(JToken, String) Indicates true when a value found by a JPath is null or empty; otherwise false. Declaration public static bool IsNullOrEmpty(this JToken token, string jpath) Parameters Type Name Description Newtonsoft.Json.Linq.JToken token String jpath Returns Type Description Boolean True if the token found is null or empty; otherwise false."
  },
  "reference/DataServices.Json.Transforms.AddTransform.html": {
    "href": "reference/DataServices.Json.Transforms.AddTransform.html",
    "title": "Class AddTransform | Title",
    "keywords": "Class AddTransform Json transform to add a node. Inheritance Object Transform AddTransform Inherited Members Transform.JsonPath Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Json.Transforms Assembly : DataServices.dll Syntax [Serializable] [JsonObject] public class AddTransform : Transform Properties View Source AppendNode Gets or sets the json on the node to add. Declaration [JsonProperty(\"appendNode\")] public string AppendNode { get; set; } Property Value Type Description String View Source Name Gets the name of the transform, i.e., \"add\". Declaration [JsonProperty(\"name\")] public override string Name { get; } Property Value Type Description String Overrides Transform.Name Methods View Source Execute(String) Executes the add transform. Declaration public override JObject Execute(string json) Parameters Type Name Description String json Json document which to add the node based on the Json path. Returns Type Description Newtonsoft.Json.Linq.JObject Overrides Transform.Execute(String)"
  },
  "reference/DataServices.Json.Transforms.html": {
    "href": "reference/DataServices.Json.Transforms.html",
    "title": "Namespace DataServices.Json.Transforms | Title",
    "keywords": "Namespace DataServices.Json.Transforms Classes AddTransform Json transform to add a node. JsonTransformConverter<T> JSON.NET transform converter RemoveTransform Json transform to remove a node. ReplaceTransform Json replace transform. Transform Abstract transform. TransformCollection A collection of transforms. TransformConverter JSON.NET transform converter TransformPolicy Json transform policy."
  },
  "reference/DataServices.Json.Transforms.JsonTransformConverter-1.html": {
    "href": "reference/DataServices.Json.Transforms.JsonTransformConverter-1.html",
    "title": "Class JsonTransformConverter<T> | Title",
    "keywords": "Class JsonTransformConverter<T> JSON.NET transform converter Inheritance Object Newtonsoft.Json.JsonConverter JsonTransformConverter<T> TransformConverter Inherited Members Newtonsoft.Json.JsonConverter.CanRead Newtonsoft.Json.JsonConverter.CanWrite Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Json.Transforms Assembly : DataServices.dll Syntax public abstract class JsonTransformConverter<T> : JsonConverter Type Parameters Name Description T Methods View Source CanConvert(Type) Indicates whether the object can be converter. Declaration public override bool CanConvert(Type objectType) Parameters Type Name Description Type objectType Type of object to convert. Returns Type Description Boolean True if can be converted; otherwise false. Overrides Newtonsoft.Json.JsonConverter.CanConvert(System.Type) View Source Create(Type, JObject) Declaration protected abstract T Create(Type objectType, JObject jObject) Parameters Type Name Description Type objectType Newtonsoft.Json.Linq.JObject jObject Returns Type Description T View Source FieldExists(JObject, String, JTokenType) Indicates whether a field exists. Declaration protected static bool FieldExists(JObject jObject, string name, JTokenType type) Parameters Type Name Description Newtonsoft.Json.Linq.JObject jObject JObject to evaluate. String name Name of field. Newtonsoft.Json.Linq.JTokenType type Type of JToken. Returns Type Description Boolean View Source ReadJson(JsonReader, Type, Object, JsonSerializer) Read the json object. Declaration public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonReader reader JsonReader Type objectType Type of object to read. Object existingValue Object to read. Newtonsoft.Json.JsonSerializer serializer JsonSerializer. Returns Type Description Object Overrides Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, System.Object, Newtonsoft.Json.JsonSerializer) View Source WriteJson(JsonWriter, Object, JsonSerializer) Write json transform. Declaration public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonWriter writer JsonWriter Object value Object to write. Newtonsoft.Json.JsonSerializer serializer JsonSerializer Overrides Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, System.Object, Newtonsoft.Json.JsonSerializer)"
  },
  "reference/DataServices.Json.Transforms.RemoveTransform.html": {
    "href": "reference/DataServices.Json.Transforms.RemoveTransform.html",
    "title": "Class RemoveTransform | Title",
    "keywords": "Class RemoveTransform Json transform to remove a node. Inheritance Object Transform RemoveTransform Inherited Members Transform.JsonPath Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Json.Transforms Assembly : DataServices.dll Syntax [Serializable] [JsonObject] public class RemoveTransform : Transform Properties View Source Name Gets the name of the transform, i.e., \"remove\". Declaration [JsonProperty(\"name\")] public override string Name { get; } Property Value Type Description String Overrides Transform.Name Methods View Source Execute(String) Executes the remove transform. Declaration public override JObject Execute(string json) Parameters Type Name Description String json Json document which to add the node is removed based on the Json path. Returns Type Description Newtonsoft.Json.Linq.JObject Transformed JObject. Overrides Transform.Execute(String)"
  },
  "reference/DataServices.Json.Transforms.ReplaceTransform.html": {
    "href": "reference/DataServices.Json.Transforms.ReplaceTransform.html",
    "title": "Class ReplaceTransform | Title",
    "keywords": "Class ReplaceTransform Json replace transform. Inheritance Object Transform ReplaceTransform Inherited Members Transform.JsonPath Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Json.Transforms Assembly : DataServices.dll Syntax [Serializable] [JsonObject] public class ReplaceTransform : Transform Properties View Source Name Gets the name of the transform, i.e., \"replace\". Declaration [JsonProperty(\"name\")] public override string Name { get; } Property Value Type Description String Overrides Transform.Name View Source ReplaceNode Gets or sets the json node to replace. Declaration [JsonProperty(\"replaceNode\")] public string ReplaceNode { get; set; } Property Value Type Description String Methods View Source Execute(String) Executes the replace transform. Declaration public override JObject Execute(string json) Parameters Type Name Description String json Json document which a node is replaced based on the Json path and replace node. Returns Type Description Newtonsoft.Json.Linq.JObject Overrides Transform.Execute(String)"
  },
  "reference/DataServices.Json.Transforms.Transform.html": {
    "href": "reference/DataServices.Json.Transforms.Transform.html",
    "title": "Class Transform | Title",
    "keywords": "Class Transform Abstract transform. Inheritance Object Transform AddTransform RemoveTransform ReplaceTransform Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Json.Transforms Assembly : DataServices.dll Syntax [Serializable] [JsonConverter(typeof(TransformConverter))] public abstract class Transform Properties View Source JsonPath Gets or sets the Json path needed to apply the transform to the input json document. Declaration [JsonProperty(\"jsonPath\")] public virtual string JsonPath { get; set; } Property Value Type Description String View Source Name Gets the name of the type of transform. Declaration [JsonProperty(\"name\")] public abstract string Name { get; } Property Value Type Description String Methods View Source Execute(String) Executes the transform. Declaration public abstract JObject Execute(string json) Parameters Type Name Description String json Document json to apply the transform and json path. Returns Type Description Newtonsoft.Json.Linq.JObject Transform json as JObject."
  },
  "reference/DataServices.Json.Transforms.TransformCollection.html": {
    "href": "reference/DataServices.Json.Transforms.TransformCollection.html",
    "title": "Class TransformCollection | Title",
    "keywords": "Class TransformCollection A collection of transforms. Inheritance Object TransformCollection Implements IList < Transform > ICollection < Transform > IEnumerable < Transform > IEnumerable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Json.Transforms Assembly : DataServices.dll Syntax public class TransformCollection : IList<Transform>, ICollection<Transform>, IEnumerable<Transform>, IEnumerable Constructors View Source TransformCollection() Creates an instance of the transform collection. Declaration public TransformCollection() Properties View Source Count Gets the number of transforms in the collection. Declaration public int Count { get; } Property Value Type Description Int32 View Source IsReadOnly Gets an indicator of whether the transform is read-only. Declaration public bool IsReadOnly { get; } Property Value Type Description Boolean View Source Item[Int32] Gets a transform in the collection by its index. Declaration public Transform this[int index] { get; set; } Parameters Type Name Description Int32 index Index of transform to return. Property Value Type Description Transform Transform Methods View Source Add(Transform) Adds a transform to the collection. Declaration public void Add(Transform item) Parameters Type Name Description Transform item Transform to add to the collection. View Source Clear() Clears the transform collections. Declaration public void Clear() View Source Contains(Transform) Indicates whether a transform is contained in the collection. Declaration public bool Contains(Transform item) Parameters Type Name Description Transform item Transform used to determined if it is in the collection. Returns Type Description Boolean True is transform in is the collection; otherwise false. View Source CopyTo(Transform[], Int32) Copies the transform collection into an array starting at the index. Declaration public void CopyTo(Transform[] array, int arrayIndex) Parameters Type Name Description Transform [] array Array to fill with transform collection. Int32 arrayIndex Starting index to fill the array. View Source GetEnumerator() Gets an enumerator for the transforms in the collection. Declaration public IEnumerator<Transform> GetEnumerator() Returns Type Description IEnumerator < Transform > Enumerator of transforms. View Source IndexOf(Transform) Finds the index of a transform. Declaration public int IndexOf(Transform item) Parameters Type Name Description Transform item The transform to return the index. Returns Type Description Int32 Index of the input transform in the collection. View Source Insert(Int32, Transform) Inserts a transform into the collection. Declaration public void Insert(int index, Transform item) Parameters Type Name Description Int32 index Index of the transform insertion. Transform item Transform to insert. View Source Remove(Transform) Removes a transform from the collection. Declaration public bool Remove(Transform item) Parameters Type Name Description Transform item Transform to remove. Returns Type Description Boolean True is the transform is removed; otherwise false. View Source RemoveAt(Int32) Remove a transform from the collection by its index. Declaration public void RemoveAt(int index) Parameters Type Name Description Int32 index Index of transform to remove. Explicit Interface Implementations View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "reference/DataServices.Json.Transforms.TransformConverter.html": {
    "href": "reference/DataServices.Json.Transforms.TransformConverter.html",
    "title": "Class TransformConverter | Title",
    "keywords": "Class TransformConverter JSON.NET transform converter Inheritance Object Newtonsoft.Json.JsonConverter JsonTransformConverter < Transform > TransformConverter Inherited Members JsonTransformConverter<Transform>.CanConvert(Type) JsonTransformConverter<Transform>.ReadJson(JsonReader, Type, Object, JsonSerializer) JsonTransformConverter<Transform>.WriteJson(JsonWriter, Object, JsonSerializer) JsonTransformConverter<Transform>.FieldExists(JObject, String, JTokenType) Newtonsoft.Json.JsonConverter.CanRead Newtonsoft.Json.JsonConverter.CanWrite Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Json.Transforms Assembly : DataServices.dll Syntax public class TransformConverter : JsonTransformConverter<Transform> Methods View Source Create(Type, JObject) Creates a concrete transform and returns as abstract transform type. Declaration protected override Transform Create(Type objectType, JObject jObject) Parameters Type Name Description Type objectType Transform object type. Newtonsoft.Json.Linq.JObject jObject Transform object. Returns Type Description Transform Overrides DataServices.Json.Transforms.JsonTransformConverter<DataServices.Json.Transforms.Transform>.Create(System.Type, Newtonsoft.Json.Linq.JObject)"
  },
  "reference/DataServices.Json.Transforms.TransformPolicy.html": {
    "href": "reference/DataServices.Json.Transforms.TransformPolicy.html",
    "title": "Class TransformPolicy | Title",
    "keywords": "Class TransformPolicy Json transform policy. Inheritance Object TransformPolicy Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Json.Transforms Assembly : DataServices.dll Syntax [Serializable] [JsonObject] public class TransformPolicy Constructors View Source TransformPolicy() Creates an instance of TransformPolicy. Declaration public TransformPolicy() View Source TransformPolicy(TransformCollection) Creates an instance of TransformPolicy. Declaration public TransformPolicy(TransformCollection transforms) Parameters Type Name Description TransformCollection transforms Collection of transforms implemented by the policy. View Source TransformPolicy(String, TransformCollection) Creates an instance of TransformPolicy. Declaration public TransformPolicy(string policyId, TransformCollection transforms = null) Parameters Type Name Description String policyId Unique ID of the policy. TransformCollection transforms Collection of transforms implemented by the policy. Properties View Source PolicyId Gets or sets the ID of the policy. Declaration [JsonProperty(\"policyId\")] public string PolicyId { get; set; } Property Value Type Description String View Source Transforms Gets or sets a collection of transforms. Declaration [JsonProperty(\"transforms\")] public TransformCollection Transforms { get; set; } Property Value Type Description TransformCollection Methods View Source Transform(String) Transforms a json document and returns the transformed document. Declaration public string Transform(string json) Parameters Type Name Description String json Json document to transform. Returns Type Description String Json string as transformed document."
  },
  "reference/DataServices.Pipelines.AspnetCoreExtensions.html": {
    "href": "reference/DataServices.Pipelines.AspnetCoreExtensions.html",
    "title": "Class AspnetCoreExtensions | Title",
    "keywords": "Class AspnetCoreExtensions Inheritance Object AspnetCoreExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Pipelines Assembly : DataServices.dll Syntax public static class AspnetCoreExtensions Methods View Source ConvertToHttpRequestMesssage(HttpRequest) Converts HttpRequest to HttpRequestMessage. Declaration public static HttpRequestMessage ConvertToHttpRequestMesssage(this HttpRequest req) Parameters Type Name Description HttpRequest req HttpRequest to convert. Returns Type Description HttpRequestMessage HttpRequestMessage"
  },
  "reference/DataServices.Pipelines.AzureFunctionExtensions.html": {
    "href": "reference/DataServices.Pipelines.AzureFunctionExtensions.html",
    "title": "Class AzureFunctionExtensions | Title",
    "keywords": "Class AzureFunctionExtensions Helper extensions for Azure Functions Inheritance Object AzureFunctionExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Pipelines Assembly : DataServices.dll Syntax public static class AzureFunctionExtensions Methods View Source ConvertToHttpRequestMesssage(HttpRequestData) Converts HttpRequestData to HttpRequestMessage. Declaration public static HttpRequestMessage ConvertToHttpRequestMesssage(this HttpRequestData req) Parameters Type Name Description HttpRequestData req HttpRequestData Returns Type Description HttpRequestMessage HttpRequestMessage View Source ConvertToHttpResponseData(OperationContext, HttpRequestData) Converts HttpResponseData to HttpResponseData. Declaration public static async Task<HttpResponseData> ConvertToHttpResponseData(this OperationContext context, HttpRequestData request) Parameters Type Name Description OperationContext context OperationContext HttpRequestData request HttpRequestData Returns Type Description Task < HttpResponseData > HttpResponseData View Source ConvertToHttpResponseDataAsync(HttpResponseMessage, HttpRequestData) Uses a combination of an HttpResponeMessage and HttpRequestData to conver to HttpResponseData. Declaration public static async Task<HttpResponseData> ConvertToHttpResponseDataAsync(this HttpResponseMessage message, HttpRequestData request) Parameters Type Name Description HttpResponseMessage message HttpRequestMessage that is extended. HttpRequestData request HttpRequestData to use in the conversion. Returns Type Description Task < HttpResponseData > HttpResponseData View Source GetClaimsPrincipal(HttpRequestData) Gets a ClaimsPrincipal from HttpRequestData. Declaration public static ClaimsPrincipal GetClaimsPrincipal(this HttpRequestData request) Parameters Type Name Description HttpRequestData request HttpRequestData Returns Type Description ClaimsPrincipal ClaimsPrincipal View Source GetClaimsPrincipal(HttpRequestMessage) Declaration public static ClaimsPrincipal GetClaimsPrincipal(this HttpRequestMessage request) Parameters Type Name Description HttpRequestMessage request Returns Type Description ClaimsPrincipal"
  },
  "reference/DataServices.Pipelines.AzureFunctionPipeline.html": {
    "href": "reference/DataServices.Pipelines.AzureFunctionPipeline.html",
    "title": "Class AzureFunctionPipeline | Title",
    "keywords": "Class AzureFunctionPipeline A custom operation pipeline for an azure isolated process function app. Inheritance Object AzureFunctionPipeline Implements IPipeline < HttpRequestData , HttpResponseData > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Pipelines Assembly : DataServices.dll Syntax public class AzureFunctionPipeline : IPipeline<HttpRequestData, HttpResponseData> Constructors View Source AzureFunctionPipeline(IInputFilterCollection, IInputChannelCollection, IBinding, IOutputFilterCollection, IOutputChannelCollection, TelemetryClient, ILogger<AzureFunctionPipeline>) Creates an instance of AzureFunctionPipeline Declaration public AzureFunctionPipeline(IInputFilterCollection inputFilters = null, IInputChannelCollection inputChannels = null, IBinding binding = null, IOutputFilterCollection outputFilters = null, IOutputChannelCollection outputChannels = null, TelemetryClient telemetryClient = null, ILogger<AzureFunctionPipeline> logger = null) Parameters Type Name Description IInputFilterCollection inputFilters Optional collection of input filters. IInputChannelCollection inputChannels Optional cCollection of input channels. IBinding binding Optional binding. IOutputFilterCollection outputFilters Optional collection of output filters. IOutputChannelCollection outputChannels Optional collection of output channels. TelemetryClient telemetryClient Optional application insights telemetry client. ILogger < AzureFunctionPipeline > logger Optional ILogger. Properties View Source Id Gets the unique ID of the pipeline instance. Declaration public string Id { get; } Property Value Type Description String View Source Name Gets the name of the pipeline. Declaration public string Name { get; } Property Value Type Description String Methods View Source ExecuteAsync(HttpRequestData) Executes the pipeline and returns a response for the caller. Declaration public async Task<HttpResponseData> ExecuteAsync(HttpRequestData request) Parameters Type Name Description HttpRequestData request Iniitial request from the Azure Function. Returns Type Description Task < HttpResponseData > Response for an Azure Function. Events View Source OnComplete Signals an event when the pipeline completes. Declaration public event EventHandler<PipelineCompleteEventArgs> OnComplete Event Type Type Description EventHandler < PipelineCompleteEventArgs > View Source OnError Signals an event that an error occurred in the pipeline. Declaration public event EventHandler<PipelineErrorEventArgs> OnError Event Type Type Description EventHandler < PipelineErrorEventArgs > Implements IPipeline<TRequest, TResponse>"
  },
  "reference/DataServices.Pipelines.html": {
    "href": "reference/DataServices.Pipelines.html",
    "title": "Namespace DataServices.Pipelines | Title",
    "keywords": "Namespace DataServices.Pipelines Classes AspnetCoreExtensions AzureFunctionExtensions Helper extensions for Azure Functions AzureFunctionPipeline A custom operation pipeline for an azure isolated process function app. OperationContext Operation context used for input and output for a filter in a pipeline. PipelineCompleteEventArgs Event args for pipeline complete. PipelineErrorEventArgs Event args for pipeline error events. WebPipeline A custom operation pipeline for a ASPNET Web API. Interfaces IPipeline<TRequest, TResponse> Enums StatusType Requirement status for execution of a filter or channel."
  },
  "reference/DataServices.Pipelines.IPipeline-2.html": {
    "href": "reference/DataServices.Pipelines.IPipeline-2.html",
    "title": "Interface IPipeline<TRequest, TResponse> | Title",
    "keywords": "Interface IPipeline<TRequest, TResponse> Namespace : DataServices.Pipelines Assembly : DataServices.dll Syntax public interface IPipeline<TRequest, TResponse> Type Parameters Name Description TRequest TResponse Properties View Source Id Gets the unique identifier of the pipeline instance. Declaration string Id { get; } Property Value Type Description String View Source Name Gets the name for the pipeline. Declaration string Name { get; } Property Value Type Description String Methods View Source ExecuteAsync(TRequest) Executes the pipeline. Declaration Task<TResponse> ExecuteAsync(TRequest request) Parameters Type Name Description TRequest request Request to start to the pipeline. Returns Type Description Task <TResponse> Response message to be sent to caller. Events View Source OnComplete Event that signals the pipeline as completed. Declaration event EventHandler<PipelineCompleteEventArgs> OnComplete Event Type Type Description EventHandler < PipelineCompleteEventArgs > View Source OnError Event that signals an error in the pipeline. Declaration event EventHandler<PipelineErrorEventArgs> OnError Event Type Type Description EventHandler < PipelineErrorEventArgs >"
  },
  "reference/DataServices.Pipelines.OperationContext.html": {
    "href": "reference/DataServices.Pipelines.OperationContext.html",
    "title": "Class OperationContext | Title",
    "keywords": "Class OperationContext Operation context used for input and output for a filter in a pipeline. Inheritance Object OperationContext Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Pipelines Assembly : DataServices.dll Syntax public class OperationContext Constructors View Source OperationContext() Creates an instance of OperationContext Declaration public OperationContext() View Source OperationContext(HttpRequestMessage) Creates an instance of OperationContext Declaration public OperationContext(HttpRequestMessage message) Parameters Type Name Description HttpRequestMessage message Initial http request message Properties View Source Content Gets or sets the body content of an http request or response. Declaration public byte[] Content { get; set; } Property Value Type Description Byte [] View Source ContentString Gets or sets the body content of an http request or response as a string. Declaration public string ContentString { get; set; } Property Value Type Description String View Source Error Gets or sets an exception when a fatal error occurs processing the operation context Declaration public Exception Error { get; set; } Property Value Type Description Exception View Source IsFatal Gets or sets an indicator that processing of the operation context has a fatal error. Declaration public bool IsFatal { get; set; } Property Value Type Description Boolean View Source Properties Gets a dictionary of custom properties. Declaration public Dictionary<string, string> Properties { get; } Property Value Type Description Dictionary < String , String > View Source Request Gets or sets an http request. Declaration public HttpRequestMessage Request { get; set; } Property Value Type Description HttpRequestMessage View Source StatusCode Gets or sets the status code for an http response. Declaration public HttpStatusCode StatusCode { get; set; } Property Value Type Description HttpStatusCode Methods View Source UpdateFhirRequestUri(HttpMethod, String, String, String, String, String) Updates the request URI and method. Declaration public void UpdateFhirRequestUri(HttpMethod method, string routePrefix = null, string resource = null, string id = null, string operation = null, string version = null) Parameters Type Name Description HttpMethod method HTTP method, e.g., GET, POST, PUT, DELETE String routePrefix Route prefix of path, e.g., fhir. String resource Optional FHIR resource type. String id Optional FHIR Id String operation Optional FHIR operation String version Optional FHIR version View Source UpdateRequestUri(HttpMethod, String, String, String) Updates a generic request URI and method. Declaration public void UpdateRequestUri(HttpMethod method, string baseUrl, string path = null, string query = null) Parameters Type Name Description HttpMethod method HTTP method, e.g., GET, POST, PUT, DELETE String baseUrl Base url of the request exclusive of path or query. String path Optional path. String query Optional query. Extension Methods AzureFunctionExtensions.ConvertToHttpResponseData(OperationContext, HttpRequestData)"
  },
  "reference/DataServices.Pipelines.PipelineCompleteEventArgs.html": {
    "href": "reference/DataServices.Pipelines.PipelineCompleteEventArgs.html",
    "title": "Class PipelineCompleteEventArgs | Title",
    "keywords": "Class PipelineCompleteEventArgs Event args for pipeline complete. Inheritance Object EventArgs PipelineCompleteEventArgs Inherited Members EventArgs.Empty Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Pipelines Assembly : DataServices.dll Syntax public class PipelineCompleteEventArgs : EventArgs Constructors View Source PipelineCompleteEventArgs(String, String, OperationContext) Creates an instance of PipelineCompleteEventArgs. Declaration public PipelineCompleteEventArgs(string id, string name, OperationContext context) Parameters Type Name Description String id Instance ID of the pipeline. String name Name of pipeline. OperationContext context OperationContext Properties View Source Context Gets the OperationContext. Declaration public OperationContext Context { get; } Property Value Type Description OperationContext View Source Id Gets the instance ID of the pipeline. Declaration public string Id { get; } Property Value Type Description String View Source Name Gets the name of the pipeline. Declaration public string Name { get; } Property Value Type Description String"
  },
  "reference/DataServices.Pipelines.PipelineErrorEventArgs.html": {
    "href": "reference/DataServices.Pipelines.PipelineErrorEventArgs.html",
    "title": "Class PipelineErrorEventArgs | Title",
    "keywords": "Class PipelineErrorEventArgs Event args for pipeline error events. Inheritance Object PipelineErrorEventArgs Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Pipelines Assembly : DataServices.dll Syntax public class PipelineErrorEventArgs Constructors View Source PipelineErrorEventArgs(String, String, Exception) Creates an instance of PipelineErrorEventArgs. Declaration public PipelineErrorEventArgs(string id, string name, Exception error) Parameters Type Name Description String id Instance ID of the pipeline. String name Name of the pipeline. Exception error Exception thrown in the pipeline. Properties View Source Error Exception throw in the pipeline. Declaration public Exception Error { get; } Property Value Type Description Exception View Source Id Gets the instance ID of the pipeline. Declaration public string Id { get; } Property Value Type Description String View Source Name Gets the name of the pipeline. Declaration public string Name { get; } Property Value Type Description String"
  },
  "reference/DataServices.Pipelines.StatusType.html": {
    "href": "reference/DataServices.Pipelines.StatusType.html",
    "title": "Enum StatusType | Title",
    "keywords": "Enum StatusType Requirement status for execution of a filter or channel. Namespace : DataServices.Pipelines Assembly : DataServices.dll Syntax public enum StatusType Fields Name Description Any Execute regardless of whether OperationContext is faulted. Fault Execute only if OperationContext is faulted. Normal Execute only if OperationContext is not faulted."
  },
  "reference/DataServices.Pipelines.WebPipeline.html": {
    "href": "reference/DataServices.Pipelines.WebPipeline.html",
    "title": "Class WebPipeline | Title",
    "keywords": "Class WebPipeline A custom operation pipeline for a ASPNET Web API. Inheritance Object WebPipeline Implements IPipeline < HttpRequestMessage , HttpResponseMessage > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Pipelines Assembly : DataServices.dll Syntax public class WebPipeline : IPipeline<HttpRequestMessage, HttpResponseMessage> Constructors View Source WebPipeline(IInputFilterCollection, IInputChannelCollection, IBinding, IOutputFilterCollection, IOutputChannelCollection, TelemetryClient, ILogger<WebPipeline>) Creates an instance of WebPipeline. Declaration public WebPipeline(IInputFilterCollection inputFilters = null, IInputChannelCollection inputChannels = null, IBinding binding = null, IOutputFilterCollection outputFilters = null, IOutputChannelCollection outputChannels = null, TelemetryClient telemetryClient = null, ILogger<WebPipeline> logger = null) Parameters Type Name Description IInputFilterCollection inputFilters Optional collection of input filters. IInputChannelCollection inputChannels Optional cCollection of input channels. IBinding binding Optional binding. IOutputFilterCollection outputFilters Optional collection of output filters. IOutputChannelCollection outputChannels Optional collection of output channels. TelemetryClient telemetryClient Optional application insights telemetry client. ILogger < WebPipeline > logger Optional ILogger. Properties View Source Id Gets the unique ID of the pipeline instance. Declaration public string Id { get; } Property Value Type Description String View Source Name Gets the name of the pipeline. Declaration public string Name { get; } Property Value Type Description String Methods View Source ExecuteAsync(HttpRequestMessage) Executes the pipeline and returns a response for the caller. Declaration public async Task<HttpResponseMessage> ExecuteAsync(HttpRequestMessage request) Parameters Type Name Description HttpRequestMessage request Iniitial request from the Web service. Returns Type Description Task < HttpResponseMessage > Response for Web service. Events View Source OnComplete Signals an event when the pipeline completes. Declaration public event EventHandler<PipelineCompleteEventArgs> OnComplete Event Type Type Description EventHandler < PipelineCompleteEventArgs > View Source OnError Signals an event that an error occurred in the pipeline. Declaration public event EventHandler<PipelineErrorEventArgs> OnError Event Type Type Description EventHandler < PipelineErrorEventArgs > Implements IPipeline<TRequest, TResponse>"
  },
  "reference/DataServices.Protocol.FhirUriPath.html": {
    "href": "reference/DataServices.Protocol.FhirUriPath.html",
    "title": "Class FhirUriPath | Title",
    "keywords": "Class FhirUriPath Inheritance Object Uri FhirUriPath Implements ISerializable Inherited Members Uri.SchemeDelimiter Uri.UriSchemeFile Uri.UriSchemeFtp Uri.UriSchemeFtps Uri.UriSchemeGopher Uri.UriSchemeHttp Uri.UriSchemeHttps Uri.UriSchemeMailto Uri.UriSchemeNetPipe Uri.UriSchemeNetTcp Uri.UriSchemeNews Uri.UriSchemeNntp Uri.UriSchemeSftp Uri.UriSchemeSsh Uri.UriSchemeTelnet Uri.UriSchemeWs Uri.UriSchemeWss Uri.Canonicalize() Uri.CheckHostName(String) Uri.CheckSchemeName(String) Uri.CheckSecurity() Uri.Compare(Uri, Uri, UriComponents, UriFormat, StringComparison) Uri.Equals(Object) Uri.Escape() Uri.EscapeDataString(String) Uri.EscapeString(String) Uri.EscapeUriString(String) Uri.FromHex(Char) Uri.GetComponents(UriComponents, UriFormat) Uri.GetHashCode() Uri.GetLeftPart(UriPartial) Uri.GetObjectData(SerializationInfo, StreamingContext) Uri.HexEscape(Char) Uri.HexUnescape(String, Int32) Uri.IsBadFileSystemCharacter(Char) Uri.IsBaseOf(Uri) Uri.IsExcludedCharacter(Char) Uri.IsHexDigit(Char) Uri.IsHexEncoding(String, Int32) Uri.IsReservedCharacter(Char) Uri.IsWellFormedOriginalString() Uri.IsWellFormedUriString(String, UriKind) Uri.MakeRelative(Uri) Uri.MakeRelativeUri(Uri) Uri.Parse() Uri.ISerializable.GetObjectData(SerializationInfo, StreamingContext) Uri.ToString() Uri.TryCreate(String, UriCreationOptions, Uri) Uri.TryCreate(String, UriKind, Uri) Uri.TryCreate(Uri, String, Uri) Uri.TryCreate(Uri, Uri, Uri) Uri.Unescape(String) Uri.UnescapeDataString(String) Uri.AbsolutePath Uri.AbsoluteUri Uri.Authority Uri.DnsSafeHost Uri.Fragment Uri.Host Uri.HostNameType Uri.IdnHost Uri.IsAbsoluteUri Uri.IsDefaultPort Uri.IsFile Uri.IsLoopback Uri.IsUnc Uri.LocalPath Uri.OriginalString Uri.PathAndQuery Uri.Port Uri.Query Uri.Scheme Uri.Segments Uri.UserEscaped Uri.UserInfo Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : DataServices.Protocol Assembly : DataServices.dll Syntax public class FhirUriPath : Uri, ISerializable Constructors View Source FhirUriPath(String, String, String) Creates an instance of FhirPath. Declaration public FhirUriPath(string method, string requestUriString, string routePrefix = \"fhir\") Parameters Type Name Description String method HTTP method used in request. String requestUriString The request URI. String routePrefix Optional route prefix; default is 'fhir'. Properties View Source Id Gets or sets the FHIR id in the request URI. Declaration public string Id { get; set; } Property Value Type Description String View Source Method Gets or sets the HTTP method used with the request URI. Declaration public string Method { get; set; } Property Value Type Description String View Source NormalizedPath Gets the path of the request URI exclusive on route prefix. Declaration public string NormalizedPath { get; } Property Value Type Description String View Source Operation Gets or sets the FHIR operation in the request URI. Declaration public string Operation { get; set; } Property Value Type Description String View Source Path Gets the path of the request Uri. Declaration public string Path { get; } Property Value Type Description String View Source Resource Gets or sets the FHIR resource in the request URI. Declaration public string Resource { get; set; } Property Value Type Description String View Source RoutePrefix Gets or sets the route prefix. Declaration public string RoutePrefix { get; set; } Property Value Type Description String View Source Version Gets or sets the FHIR version in the request URI. Declaration public string Version { get; set; } Property Value Type Description String Methods View Source HasQueryParameter(String) Indicates whether a query string parameter is present in the request URI. Declaration public bool HasQueryParameter(string key) Parameters Type Name Description String key Returns Type Description Boolean Implements System.Runtime.Serialization.ISerializable Extension Methods UriExtensions.RemoveRoutePrefix(Uri, String)"
  },
  "reference/DataServices.Protocol.html": {
    "href": "reference/DataServices.Protocol.html",
    "title": "Namespace DataServices.Protocol | Title",
    "keywords": "Namespace DataServices.Protocol Classes FhirUriPath UriExtensions Extensions for URIs."
  },
  "reference/DataServices.Protocol.UriExtensions.html": {
    "href": "reference/DataServices.Protocol.UriExtensions.html",
    "title": "Class UriExtensions | Title",
    "keywords": "Class UriExtensions Extensions for URIs. Inheritance Object UriExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Protocol Assembly : DataServices.dll Syntax public static class UriExtensions Methods View Source RemoveRoutePrefix(Uri, String) Removes a route prefix in a URI. Declaration public static Uri RemoveRoutePrefix(this Uri uri, string routePrefix) Parameters Type Name Description Uri uri URI to remove route prefix. String routePrefix Route prefix to remove. Returns Type Description Uri"
  },
  "reference/DataServices.Security.Authenticator.html": {
    "href": "reference/DataServices.Security.Authenticator.html",
    "title": "Class Authenticator | Title",
    "keywords": "Class Authenticator Authenticator class for acquiring access tokens from Azure Active Directory. Inheritance Object Authenticator Implements IAuthenticator Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Security Assembly : DataServices.dll Syntax public class Authenticator : IAuthenticator Constructors View Source Authenticator(IOptions<ServiceIdentityOptions>) Creates an instance of Authenticator. Declaration public Authenticator(IOptions<ServiceIdentityOptions> options) Parameters Type Name Description IOptions < ServiceIdentityOptions > options ServiceIdentity options used by the authenticator. Properties View Source RequiresOnBehalfOf Gets a indication whether OBO is required for access token acquisition. Declaration public bool RequiresOnBehalfOf { get; } Property Value Type Description Boolean Methods View Source AquireTokenForClientAsync(String, TokenCredential, String[], String, String, String, CancellationToken) Gets an access token via OAuth from Azure Active Directory. Declaration public async Task<string> AquireTokenForClientAsync(string resource, TokenCredential credential, string[] scopes = null, string parentRequestId = null, string claims = null, string tenantId = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String resource The resource to access. TokenCredential credential Represents a credential capable of providing an OAuth token. String [] scopes Scopes required for the token. String parentRequestId The ClientRequestId of the request requiring a token for authentication, if applicable. String claims Additional claims to be included in the token. See https://openid.net/specs/openid-connect-core-1_0-final.html#ClaimsParameter for more information on format and content. String tenantId The tenantId to be included in the token request. CancellationToken cancellationToken Cancellation token. Returns Type Description Task < String > Access token. View Source AquireTokenForClientAsync(String, String[], String, String, String, CancellationToken) Gets an access token via OAuth from Azure Active Directory. Declaration public async Task<string> AquireTokenForClientAsync(string resource, string[] scopes = null, string parentRequestId = null, string claims = null, string userAssertion = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String resource Resource requesting access. String [] scopes Scopes required for the token. String parentRequestId The ClientRequestId of the request requiring a token for authentication, if applicable. String claims Additional claims to be included in the token. See https://openid.net/specs/openid-connect-core-1_0-final.html#ClaimsParameter for more information on format and content. String userAssertion Access token required when using OnBehalfOf. CancellationToken cancellationToken Cancellation token. Returns Type Description Task < String > Access token. Exceptions Type Condition ArgumentOutOfRangeException Implements IAuthenticator"
  },
  "reference/DataServices.Security.ClientCredentialType.html": {
    "href": "reference/DataServices.Security.ClientCredentialType.html",
    "title": "Enum ClientCredentialType | Title",
    "keywords": "Enum ClientCredentialType Client credential type use when acquiring access tokens. Namespace : DataServices.Security Assembly : DataServices.dll Syntax public enum ClientCredentialType Fields Name Description Certificate ClientSecret ManagedIdentity OnBehalfOfUsingCertificate OnBehalfOfUsingClientSecert"
  },
  "reference/DataServices.Security.html": {
    "href": "reference/DataServices.Security.html",
    "title": "Namespace DataServices.Security | Title",
    "keywords": "Namespace DataServices.Security Classes Authenticator Authenticator class for acquiring access tokens from Azure Active Directory. ServiceIdentityOptions Service identity options for acquiring access tokens. Interfaces IAuthenticator Interface to be implemented by class that acquires access tokens from Azure Active Directory. Enums ClientCredentialType Client credential type use when acquiring access tokens."
  },
  "reference/DataServices.Security.IAuthenticator.html": {
    "href": "reference/DataServices.Security.IAuthenticator.html",
    "title": "Interface IAuthenticator | Title",
    "keywords": "Interface IAuthenticator Interface to be implemented by class that acquires access tokens from Azure Active Directory. Namespace : DataServices.Security Assembly : DataServices.dll Syntax public interface IAuthenticator Properties View Source RequiresOnBehalfOf Gets an indicator that determines with token acquisition of OnBehalfOf, i.e., constrained delegation. Declaration bool RequiresOnBehalfOf { get; } Property Value Type Description Boolean Methods View Source AquireTokenForClientAsync(String, TokenCredential, String[], String, String, String, CancellationToken) Gets an access token via OAuth from Azure Active Directory. Declaration Task<string> AquireTokenForClientAsync(string resource, TokenCredential credential, string[] scopes = null, string parentRequestId = null, string claims = null, string tenantId = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String resource The resource to access. TokenCredential credential Represents a credential capable of providing an OAuth token. String [] scopes Scopes required for the token. String parentRequestId The ClientRequestId of the request requiring a token for authentication, if applicable. String claims Additional claims to be included in the token. See https://openid.net/specs/openid-connect-core-1_0-final.html#ClaimsParameter for more information on format and content. String tenantId The tenantId to be included in the token request. CancellationToken cancellationToken Cancellation token. Returns Type Description Task < String > Access token. View Source AquireTokenForClientAsync(String, String[], String, String, String, CancellationToken) Gets an access token via OAuth from Azure Active Directory. Declaration Task<string> AquireTokenForClientAsync(string resource, string[] scopes = null, string parentRequestId = null, string claims = null, string userAssertion = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String resource Resource requesting access. String [] scopes Scopes required for the token. String parentRequestId The ClientRequestId of the request requiring a token for authentication, if applicable. String claims Additional claims to be included in the token. See https://openid.net/specs/openid-connect-core-1_0-final.html#ClaimsParameter for more information on format and content. String userAssertion Access token required when using OnBehalfOf. CancellationToken cancellationToken Cancellation token. Returns Type Description Task < String > Access token."
  },
  "reference/DataServices.Security.ServiceIdentityOptions.html": {
    "href": "reference/DataServices.Security.ServiceIdentityOptions.html",
    "title": "Class ServiceIdentityOptions | Title",
    "keywords": "Class ServiceIdentityOptions Service identity options for acquiring access tokens. Inheritance Object ServiceIdentityOptions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Security Assembly : DataServices.dll Syntax public class ServiceIdentityOptions Properties View Source Certficate Gets or sets an X509v3 certificate used for client identity. Declaration public X509Certificate2 Certficate { get; set; } Property Value Type Description X509Certificate2 View Source ClientId Gets or sets AAD client id for authentication. Declaration public string ClientId { get; set; } Property Value Type Description String Remarks Property can be omitted with using either (i) MSI or (ii) X509 certificate for authentication View Source ClientSecret Gets or sets AAD client secret for authentication. Declaration public string ClientSecret { get; set; } Property Value Type Description String Remarks Property can be omitted with using either (i) MSI or (ii) X509 certificate for authentication View Source CredentialType Gets or sets the type of client credential. Declaration public ClientCredentialType? CredentialType { get; set; } Property Value Type Description Nullable < ClientCredentialType > View Source TenantId Gets or sets Tenant ID used for AAD authentication. Declaration public string TenantId { get; set; } Property Value Type Description String"
  },
  "reference/DataServices.Storage.html": {
    "href": "reference/DataServices.Storage.html",
    "title": "Namespace DataServices.Storage | Title",
    "keywords": "Namespace DataServices.Storage Classes StorageBlob Allows simple access to Azure Blob Storage. StorageFiles Allows simple access to Azure File Storage. StorageLake Allows simple access to Azure Data Lake. StorageQueue Allows simple access to Azure storage queues. StorageTable Allows simple access to Azure storage tables."
  },
  "reference/DataServices.Storage.StorageBlob.html": {
    "href": "reference/DataServices.Storage.StorageBlob.html",
    "title": "Class StorageBlob | Title",
    "keywords": "Class StorageBlob Allows simple access to Azure Blob Storage. Inheritance Object StorageBlob Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Storage Assembly : DataServices.Storage.dll Syntax public class StorageBlob Constructors View Source StorageBlob(Nullable<Int64>, Nullable<Int32>, Nullable<Int32>, ILogger) Creates an instance of StorageBlob. Declaration public StorageBlob(long? initialTransferSize, int? maxConcurrency, int? maxTransferSize, ILogger logger = null) Parameters Type Name Description Nullable < Int64 > initialTransferSize Optional size of the first range request in bytes. Blobs smaller than this limit will be downloaded in a single request. Blobs larger than this limit will continue being downloaded in chunks of size maxTransfersize. Nullable < Int32 > maxConcurrency Optional maximum number of workers that may be used in a parallel transfer. Nullable < Int32 > maxTransferSize Optional The maximum length of an transfer in bytes. ILogger logger Optional ILogger. View Source StorageBlob(String, BlobClientOptions, Nullable<Int64>, Nullable<Int32>, Nullable<Int32>, ILogger) Creates an instance of StorageBlob. Declaration public StorageBlob(string connectionString, BlobClientOptions options, long? initialTransferSize = null, int? maxConcurrency = null, int? maxTransferSize = null, ILogger logger = null) Parameters Type Name Description String connectionString Azure storage connection string. BlobClientOptions options Blob client options. Nullable < Int64 > initialTransferSize Optional size of the first range request in bytes. Blobs smaller than this limit will be downloaded in a single request. Blobs larger than this limit will continue being downloaded in chunks of size maxTransfersize. Nullable < Int32 > maxConcurrency Optional maximum number of workers that may be used in a parallel transfer. Nullable < Int32 > maxTransferSize Optional The maximum length of an transfer in bytes. ILogger logger Optional ILogger. View Source StorageBlob(String, Nullable<Int64>, Nullable<Int32>, Nullable<Int32>, ILogger) Creates an instance of StorageBlob Declaration public StorageBlob(string connectionString, long? initialTransferSize = null, int? maxConcurrency = null, int? maxTransferSize = null, ILogger logger = null) Parameters Type Name Description String connectionString Azure storage connection string. Nullable < Int64 > initialTransferSize Optional size of the first range request in bytes. Blobs smaller than this limit will be downloaded in a single request. Blobs larger than this limit will continue being downloaded in chunks of size maxTransfersize. Nullable < Int32 > maxConcurrency Optional maximum number of workers that may be used in a parallel transfer. Nullable < Int32 > maxTransferSize Optional The maximum length of an transfer in bytes. ILogger logger Optional ILogger. View Source StorageBlob(Uri, AzureSasCredential, BlobClientOptions, Nullable<Int64>, Nullable<Int32>, Nullable<Int32>, ILogger) Creates an instance of StorageBlob. Declaration public StorageBlob(Uri serviceUri, AzureSasCredential credential, BlobClientOptions options = null, long? initialTransferSize = null, int? maxConcurrency = null, int? maxTransferSize = null, ILogger logger = null) Parameters Type Name Description Uri serviceUri Service URI AzureSasCredential credential SAS credentials for authentication. BlobClientOptions options Optional blob client options. Nullable < Int64 > initialTransferSize Optional size of the first range request in bytes. Blobs smaller than this limit will be downloaded in a single request. Blobs larger than this limit will continue being downloaded in chunks of size maxTransfersize. Nullable < Int32 > maxConcurrency Optional maximum number of workers that may be used in a parallel transfer. Nullable < Int32 > maxTransferSize Optional The maximum length of an transfer in bytes. ILogger logger Optional ILogger. View Source StorageBlob(Uri, TokenCredential, BlobClientOptions, Nullable<Int64>, Nullable<Int32>, Nullable<Int32>, ILogger) Creates an instance of StorageBlob. Declaration public StorageBlob(Uri serviceUri, TokenCredential credentials, BlobClientOptions options = null, long? initialTransferSize = null, int? maxConcurrency = null, int? maxTransferSize = null, ILogger logger = null) Parameters Type Name Description Uri serviceUri Service URI. TokenCredential credentials Token credentials for authentication. BlobClientOptions options Optional Blob client options. Nullable < Int64 > initialTransferSize Optional size of the first range request in bytes. Blobs smaller than this limit will be downloaded in a single request. Blobs larger than this limit will continue being downloaded in chunks of size maxTransfersize. Nullable < Int32 > maxConcurrency Optional maximum number of workers that may be used in a parallel transfer. Nullable < Int32 > maxTransferSize Optional The maximum length of an transfer in bytes. ILogger logger Optional ILogger. View Source StorageBlob(Uri, BlobClientOptions, Nullable<Int64>, Nullable<Int32>, Nullable<Int32>, ILogger) Creates an instance of StorageBlob. Declaration public StorageBlob(Uri serviceUri, BlobClientOptions options = null, long? initialTransferSize = null, int? maxConcurrency = null, int? maxTransferSize = null, ILogger logger = null) Parameters Type Name Description Uri serviceUri Service URI. BlobClientOptions options Optional blob client options. Nullable < Int64 > initialTransferSize Optional size of the first range request in bytes. Blobs smaller than this limit will be downloaded in a single request. Blobs larger than this limit will continue being downloaded in chunks of size maxTransfersize. Nullable < Int32 > maxConcurrency Optional maximum number of workers that may be used in a parallel transfer. Nullable < Int32 > maxTransferSize Optional The maximum length of an transfer in bytes. ILogger logger Optional ILogger. View Source StorageBlob(Uri, StorageSharedKeyCredential, BlobClientOptions, Nullable<Int64>, Nullable<Int32>, Nullable<Int32>, ILogger) Creates an instance of StorageBlob. Declaration public StorageBlob(Uri serviceUri, StorageSharedKeyCredential credential, BlobClientOptions options = null, long? initialTransferSize = null, int? maxConcurrency = null, int? maxTransferSize = null, ILogger logger = null) Parameters Type Name Description Uri serviceUri Service URI. StorageSharedKeyCredential credential Shared key credential for authentication. BlobClientOptions options Optional blob client options. Nullable < Int64 > initialTransferSize Optional size of the first range request in bytes. Blobs smaller than this limit will be downloaded in a single request. Blobs larger than this limit will continue being downloaded in chunks of size maxTransfersize. Nullable < Int32 > maxConcurrency Optional maximum number of workers that may be used in a parallel transfer. Nullable < Int32 > maxTransferSize Optional The maximum length of an transfer in bytes. ILogger logger Optional ILogger. Methods View Source ContainerExistsAsync(String, CancellationToken) Indicates whether a blob container exists. Declaration public async Task<bool> ContainerExistsAsync(string containerName, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String containerName Name of container. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < Boolean > True if container exists; otherwise false. View Source CreateContainerIfNotExistsAsync(String, PublicAccessType) Creates a blob storage container if it does not already exist. Declaration public async Task<Response<BlobContainerInfo>> CreateContainerIfNotExistsAsync(string containerName, PublicAccessType publicAccess = PublicAccessType.None) Parameters Type Name Description String containerName Name of container to create. PublicAccessType publicAccess Specifies whether data in the container may be accessed publicly and the level of access.; default is \"None\". Returns Type Description Task < Response < BlobContainerInfo >> BlobContainerInfo View Source DeleteBlobAsync(String, String) Deletes a blob from a container in blob storage. Declaration public async Task<bool> DeleteBlobAsync(string containerName, string blobName) Parameters Type Name Description String containerName Name of container where blob is written. String blobName Name of blob to delete. Returns Type Description Task < Boolean > True if blob is deleted; otherwise false. View Source DeleteContainerIfExistsAsync(String, BlobRequestConditions, CancellationToken) Deletes a blob storage container if it exists. Declaration public async Task<bool> DeleteContainerIfExistsAsync(string containerName, BlobRequestConditions conditions = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String containerName Name of container to delete. BlobRequestConditions conditions Optional blob lease access conditions for a container or blob. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < Boolean > True if container deleted or did not exist; otherwise false. View Source DownloadAppendBlobAsync(String, String, BlobRequestConditions, CancellationToken) Downloads an append blob from a container and returns the result. Declaration public async Task<BlobDownloadResult> DownloadAppendBlobAsync(string containerName, string blobName, BlobRequestConditions conditions = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String containerName Name of container where blob exists. String blobName Name of blob to read. BlobRequestConditions conditions Optional blob lease access conditions for a container or blob. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < BlobDownloadResult > BlobDownloadResult View Source DownloadAppendBlobToAsync(String, String, Stream, BlobRequestConditions, CancellationToken) Downloads an append blob from blob storage and returns the response. Declaration public async Task<Response> DownloadAppendBlobToAsync(string containerName, string blobName, Stream destination, BlobRequestConditions conditions = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String containerName Name of container where blob exists. String blobName Name of blob to read. Stream destination Stream to write. BlobRequestConditions conditions Optional blob lease access conditions for a container or blob. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < Response > Response View Source DownloadAppendBlobToAsync(String, String, String, BlobRequestConditions, CancellationToken) Downloads an append blob from a container and returns the result. Declaration public async Task<Response> DownloadAppendBlobToAsync(string containerName, string blobName, string path, BlobRequestConditions conditions = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String containerName Name of container where blob exists. String blobName Name of blob to read. String path Path to write the downloaded blob to the local file system. BlobRequestConditions conditions Optional blob lease access conditions for a container or blob. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < Response > Response View Source DownloadBlockBlobAsync(String, String, BlobRequestConditions, CancellationToken) Downloads a block blob from a container and returns the result. Declaration public async Task<BlobDownloadResult> DownloadBlockBlobAsync(string containerName, string blobName, BlobRequestConditions conditions = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String containerName Name of container where blob exists. String blobName Name of blob to read. BlobRequestConditions conditions Optional blob lease access conditions for a container or blob. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < BlobDownloadResult > BlobDownloadResult View Source DownloadBlockBlobToAsync(String, String, Stream, BlobRequestConditions, CancellationToken) Downloads a block blob from blob storage and returns the response. Declaration public async Task<Response> DownloadBlockBlobToAsync(string containerName, string blobName, Stream destination, BlobRequestConditions conditions = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String containerName Name of container where blob exists. String blobName Name of blob to read. Stream destination Stream to write. BlobRequestConditions conditions Optional blob lease access conditions for a container or blob. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < Response > Response View Source DownloadBlockBlobToAsync(String, String, String, BlobRequestConditions, CancellationToken) Downloads a block blob and writes a file to the local file system. Declaration public async Task<Response> DownloadBlockBlobToAsync(string containerName, string blobName, string path, BlobRequestConditions conditions = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String containerName Name of container where blob exists. String blobName Name of blob to read. String path Path to write the downloaded blob to the local file system. BlobRequestConditions conditions Optional blob lease access conditions for a container or blob. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < Response > Response View Source GetBlobPropertiesAsync(String, String, BlobRequestConditions, CancellationToken) Gets properties of a blob in a container. Declaration public async Task<BlobProperties> GetBlobPropertiesAsync(string containerName, string blobName, BlobRequestConditions conditions = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String containerName Name of container where blob exists. String blobName Name of blob to get properties. BlobRequestConditions conditions Optional blob lease access conditions for a container or blob. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < BlobProperties > BlobProperties View Source ListBlobMetadataInContainerAsync(String, BlobTraits, BlobStates, String, CancellationToken) Gets a list of blob metadata in a container. Declaration public async Task<IDictionary<string, string>[]> ListBlobMetadataInContainerAsync(string containerName, BlobTraits traits = BlobTraits.None, BlobStates states = BlobStates.None, string prefix = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String containerName Name of container to get metadata. BlobTraits traits Optional specifies trait options for shaping the blob containers.; default is \"None\". BlobStates states Optional specifies states options for shaping the blob containers; default is \"None\". String prefix Optional specifies a string that filters the results to return only containers whose name begins with the specified prefix. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < IDictionary < String , String >[]> Array of Dictionary<string,string>[] containing metadata. View Source ListBlobsAsync(String, Nullable<Int32>, BlobTraits, BlobStates, String, CancellationToken) Gets a list of blob names in a storage container. Declaration public async Task<List<string>> ListBlobsAsync(string containerName, int? segmentSize = null, BlobTraits traits = BlobTraits.None, BlobStates states = BlobStates.None, string prefix = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String containerName Name of container to return blob names. Nullable < Int32 > segmentSize Optional maximum number of blob names to be returned. BlobTraits traits Optional specifies trait options for shaping the blob containers.; default is \"None\". BlobStates states Optional specifies states options for shaping the blob containers; default is \"None\". String prefix Optional specifies a string that filters the results to return only containers whose name begins with the specified prefix. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < List < String >> List of blob names in container. View Source ListContainers(BlobContainerTraits, BlobContainerStates, String, CancellationToken) Gets a list of pageable container names. Declaration public AsyncPageable<BlobContainerItem> ListContainers(BlobContainerTraits traits = BlobContainerTraits.None, BlobContainerStates states = BlobContainerStates.None, string prefix = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description BlobContainerTraits traits Optional specifies trait options for shaping the blob containers.; default is \"None\". BlobContainerStates states Optional specifies states options for shaping the blob containers; default is \"None\". String prefix Optional specifies a string that filters the results to return only containers whose name begins with the specified prefix. CancellationToken cancellationToken Optional cancellation token. Returns Type Description AsyncPageable < BlobContainerItem > AsyncPageable<BlobContainerItem> View Source ReadAppendBlobAsync(String, String, BlobOpenReadOptions, CancellationToken) Gets the contents of an append blob and returns as an array of bytes. Declaration public async Task<byte[]> ReadAppendBlobAsync(string containerName, string blobName, BlobOpenReadOptions options = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String containerName Name of container where blob resides. String blobName Name of the blob to read. BlobOpenReadOptions options Optional blob open read options. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < Byte []> Array of bytes of the blob content. View Source ReadBlockBlobAsync(String, String, BlobOpenReadOptions, CancellationToken) Gets the contents of a blob and returns as an array of bytes. Declaration public async Task<byte[]> ReadBlockBlobAsync(string containerName, string blobName, BlobOpenReadOptions options = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String containerName Name of container where blob resides. String blobName Name of the blob to read. BlobOpenReadOptions options Optional blob open read options. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < Byte []> Array of bytes of the blob content. View Source ReadPageBlobAsync(String, String, BlobOpenReadOptions, CancellationToken) Gets the contents of a page blob and returns as an array of bytes. Declaration public async Task<byte[]> ReadPageBlobAsync(string containerName, string blobName, BlobOpenReadOptions options = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String containerName Name of container where blob resides. String blobName Name of the blob to read. BlobOpenReadOptions options Optional blob open read options. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < Byte []> Array of bytes of the blob content. View Source UploadBlobAsync(String, String, String, String, IDictionary<String, String>, BlobRequestConditions, CancellationToken) Uploads a blob from the local file system to a blob storage container. Declaration public async Task UploadBlobAsync(string containerName, string blobName, string contentType, string path, IDictionary<string, string> metadata = null, BlobRequestConditions conditions = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String containerName Name of container where blob is written. String blobName Name of blob to write. String contentType Content type of blob. String path Path to local file to upload. IDictionary < String , String > metadata Optional blob metadata. BlobRequestConditions conditions Optional blob lease access conditions for a container or blob. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task Task View Source WriteAppendBlobAsync(String, String, String, Byte[], AppendBlobOpenWriteOptions, AppendBlobCreateOptions, IDictionary<String, String>, BlobRequestConditions, CancellationToken) Writes an append blob to a storage container. Declaration public async Task WriteAppendBlobAsync(string containerName, string blobName, string contentType, byte[] content, AppendBlobOpenWriteOptions writeOptions = null, AppendBlobCreateOptions createOptions = null, IDictionary<string, string> metadata = null, BlobRequestConditions conditions = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String containerName Name of container where blob is written. String blobName Name of blob to write. String contentType Content type of blob. Byte [] content Content of the blob to write. AppendBlobOpenWriteOptions writeOptions Optional append blob open write options. AppendBlobCreateOptions createOptions Optional append blob create options. IDictionary < String , String > metadata Optional blob metadata. BlobRequestConditions conditions Optional blob lease access conditions for a container or blob. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task Task View Source WriteAppendBlobAsync(String, String, String, Stream, AppendBlobOpenWriteOptions, AppendBlobCreateOptions, IDictionary<String, String>, BlobRequestConditions, CancellationToken) Writes an append blob to a storage container. Declaration public async Task WriteAppendBlobAsync(string containerName, string blobName, string contentType, Stream content, AppendBlobOpenWriteOptions writeOptions = null, AppendBlobCreateOptions createOptions = null, IDictionary<string, string> metadata = null, BlobRequestConditions conditions = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String containerName Name of container where blob is written. String blobName Name of blob to write. String contentType Content type of blob. Stream content Content stream of the blob to write. AppendBlobOpenWriteOptions writeOptions Optional append blob open write options. AppendBlobCreateOptions createOptions Optional append blob create options. IDictionary < String , String > metadata Optional blob metadata. BlobRequestConditions conditions Optional blob lease access conditions for a container or blob. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task Task View Source WriteBlockBlobAsync(String, String, String, Byte[], BlockBlobOpenWriteOptions, IDictionary<String, String>, BlobRequestConditions, CancellationToken) Writes a block blob to a container. Declaration public async Task WriteBlockBlobAsync(string containerName, string blobName, string contentType, byte[] content, BlockBlobOpenWriteOptions options = null, IDictionary<string, string> metadata = null, BlobRequestConditions conditions = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String containerName Name of container where blob is written. String blobName Name of blob to write. String contentType Content type of blob. Byte [] content Content of the blob to write. BlockBlobOpenWriteOptions options Optional block blob open write options. IDictionary < String , String > metadata Optional metadata for the blob. BlobRequestConditions conditions Optional blob lease access conditions for a container or blob. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task Task View Source WriteBlockBlobAsync(String, String, String, Stream, BlockBlobOpenWriteOptions, IDictionary<String, String>, BlobRequestConditions, CancellationToken) Writes a block blob to a container. Declaration public async Task WriteBlockBlobAsync(string containerName, string blobName, string contentType, Stream content, BlockBlobOpenWriteOptions options = null, IDictionary<string, string> metadata = null, BlobRequestConditions conditions = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String containerName Name of container where blob is written. String blobName Name of blob to write. String contentType Content type of blob. Stream content Content stream of the blob to write. BlockBlobOpenWriteOptions options Optional block blob open write options. IDictionary < String , String > metadata Optional metadata for the blob. BlobRequestConditions conditions Optional blob lease access conditions for a container or blob. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task Task"
  },
  "reference/DataServices.Storage.StorageFiles.html": {
    "href": "reference/DataServices.Storage.StorageFiles.html",
    "title": "Class StorageFiles | Title",
    "keywords": "Class StorageFiles Allows simple access to Azure File Storage. Inheritance Object StorageFiles Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Storage Assembly : DataServices.Storage.dll Syntax public class StorageFiles Constructors View Source StorageFiles(ILogger) Declaration protected StorageFiles(ILogger logger = null) Parameters Type Name Description ILogger logger View Source StorageFiles(String, ShareClientOptions, ILogger) Creates an instance of StorageFiles. Declaration public StorageFiles(string connectionString, ShareClientOptions options, ILogger logger = null) Parameters Type Name Description String connectionString Azure storage connection string. ShareClientOptions options Client options that define the transport pipeline policies for authentication, retries, etc., that are applied to every request. ILogger logger Optional ILogger. View Source StorageFiles(String, ILogger) Creates an instance of StorageFiles. Declaration public StorageFiles(string connectionString, ILogger logger = null) Parameters Type Name Description String connectionString Azure storage connection string. ILogger logger Optional ILogger. View Source StorageFiles(Uri, AzureSasCredential, ShareClientOptions, ILogger) Creates an instance of StorageFiles. Declaration public StorageFiles(Uri serviceUri, AzureSasCredential credentials, ShareClientOptions options, ILogger logger = null) Parameters Type Name Description Uri serviceUri Uri referencing the file service. AzureSasCredential credentials The shared access signature credential used to sign requests. ShareClientOptions options Optional client options that define the transport pipeline policies for authentication, retries, etc., that are applied to every request. ILogger logger Optional ILogger. View Source StorageFiles(Uri, ShareClientOptions, ILogger) Creates an instance of StorageFiles. Declaration public StorageFiles(Uri serviceUri, ShareClientOptions options = null, ILogger logger = null) Parameters Type Name Description Uri serviceUri Uri referencing the file service. ShareClientOptions options Optional client options that define the transport pipeline policies for authentication, retries, etc., that are applied to every request. ILogger logger Optional ILogger. View Source StorageFiles(Uri, StorageSharedKeyCredential, ShareClientOptions, ILogger) Declaration public StorageFiles(Uri serviceUri, StorageSharedKeyCredential credentials, ShareClientOptions options = null, ILogger logger = null) Parameters Type Name Description Uri serviceUri Uri referencing the file service. StorageSharedKeyCredential credentials The shared key credential used to sign requests. ShareClientOptions options Client options that define the transport pipeline policies for authentication, retries, etc., that are applied to every request. ILogger logger Optionak ILogger. Methods View Source CreateDirectoryIfNotExistsAsync(String, String, IDictionary<String, String>, FileSmbProperties, String, CancellationToken) Creates a directory in a share if the directory does not already exist. Declaration public async Task<ShareDirectoryInfo> CreateDirectoryIfNotExistsAsync(string shareName, string directoryName, IDictionary<string, string> metadata = null, FileSmbProperties smbProperties = null, string filePermission = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String shareName Name of share where directory should be created. String directoryName Name of directory to create. IDictionary < String , String > metadata Optional metadata. FileSmbProperties smbProperties Optional SMB properties. String filePermission Optional file permissions. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < ShareDirectoryInfo > ShareDirectoryInfo View Source CreateShareIfNotExistsAsync(String, ShareCreateOptions, CancellationToken) Creates a file share is one does not already exist. Declaration public async Task<ShareInfo> CreateShareIfNotExistsAsync(string shareName, ShareCreateOptions options = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String shareName Name of share to create. ShareCreateOptions options Optional share create options. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < ShareInfo > ShareInfo View Source DeleteDirectoryIfExistsAsync(String, String, CancellationToken) Deletes a directory in a share if the directory already exists. Declaration public async Task<bool> DeleteDirectoryIfExistsAsync(string shareName, string directoryName, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String shareName Name of share where directory exists. String directoryName Name of directory to delete. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < Boolean > True if the directory is deleted or does not exist; otherwise false. View Source DeleteFileIfExistsAsync(String, String, String, ShareFileRequestConditions, CancellationToken) Deletes a file in directory of a share if it already exists. Declaration public async Task<bool> DeleteFileIfExistsAsync(string shareName, string directoryName, string fileName, ShareFileRequestConditions conditions = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String shareName Name of share where directory exists. String directoryName Name of directory that contains the file. String fileName File name to delete. ShareFileRequestConditions conditions Optional share file request options. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < Boolean > True if the file is deleted or does not exist; otherwise false. View Source DeleteShareIfExistsAsync(String, ShareDeleteOptions, CancellationToken) Deletes an Azure file share if exists. Declaration public async Task<bool> DeleteShareIfExistsAsync(string shareName, ShareDeleteOptions options = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String shareName Name of share to delete. ShareDeleteOptions options Optional share delete options. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < Boolean > True if share is deleted; otherwise false. View Source ListDirectoriesAsync(String, String, String, CancellationToken) Gets a list of sub-directories in directory of a share. Declaration public async Task<List<string>> ListDirectoriesAsync(string shareName, string directoryName, string prefix = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String shareName Name of share to read directory names. String directoryName Name of parent directory to read names of sub-directories. String prefix Optional prefix. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < List < String >> Sub-directory names as a list of strings. View Source ListFilesAsync(String, String, String, CancellationToken) Gets a list of file names from a directory in a share. Declaration public async Task<List<string>> ListFilesAsync(string shareName, string directoryName, string prefix = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String shareName Name of share where directory exists. String directoryName Name of directory to read list of files. String prefix Optional prefix. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < List < String >> File names in directory as list of strings. View Source ReadFileAsync(String, String, String, ShareFileOpenReadOptions, CancellationToken) Reads a file from directory in a share and returns the result. Declaration public async Task<byte[]> ReadFileAsync(string shareName, string directoryName, string fileName, ShareFileOpenReadOptions options = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String shareName Name of share where directory exists. String directoryName Name of directory where file exists. String fileName Name of file to read. ShareFileOpenReadOptions options Optional share file open read options. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < Byte []> Array of bytes of the file content. View Source WriteFileAsync(String, String, String, Byte[], ShareFileOpenWriteOptions, CancellationToken) Writes a file to a directory in a share. Declaration public async Task WriteFileAsync(string shareName, string directoryName, string fileName, byte[] content, ShareFileOpenWriteOptions options = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String shareName Name of share where directory exists. String directoryName Name of directory to write the file. String fileName Name of file to write. Byte [] content Content of the file to write. ShareFileOpenWriteOptions options Optional share file open write options. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task Task"
  },
  "reference/DataServices.Storage.StorageLake.html": {
    "href": "reference/DataServices.Storage.StorageLake.html",
    "title": "Class StorageLake | Title",
    "keywords": "Class StorageLake Allows simple access to Azure Data Lake. Inheritance Object StorageLake Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Storage Assembly : DataServices.Storage.dll Syntax public class StorageLake Constructors View Source StorageLake(ILogger) Declaration protected StorageLake(ILogger logger = null) Parameters Type Name Description ILogger logger View Source StorageLake(String, DataLakeClientOptions, ILogger) Creates an instance of StorageLake. Declaration public StorageLake(string connectionString, DataLakeClientOptions options, ILogger logger = null) Parameters Type Name Description String connectionString A connection string includes the authentication information required for your application to access data in an Azure Storage account at runtime. DataLakeClientOptions options Client options that define the transport pipeline policies for authentication, retries, etc., that are applied to every request. ILogger logger Optional ILogger. View Source StorageLake(String, ILogger) Creates an instance of StorageLake. Declaration public StorageLake(string connectionString, ILogger logger = null) Parameters Type Name Description String connectionString A connection string includes the authentication information required for your application to access data in an Azure Storage account at runtime. ILogger logger Optional ILogger. View Source StorageLake(Uri, AzureSasCredential, DataLakeClientOptions, ILogger) Creates an instance of StorageLake. Declaration public StorageLake(Uri serviceUri, AzureSasCredential credential, DataLakeClientOptions options, ILogger logger = null) Parameters Type Name Description Uri serviceUri A Uri referencing the Data Lake service AzureSasCredential credential The shared access signature credential used to sign requests. DataLakeClientOptions options Client options that define the transport pipeline policies for authentication, retries, etc., that are applied to every request. ILogger logger Optional ILogger. View Source StorageLake(Uri, AzureSasCredential, ILogger) Creates an instance of StorageLake. Declaration public StorageLake(Uri serviceUri, AzureSasCredential credential, ILogger logger = null) Parameters Type Name Description Uri serviceUri A Uri referencing the Data Lake service AzureSasCredential credential The shared access signature credential used to sign requests. ILogger logger Optional ILogger. View Source StorageLake(Uri, TokenCredential, DataLakeClientOptions, ILogger) Creates an instance of StorageLake. Declaration public StorageLake(Uri serviceUri, TokenCredential credential, DataLakeClientOptions options, ILogger logger = null) Parameters Type Name Description Uri serviceUri A Uri referencing the Data Lake service TokenCredential credential The token credential used to sign requests. DataLakeClientOptions options Client options that define the transport pipeline policies for authentication, retries, etc., that are applied to every request. ILogger logger Optional ILogger. View Source StorageLake(Uri, TokenCredential, ILogger) Creates an instance of StorageLake. Declaration public StorageLake(Uri serviceUri, TokenCredential credential, ILogger logger = null) Parameters Type Name Description Uri serviceUri A Uri referencing the Data Lake service TokenCredential credential The token credential used to sign requests. ILogger logger Optional ILogger. View Source StorageLake(Uri, DataLakeClientOptions, ILogger) Creates an instance of StorageLake. Declaration public StorageLake(Uri serviceUri, DataLakeClientOptions options, ILogger logger = null) Parameters Type Name Description Uri serviceUri A Uri referencing the Data Lake service DataLakeClientOptions options Client options that define the transport pipeline policies for authentication, retries, etc., that are applied to every request. ILogger logger Optional ILogger. View Source StorageLake(Uri, StorageSharedKeyCredential, DataLakeClientOptions, ILogger) Creates an instance of StorageLake. Declaration public StorageLake(Uri serviceUri, StorageSharedKeyCredential credential, DataLakeClientOptions options, ILogger logger = null) Parameters Type Name Description Uri serviceUri A Uri referencing the Data Lake service StorageSharedKeyCredential credential The shared key credential used to sign requests. DataLakeClientOptions options Client options that define the transport pipeline policies for authentication, retries, etc., that are applied to every request. ILogger logger Optional ILogger. View Source StorageLake(Uri, StorageSharedKeyCredential, ILogger) Creates an instance of StorageLake. Declaration public StorageLake(Uri serviceUri, StorageSharedKeyCredential credential, ILogger logger = null) Parameters Type Name Description Uri serviceUri A Uri referencing the Data Lake service StorageSharedKeyCredential credential The shared key credential used to sign requests. ILogger logger Optional ILogger. View Source StorageLake(Uri, ILogger) Creates an instance of StorageLake. Declaration public StorageLake(Uri serviceUri, ILogger logger = null) Parameters Type Name Description Uri serviceUri A Uri referencing the Data Lake service ILogger logger Optional ILogger. Methods View Source CreateDirectoryAsync(String, String, PathHttpHeaders, IDictionary<String, String>, String, String, DataLakeRequestConditions, CancellationToken) Creates a directory within an existing file system. Declaration public async Task CreateDirectoryAsync(string fileSystemName, string path, PathHttpHeaders httpHeaders = null, IDictionary<string, string> metadata = null, string permissions = null, string unmask = null, DataLakeRequestConditions conditions = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String fileSystemName Name of file system where the directory will be created. String path Path to directory to create. PathHttpHeaders httpHeaders Optional standard HTTP header properties that can be set for the new file or directory.. IDictionary < String , String > metadata Optional custom metadata to set for this file or directory. String permissions Optional and only valid if Hierarchical Namespace is enabled for the account. Sets POSIX access permissions for the file owner, the file owning group, and others. Each class may be granted read, write, or execute permission. The sticky bit is also supported. Both symbolic (rwxrw-rw-) and 4-digit octal notation (e.g. 0766) are supported. String unmask Optional and only valid if Hierarchical Namespace is enabled for the account. When creating a file or directory and the parent folder does not have a default ACL, the umask restricts the permissions of the file or directory to be created. The resulting permission is given by p bitwise-and ^u, where p is the permission and u is the umask. For example, if p is 0777 and u is 0057, then the resulting permission is 0720. The default permission is 0777 for a directory and 0666 for a file. The default umask is 0027. The umask must be specified in 4-digit octal notation (e.g. 0766). DataLakeRequestConditions conditions Optional DataLakeRequestConditions to add conditions on the creation of this file or directory. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task Task View Source CreateFileSystemAsync(String, PublicAccessType, IDictionary<String, String>, CancellationToken) Creates a new file system in data lake. Declaration public async Task CreateFileSystemAsync(string fileSystemName, PublicAccessType publicAccess = PublicAccessType.None, IDictionary<string, string> metadata = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String fileSystemName Name of file system to create. PublicAccessType publicAccess Optionally specifies whether data in the file system may be accessed publicly and the level of access; defualt in \"None\", i.e., no public access. IDictionary < String , String > metadata Optional file system metadata. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task View Source DeleteDirectoryAsync(String, String, DataLakeRequestConditions, CancellationToken) Deletes a directory from a file system. Declaration public async Task DeleteDirectoryAsync(string fileSystemName, string path, DataLakeRequestConditions conditions = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String fileSystemName Name of file system that contains the directory to delete. String path Path to the directory. DataLakeRequestConditions conditions Optional DataLakeRequestConditions to add conditions on the creation of this file or directory. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task Task View Source DeleteFileAsync(String, String, String, CancellationToken) Deletes a file from data lake. Declaration public async Task<bool> DeleteFileAsync(string fileSystemName, string directoryName, string filename, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String fileSystemName Name of file system. String directoryName Name of directory in file system. String filename Name of file to delete. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < Boolean > True if file is deleted; otherwise false. View Source DeleteFileSystemAsnyc(String, DataLakeRequestConditions, CancellationToken) Deletes an existing file system. Declaration public async Task DeleteFileSystemAsnyc(string fileSystemName, DataLakeRequestConditions conditions = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String fileSystemName Name of file system to delete. DataLakeRequestConditions conditions Optional DataLakeRequestConditions to add conditions on the deletion of this file system. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task Task View Source DirectoryExistsAsync(String, String) Indicates whether a directory exists within a file system. Declaration public async Task<bool> DirectoryExistsAsync(string fileSystemName, string path) Parameters Type Name Description String fileSystemName Name of file system to check. String path Path to directory to check. Returns Type Description Task < Boolean > True if directory exists; otherwise false. View Source FileSystemExistsAsync(String) Indicates whether a file system exists. Declaration public async Task<bool> FileSystemExistsAsync(string fileSystemName) Parameters Type Name Description String fileSystemName Name of file system to check for existence. Returns Type Description Task < Boolean > True if file system exists; otherwise false. View Source ReadFileAsync(String, String, String, DataLakeOpenReadOptions, CancellationToken) Reads a file from data lake storage. Declaration public async Task<byte[]> ReadFileAsync(string fileSystemName, string directoryName, string filename, DataLakeOpenReadOptions options = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String fileSystemName Name of file system. String directoryName Name of directory in file system as the destination read. String filename Name of file to read. DataLakeOpenReadOptions options Data lake read options. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < Byte []> Array of byte of the content of the file read. View Source UploadFileAsync(String, String, String, Boolean, Stream, CancellationToken) Uploads content to a file in data lake. Declaration public async Task UploadFileAsync(string fileSystemName, string directoryName, string filename, bool overwrite, Stream content, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String fileSystemName Name of file system. String directoryName Name of directory in file system to write. String filename Name of file to write. Boolean overwrite Indicators whether the file should be overwritten if exists. Stream content File content as stream. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task Task View Source UploadFileAsync(String, String, String, Stream, DataLakeFileUploadOptions, CancellationToken) Uploads a local file to data lake storage. Declaration public async Task UploadFileAsync(string fileSystemName, string directoryName, string filename, Stream content, DataLakeFileUploadOptions options, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String fileSystemName Name of file system. String directoryName Name of directory in file system as destination for upload. String filename File name to create in the directory for the upload. Stream content Content stream to upload. DataLakeFileUploadOptions options DataLake file upload options CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task Task View Source WriteFileAsync(String, String, String, Byte[], DataLakeFileOpenWriteOptions, CancellationToken) Uploads a local file to data lake storage. Declaration public async Task WriteFileAsync(string fileSystemName, string directoryName, string filename, byte[] content, DataLakeFileOpenWriteOptions options = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String fileSystemName Name of file system. String directoryName Name of directory in file system as destination for upload. String filename File name to create in the directory for the upload. Byte [] content Content array of bytes to upload. DataLakeFileOpenWriteOptions options DataLake file open write options. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task Task"
  },
  "reference/DataServices.Storage.StorageQueue.html": {
    "href": "reference/DataServices.Storage.StorageQueue.html",
    "title": "Class StorageQueue | Title",
    "keywords": "Class StorageQueue Allows simple access to Azure storage queues. Inheritance Object StorageQueue Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Storage Assembly : DataServices.Storage.dll Syntax public class StorageQueue Constructors View Source StorageQueue(ILogger) Declaration protected StorageQueue(ILogger logger = null) Parameters Type Name Description ILogger logger View Source StorageQueue(String, QueueClientOptions, ILogger) Creates an instance of StorageQueue. Declaration public StorageQueue(string connectionString, QueueClientOptions options = null, ILogger logger = null) Parameters Type Name Description String connectionString A connection string includes the authentication information required for your application to access data in an Azure Storage account at runtime. QueueClientOptions options Optional client options that define the transport pipeline policies for authentication, retries, etc., that are applied to every request. ILogger logger Optional ILogger. View Source StorageQueue(String, ILogger) Creates an instance of StorageQueue. Declaration public StorageQueue(string connectionString, ILogger logger = null) Parameters Type Name Description String connectionString A connection string includes the authentication information required for your application to access data in an Azure Storage account at runtime. ILogger logger Optional ILogger. View Source StorageQueue(Uri, AzureSasCredential, QueueClientOptions, ILogger) Creates an instance of StorageQueue. Declaration public StorageQueue(Uri serviceUri, AzureSasCredential credential, QueueClientOptions options = null, ILogger logger = null) Parameters Type Name Description Uri serviceUri A Uri referencing the queue service. AzureSasCredential credential The shared access signature credential used to sign requests. QueueClientOptions options Optional client options that define the transport pipeline policies for authentication, retries, etc., that are applied to every request. ILogger logger Optional ILogger. View Source StorageQueue(Uri, TokenCredential, QueueClientOptions, ILogger) Creates an instance of StorageQueue. Declaration public StorageQueue(Uri serviceUri, TokenCredential credential, QueueClientOptions options = null, ILogger logger = null) Parameters Type Name Description Uri serviceUri A Uri referencing the queue service. TokenCredential credential The token credential used to sign requests. QueueClientOptions options Optional client options that define the transport pipeline policies for authentication, retries, etc., that are applied to every request. ILogger logger Optional ILogger. View Source StorageQueue(Uri, QueueClientOptions, ILogger) Creates an instance of StorageQueue. Declaration public StorageQueue(Uri serviceUri, QueueClientOptions options = null, ILogger logger = null) Parameters Type Name Description Uri serviceUri A Uri referencing the queue service. QueueClientOptions options Optional client options that define the transport pipeline policies for authentication, retries, etc., that are applied to every request. ILogger logger Optional ILogger. View Source StorageQueue(Uri, StorageSharedKeyCredential, QueueClientOptions, ILogger) Creates an instance of StorageQueue. Declaration public StorageQueue(Uri serviceUri, StorageSharedKeyCredential credential, QueueClientOptions options = null, ILogger logger = null) Parameters Type Name Description Uri serviceUri A Uri referencing the queue service. StorageSharedKeyCredential credential The shared key credential used to sign requests. QueueClientOptions options Optional client options that define the transport pipeline policies for authentication, retries, etc., that are applied to every request. ILogger logger Optional ILogger. Methods View Source ClearMessagesAsync(String, CancellationToken) Clears messages from a queue. Declaration public async Task ClearMessagesAsync(string queueName, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String queueName Name of queue to clear messages. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task Task View Source CreateQueueIfNotExistsAsync(String, IDictionary<String, String>, CancellationToken) Creates queue if it not does already exist. Declaration public async Task<bool> CreateQueueIfNotExistsAsync(string queueName, IDictionary<string, string> metadata = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String queueName Nmme of queue to create. IDictionary < String , String > metadata Optional queue metadata. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < Boolean > True if queue created or exists; otherwise false. View Source DeleteQueueIfExistsAsync(String, CancellationToken) Deletes a queue if it exists. Declaration public async Task<bool> DeleteQueueIfExistsAsync(string queueName, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String queueName Name of queue to delete. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < Boolean > True if queue deleted or not exists; otherwise false. View Source DequeueAsync(String, Nullable<TimeSpan>, CancellationToken) Dequeues a message from a queue. Declaration public async Task<QueueMessage> DequeueAsync(string queueName, TimeSpan? visibilityTimeout, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String queueName Name of queue to dequeue message. Nullable < TimeSpan > visibilityTimeout Visibility timeout. Optional with a default value of 0. Cannot be larger than 7 days. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < QueueMessage > QueueMessage View Source DequeueBatchAsync(String, Nullable<Int32>, Nullable<TimeSpan>, CancellationToken) Dequeues a batch of message from a queue. Declaration public async Task<QueueMessage[]> DequeueBatchAsync(string queueName, int? maxMessages, TimeSpan? visibilityTimeout, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String queueName Name of queue to dequeue message. Nullable < Int32 > maxMessages Maximum number of messages to dequeue in batch. Nullable < TimeSpan > visibilityTimeout Visibility timeout. Optional with a default value of 0. Cannot be larger than 7 days. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < QueueMessage []> View Source EnqueueAsync(String, Byte[], Nullable<TimeSpan>, Nullable<TimeSpan>, CancellationToken) Enqueues a message into a queue. Declaration public async Task<SendReceipt> EnqueueAsync(string queueName, byte[] message, TimeSpan? visibilityTimeout, TimeSpan? ttl, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String queueName Name of queue to enqueue message. Byte [] message Message to enqueue. Nullable < TimeSpan > visibilityTimeout Visibility timeout. Optional with a default value of 0. Cannot be larger than 7 days. Nullable < TimeSpan > ttl Optional. Specifies the time-to-live interval for the message. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < SendReceipt > SendReceipt View Source EnqueueAsync(String, String, Nullable<TimeSpan>, Nullable<TimeSpan>, CancellationToken) Enqueues a message into a queue. Declaration public async Task<SendReceipt> EnqueueAsync(string queueName, string message, TimeSpan? visibilityTimeout, TimeSpan? ttl, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String queueName Name of queue to enqueue message. String message Message to enqueue. Nullable < TimeSpan > visibilityTimeout Visibility timeout. Optional with a default value of 0. Cannot be larger than 7 days. Nullable < TimeSpan > ttl Optional. Specifies the time-to-live interval for the message. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < SendReceipt > SendReceipt View Source ListQueuesAync(QueueTraits, String, CancellationToken) Gets a list of queue names. Declaration public async Task<List<string>> ListQueuesAync(QueueTraits traits = QueueTraits.None, string prefix = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description QueueTraits traits Optional trait options for shaping the queues; default is \"None\". String prefix Optional string that filters the results to return only queues whose name begins with the specified prefix. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < List < String >> Queue names as list of string. View Source PeekMessageAsync(String, CancellationToken) Peeks a message from a queue. Declaration public async Task<PeekedMessage> PeekMessageAsync(string queueName, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String queueName Name of queue to peek message. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < PeekedMessage > PeekedMessage View Source PeekMessagesAsync(String, Nullable<Int32>, CancellationToken) Peeks a batch of messages from a queue. Declaration public async Task<PeekedMessage[]> PeekMessagesAsync(string queueName, int? maxMessages, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String queueName Name of queue to peek a batch of messages. Nullable < Int32 > maxMessages Maximum number of messages to peek in queue. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < PeekedMessage []> Array of PeekedMessage."
  },
  "reference/DataServices.Storage.StorageTable.html": {
    "href": "reference/DataServices.Storage.StorageTable.html",
    "title": "Class StorageTable | Title",
    "keywords": "Class StorageTable Allows simple access to Azure storage tables. Inheritance Object StorageTable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DataServices.Storage Assembly : DataServices.Storage.dll Syntax public class StorageTable Constructors View Source StorageTable(ILogger) Declaration protected StorageTable(ILogger logger = null) Parameters Type Name Description ILogger logger View Source StorageTable(String, TableClientOptions, ILogger) Creates an instance of StorageTable. Declaration public StorageTable(string connectionString, TableClientOptions options = null, ILogger logger = null) Parameters Type Name Description String connectionString A connection string includes the authentication information required for your application to access data in an Azure Storage account at runtime. TableClientOptions options Optional client options that define the transport pipeline policies for authentication, retries, etc., that are applied to every request. ILogger logger Optional lLogger for observability. View Source StorageTable(String, ILogger) Creates an instance of StorageTable. Declaration public StorageTable(string connectionString, ILogger logger = null) Parameters Type Name Description String connectionString A connection string includes the authentication information required for your application to access data in an Azure Storage account at runtime. ILogger logger Optional lLogger for observability. View Source StorageTable(Uri, AzureSasCredential, TableClientOptions, ILogger) Creates an instance of StorageTable. Declaration public StorageTable(Uri endpoint, AzureSasCredential credential, TableClientOptions options = null, ILogger logger = null) Parameters Type Name Description Uri endpoint A Uri referencing the table service account. AzureSasCredential credential The shared access signature credential used to sign requests. TableClientOptions options Optional client options that define the transport pipeline policies for authentication, retries, etc., that are applied to every request. ILogger logger Optional lLogger for observability. View Source StorageTable(Uri, TokenCredential, TableClientOptions, ILogger) Creates an instance of StorageTable. Declaration public StorageTable(Uri endpoint, TokenCredential credential, TableClientOptions options = null, ILogger logger = null) Parameters Type Name Description Uri endpoint A Uri referencing the table service account. TokenCredential credential The TokenCredential used to authorize requests. TableClientOptions options Optional client options that define the transport pipeline policies for authentication, retries, etc., that are applied to every request. ILogger logger Optional lLogger for observability. View Source StorageTable(Uri, TableClientOptions, ILogger) Creates an instance of StorageTable. Declaration public StorageTable(Uri endpoint, TableClientOptions options = null, ILogger logger = null) Parameters Type Name Description Uri endpoint A Uri referencing the table service account. TableClientOptions options Optional client options that define the transport pipeline policies for authentication, retries, etc., that are applied to every request. ILogger logger Optional lLogger for observability. View Source StorageTable(Uri, TableSharedKeyCredential, TableClientOptions, ILogger) Creates an instance of StorageTable. Declaration public StorageTable(Uri endpoint, TableSharedKeyCredential credential, TableClientOptions options = null, ILogger logger = null) Parameters Type Name Description Uri endpoint A Uri referencing the table service account. TableSharedKeyCredential credential The shared key credential used to sign requests. TableClientOptions options Optional client options that define the transport pipeline policies for authentication, retries, etc., that are applied to every request. ILogger logger Optional lLogger for observability. View Source StorageTable(Uri, TableSharedKeyCredential, ILogger) Creates an instance of StorageTable. Declaration public StorageTable(Uri endpoint, TableSharedKeyCredential credential, ILogger logger = null) Parameters Type Name Description Uri endpoint A Uri referencing the table service account. TableSharedKeyCredential credential The shared key credential used to sign requests. ILogger logger Optional lLogger for observability. Methods View Source AddEntityAsync(String, ITableEntity, CancellationToken) Inserts a new entity into a table. Declaration public async Task<Response> AddEntityAsync(string tableName, ITableEntity entity, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String tableName Name of table to insert entity. ITableEntity entity Entity to insert. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < Response > TableResult View Source CreateTableIsNotExistsAsync(String, CancellationToken) Creates a table if it does not already exist. Declaration public async Task<bool> CreateTableIsNotExistsAsync(string tableName, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String tableName Name of table to create. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < Boolean > True if table created or exists; otherwise false. View Source DeleteEntityAsync(String, ITableEntity, CancellationToken) Creates a new table operation that deletes the given entity from a table. Declaration public async Task<Response> DeleteEntityAsync(string tableName, ITableEntity entity, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String tableName Name of table. ITableEntity entity Entity to delete. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < Response > TableResult View Source DeleteTableIfExistsAsync(String, CancellationToken) Deletes a table if already exists. Declaration public async Task<bool> DeleteTableIfExistsAsync(string tableName, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String tableName Name of table to delete. CancellationToken cancellationToken Optional cancellation token. Returns Type Description Task < Boolean > True if table deleted or not exists; otherwise false. View Source GetEntityAsync<T>(String, String, String, CancellationToken) Gets an entity from a table. Declaration public async Task<T> GetEntityAsync<T>(string tableName, string partitionKey, string rowKey, CancellationToken cancellationToken = default(CancellationToken)) where T : class, ITableEntity, new() Parameters Type Name Description String tableName String partitionKey String rowKey CancellationToken cancellationToken Returns Type Description Task <T> Type Parameters Name Description T View Source ListTables(String, Nullable<Int32>, CancellationToken) Gets a list of tables from table storage. Declaration public List<TableItem> ListTables(string filter = null, int? maxPerPage = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String filter Returns only items that satisfy the filter expression. Nullable < Int32 > maxPerPage The maximum number of entities that will be returned per page. CancellationToken cancellationToken A CancellationToken controlling the request lifetime. Returns Type Description List < TableItem > List of TableItem View Source ListTablesAsync(String, Nullable<Int32>, CancellationToken) Get a list of tables from table storage. Declaration public async Task<List<TableItem>> ListTablesAsync(string filter = null, int? maxPerPage = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String filter Returns only items that satisfy the filter expression. Nullable < Int32 > maxPerPage The maximum number of entities that will be returned per page. CancellationToken cancellationToken A CancellationToken controlling the request lifetime. Returns Type Description Task < List < TableItem >> List of TableItem View Source QueryTable<T>(String, String, Nullable<Int32>, CancellationToken) Queries entities from a table based on an equal operation where either/or partition key or row key is matched. Declaration public List<T> QueryTable<T>(string tableName, string filter = null, int? maxPerPage = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class, ITableEntity, new() Parameters Type Name Description String tableName Name of table. String filter Nullable < Int32 > maxPerPage CancellationToken cancellationToken Optional cancellation token. Returns Type Description List <T> TableQuerySegment Type Parameters Name Description T The type of entity to retrieve. View Source UpsertEntityAsync(String, ITableEntity, CancellationToken) Declaration public async Task<Response> UpsertEntityAsync(string tableName, ITableEntity entity, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String tableName ITableEntity entity CancellationToken cancellationToken Returns Type Description Task < Response >"
  },
  "SECURITY.html": {
    "href": "SECURITY.html",
    "title": "Security | Title",
    "keywords": "Security <!-- BEGIN MICROSOFT SECURITY.MD V0.0.5 BLOCK --> Microsoft takes the security of our software products and services seriously, which includes all source code repositories managed through our GitHub organizations, which include Microsoft , Azure , DotNet , AspNet , Xamarin , and our GitHub organizations . If you believe you have found a security vulnerability in any Microsoft-owned repository that meets Microsoft's definition of a security vulnerability , please report it to us as described below. Reporting Security Issues Please do not report security vulnerabilities through public GitHub issues. Instead, please report them to the Microsoft Security Response Center (MSRC) at https://msrc.microsoft.com/create-report . If you prefer to submit without logging in, send email to secure@microsoft.com . If possible, encrypt your message with our PGP key; please download it from the Microsoft Security Response Center PGP Key page . You should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your original message. Additional information can be found at microsoft.com/msrc . Please include the requested information listed below (as much as you can provide) to help us better understand the nature and scope of the possible issue: Type of issue (e.g. buffer overflow, SQL injection, cross-site scripting, etc.) Full paths of source file(s) related to the manifestation of the issue The location of the affected source code (tag/branch/commit or direct URL) Any special configuration required to reproduce the issue Step-by-step instructions to reproduce the issue Proof-of-concept or exploit code (if possible) Impact of the issue, including how an attacker might exploit the issue This information will help us triage your report more quickly. If you are reporting for a bug bounty, more complete reports can contribute to a higher bounty award. Please visit our Microsoft Bug Bounty Program page for more details about our active programs. Preferred Languages We prefer all communications to be in English. Policy Microsoft follows the principle of Coordinated Vulnerability Disclosure . <!-- END MICROSOFT SECURITY.MD BLOCK -->"
  },
  "src/DataServices.Caching/ReadMe.html": {
    "href": "src/DataServices.Caching/ReadMe.html",
    "title": "Microsoft.Health.Fhir.Proxy.Caching | Title",
    "keywords": "Microsoft.Health.Fhir.Proxy.Caching Overview .NET 6 SDK for adding caching using Fhir.Proxy. API Definitions Using in-memory caching with persistent storage providers as backing stores using either Azure Blob storage or Redis cache."
  },
  "src/DataServices.Channels/ReadMe.html": {
    "href": "src/DataServices.Channels/ReadMe.html",
    "title": "Microsoft.Health.Fhir.Proxy.Extensions.Channels | Title",
    "keywords": "Microsoft.Health.Fhir.Proxy.Extensions.Channels Overview .NET 6 SDK for extending channels using Fhir.Proxy. API Definitions Channels Blob Storage Channel writes messages to Azure Blob storage. Event Grid Channel writes messages to an Event Grid topic. Event Hub Channel writes messages to an Event Hub. Service Bus Channel writes messages to a Service Bus topic."
  },
  "src/DataServices.Storage/ReadMe.html": {
    "href": "src/DataServices.Storage/ReadMe.html",
    "title": "Microsoft.Health.Fhir.Proxy.Storage | Title",
    "keywords": "Microsoft.Health.Fhir.Proxy.Storage Overview .NET 6 SDK to simplify Azure storage operations when using Fhir.Proxy. API Definitions Features Azure Blob Storage Azure Tables Storage Azure Queue Storage Azure Files Azure Data Lake-"
  },
  "src/DataServices/ReadMe.html": {
    "href": "src/DataServices/ReadMe.html",
    "title": "Microsoft.Health.Fhir.Proxy | Title",
    "keywords": "Microsoft.Health.Fhir.Proxy Overview .NET 6 SDK for creating custom operations to when using the Microsoft API for FHIR. API Definitions Features Pipelines to modify FHIR requests or responses. Filters modify input and/or output Channels send input and/or to other services Bindings provide mechanism to link input and output pipelines Json Transforms enabled FHIR metadata to be modified through configuration Supports REST enabled endpoint on a variety of hosts Azure Functions Web Sites Azure Kubernetes Service (AKS) etc."
  },
  "SUPPORT.html": {
    "href": "SUPPORT.html",
    "title": "TODO: The maintainer of this repo has not yet edited this file | Title",
    "keywords": "TODO: The maintainer of this repo has not yet edited this file REPO OWNER : Do you want Customer Service & Support (CSS) support for this product/project? No CSS support: Fill out this template with information about how to file issues and get help. Yes CSS support: Fill out an intake form at aka.ms/spot . CSS will work with/help you to determine next steps. More details also available at aka.ms/onboardsupport . Not sure? Fill out a SPOT intake as though the answer were \"Yes\". CSS will help you decide. Then remove this first heading from this SUPPORT.MD file before publishing your repo. Support How to file issues and get help This project uses GitHub Issues to track bugs and feature requests. Please search the existing issues before filing new issues to avoid duplicates. For new issues, file your bug or feature request as a new Issue. For help and questions about using this project, please REPO MAINTAINER: INSERT INSTRUCTIONS HERE FOR HOW TO ENGAGE REPO OWNERS OR COMMUNITY FOR HELP. COULD BE A STACK OVERFLOW TAG OR OTHER CHANNEL. WHERE WILL YOU HELP PEOPLE? . Microsoft Support Policy Support for this PROJECT or PRODUCT is limited to the resources listed above."
  }
}