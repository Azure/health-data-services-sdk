# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: windows-2019

variables:
- group: microsoft-fhir-proxy-ci-vars
- name: major
  value: '0'
- name: minor
  value: '0'
- name: patch
  value: $[counter(format('{0}.{1}',variables['major'],variables['minor']),0)]
- name: packageversiontype
  value: '-prerelease'
- name: packageversion
  value: '$(major).$(minor).$(patch)$(packageversiontype)'

steps:
- task: AzureKeyVault@1
  inputs:
    azureSubscription: 'Smokejumper_Build (c80648b9-edf0-400f-bc0f-ba937fe9527f)'
    KeyVaultName: 'fhir-proxy-ci-vault'
    SecretsFilter: '*'
    RunAsPreJob: true
- task: AzureCLI@2
  displayName: 'Set Environment Variables'
  inputs:
    azureSubscription: 'Smokejumper_Build (c80648b9-edf0-400f-bc0f-ba937fe9527f)'
    scriptType: 'pscore'
    scriptLocation: 'inlineScript'
    inlineScript: |        
        Write-Host "##vso[task.setvariable variable=PROXY_TenantId]$(proxy-tenant-id)"
        Write-Host "##vso[task.setvariable variable=PROXY_ClientId]$(kv-client-id)"
        Write-Host "##vso[task.setvariable variable=PROXY_ClientSecret]$(kv-client-secret)"
        Write-Host "##vso[task.setvariable variable=PROXY_FhirServerUrl]$(fhir-api-url)"
        Write-Host "##vso[task.setvariable variable=PROXY_KeyVaultUri]$(proxy-key-vault-uri)"
        Write-Host "##vso[task.setvariable variable=PROXY_KeyVaultCertificateName]$(proxy-key-vault-certificate-name)"
        Write-Host "##vso[task.setvariable variable=PROXY_InstrumentationKey]$(proxy-instrumentation-key)"
        Write-Host "##vso[task.setvariable variable=PROXY_LoggingLevel]$(proxy-log-level)"        
        Write-Host "##vso[task.setvariable variable=STORAGE_CONNECTIONSTRING]$(storage-connectionstring-test)"        
        Write-Host "##vso[task.setvariable variable=PROXY_EventHubBlobConnectionString]$(proxy-storage-connectionstring)"
        Write-Host "##vso[task.setvariable variable=PROXY_EventHubProcessorContainer]$(proxy-eventhub-processorcontainer-name)"
        Write-Host "##vso[task.setvariable variable=PROXY_EventHubBlobContainer]$(proxy-eventhub-blobcontainer-name)"
        Write-Host "##vso[task.setvariable variable=PROXY_EventHubSku]$(proxy-eventhub-sku)"
        Write-Host "##vso[task.setvariable variable=PROXY_STORAGE_CONNECTIONSTRING]$(proxy-storage-connectionstring)"
        Write-Host "##vso[task.setvariable variable=PROXY_EventHubName]$(proxy-eventhub-name)"
        Write-Host "##vso[task.setvariable variable=PROXY_EventHubConnectionString]$(proxy-eventhub-connectionstring)"
        Write-Host "##vso[task.setvariable variable=PROXY_ServiceBusConnectionString]$(proxy-servicebus-connectionstring)"
        Write-Host "##vso[task.setvariable variable=PROXY_ServiceBusTopic]$(proxy-servicebus-topic)"
        Write-Host "##vso[task.setvariable variable=PROXY_ServiceBusSubscription]$(proxy-servicebus-subscription)"
        Write-Host "##vso[task.setvariable variable=PROXY_ServiceBusSku]$(proxy-servicebus-sku)"
        Write-Host "##vso[task.setvariable variable=PROXY_ServiceBusBlobConnectionString]$(proxy-storage-connectionstring)"
        Write-Host "##vso[task.setvariable variable=PROXY_ServiceBusBlobContainer]$(proxy-servicebus-blobcontainer-name)"        
        

- task: UseDotNet@2
  displayName: 'Install dotnet 5.0.x agent tools dir'
  inputs:
    packageType: 'sdk'
    version: '5.0.x'
    installationPath: $(Agent.ToolsDirectory)/dotnet
- task: UseDotNet@2
  displayName: 'Install dotnet 3.1.x SDK'
  inputs:
    packageType: 'sdk'
    version: '3.1.x'
    installationPath: $(Agent.ToolsDirectory)/dotnet
- task: NuGetToolInstaller@1
  inputs:
    versionSpec: '5.8.x'
    checkLatest: true
- task: CredScan@3
  inputs:
    outputFormat: 'csv'
    toolVersion: Latest
    verboseOutput: true
- task: DotNetCoreCLI@2
  displayName: 'Install dotnet format'
  inputs:
    command: 'custom'
    custom: 'tool'
    arguments: 'update -g dotnet-format'
- script: 'dotnet tool update -g dotnet-format && dotnet format ./src/Build.sln --check --verbosity diagnostic'
  displayName: 'Lint dotnet'
- script: echo $(Build.BuildNumber)
  displayName: 'Show the build number'
- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    arguments: '--configuration $(buildConfiguration)'
    projects: '**/src/**/*.csproj'
  displayName: 'dotnet build $(buildConfiguration)'

- task: RoslynAnalyzers@2
  inputs:
    userProvideBuildInfo: 'msBuildInfo'
    msBuildVersion: '16.0'
    msBuildArchitecture: 'DotNetCore'
    msBuildCommandline: '"C:\Program Files\dotnet\dotnet.exe" build $(Build.SourcesDirectory)\src\Build.sln'
- task: DotNetCoreCLI@2
  inputs:
    command: 'test'
    arguments: '--no-build --configuration $(buildConfiguration)'
    publishTestResults: true
    projects: '**/tests/**/*.csproj'
  displayName: 'Run unit tests - $(buildConfiguration)'